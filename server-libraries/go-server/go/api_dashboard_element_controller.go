/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DashboardElementControllerApiController binds http requests to an api service and writes the service results to the http response
type DashboardElementControllerApiController struct {
	service DashboardElementControllerApiServicer
}

// NewDashboardElementControllerApiController creates a default api controller
func NewDashboardElementControllerApiController(s DashboardElementControllerApiServicer) Router {
	return &DashboardElementControllerApiController{ service: s }
}

// Routes returns all of the api route for the DashboardElementControllerApiController
func (c *DashboardElementControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"DashboardElementControllerCreate",
			strings.ToUpper("Post"),
			"/api/dashboard-element",
			c.DashboardElementControllerCreate,
		},
		{
			"DashboardElementControllerDeleteById",
			strings.ToUpper("Delete"),
			"/api/dashboard-element/{id}",
			c.DashboardElementControllerDeleteById,
		},
		{
			"DashboardElementControllerFindByUserIdAssetIdLocation",
			strings.ToUpper("Get"),
			"/api/dashboard-elements/asset-id/{assetId}/user-id/{userId}/location/{location}",
			c.DashboardElementControllerFindByUserIdAssetIdLocation,
		},
		{
			"DashboardElementControllerMoveElementDown",
			strings.ToUpper("Patch"),
			"/api/dashboard-element/{id}/move-down",
			c.DashboardElementControllerMoveElementDown,
		},
		{
			"DashboardElementControllerMoveElementUp",
			strings.ToUpper("Patch"),
			"/api/dashboard-element/{id}/move-up",
			c.DashboardElementControllerMoveElementUp,
		},
	}
}

// DashboardElementControllerCreate - 
func (c *DashboardElementControllerApiController) DashboardElementControllerCreate(w http.ResponseWriter, r *http.Request) { 
	newDashboardElement := &NewDashboardElement{}
	if err := json.NewDecoder(r.Body).Decode(&newDashboardElement); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DashboardElementControllerCreate(*newDashboardElement)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DashboardElementControllerDeleteById - 
func (c *DashboardElementControllerApiController) DashboardElementControllerDeleteById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.DashboardElementControllerDeleteById(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DashboardElementControllerFindByUserIdAssetIdLocation - 
func (c *DashboardElementControllerApiController) DashboardElementControllerFindByUserIdAssetIdLocation(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetId := params["assetId"]
	userId := params["userId"]
	location := params["location"]
	result, err := c.service.DashboardElementControllerFindByUserIdAssetIdLocation(assetId, userId, location)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DashboardElementControllerMoveElementDown - 
func (c *DashboardElementControllerApiController) DashboardElementControllerMoveElementDown(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.DashboardElementControllerMoveElementDown(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DashboardElementControllerMoveElementUp - 
func (c *DashboardElementControllerApiController) DashboardElementControllerMoveElementUp(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.DashboardElementControllerMoveElementUp(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
