/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A VirtualAccessControllerApiController binds http requests to an api service and writes the service results to the http response
type VirtualAccessControllerApiController struct {
	service VirtualAccessControllerApiServicer
}

// NewVirtualAccessControllerApiController creates a default api controller
func NewVirtualAccessControllerApiController(s VirtualAccessControllerApiServicer) Router {
	return &VirtualAccessControllerApiController{ service: s }
}

// Routes returns all of the api route for the VirtualAccessControllerApiController
func (c *VirtualAccessControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"VirtualAccessControllerCreateAccessByGroup",
			strings.ToUpper("Post"),
			"/api/virtual-access/by-asset-group",
			c.VirtualAccessControllerCreateAccessByGroup,
		},
		{
			"VirtualAccessControllerCreateAccessByRight",
			strings.ToUpper("Post"),
			"/api/virtual-access/by-asset",
			c.VirtualAccessControllerCreateAccessByRight,
		},
		{
			"VirtualAccessControllerDeleteById",
			strings.ToUpper("Delete"),
			"/api/virtual-access/{id}",
			c.VirtualAccessControllerDeleteById,
		},
		{
			"VirtualAccessControllerFindByUserId",
			strings.ToUpper("Get"),
			"/api/virtual-access/by-userId/{userId}",
			c.VirtualAccessControllerFindByUserId,
		},
	}
}

// VirtualAccessControllerCreateAccessByGroup - 
func (c *VirtualAccessControllerApiController) VirtualAccessControllerCreateAccessByGroup(w http.ResponseWriter, r *http.Request) { 
	requestVirtualAccessRightExcludingAssetId := &RequestVirtualAccessRightExcludingAssetId{}
	if err := json.NewDecoder(r.Body).Decode(&requestVirtualAccessRightExcludingAssetId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.VirtualAccessControllerCreateAccessByGroup(*requestVirtualAccessRightExcludingAssetId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// VirtualAccessControllerCreateAccessByRight - 
func (c *VirtualAccessControllerApiController) VirtualAccessControllerCreateAccessByRight(w http.ResponseWriter, r *http.Request) { 
	requestVirtualAccessRightExcludingAssetGroupId := &RequestVirtualAccessRightExcludingAssetGroupId{}
	if err := json.NewDecoder(r.Body).Decode(&requestVirtualAccessRightExcludingAssetGroupId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.VirtualAccessControllerCreateAccessByRight(*requestVirtualAccessRightExcludingAssetGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// VirtualAccessControllerDeleteById - 
func (c *VirtualAccessControllerApiController) VirtualAccessControllerDeleteById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.VirtualAccessControllerDeleteById(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// VirtualAccessControllerFindByUserId - 
func (c *VirtualAccessControllerApiController) VirtualAccessControllerFindByUserId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	userId := params["userId"]
	result, err := c.service.VirtualAccessControllerFindByUserId(userId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
