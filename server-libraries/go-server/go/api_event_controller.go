/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A EventControllerApiController binds http requests to an api service and writes the service results to the http response
type EventControllerApiController struct {
	service EventControllerApiServicer
}

// NewEventControllerApiController creates a default api controller
func NewEventControllerApiController(s EventControllerApiServicer) Router {
	return &EventControllerApiController{ service: s }
}

// Routes returns all of the api route for the EventControllerApiController
func (c *EventControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"EventControllerCreateNow",
			strings.ToUpper("Post"),
			"/api/event",
			c.EventControllerCreateNow,
		},
		{
			"EventControllerCreateRelatedDev",
			strings.ToUpper("Post"),
			"/api/event/related-device",
			c.EventControllerCreateRelatedDev,
		},
		{
			"EventControllerCreateRule",
			strings.ToUpper("Post"),
			"/api/event/rule",
			c.EventControllerCreateRule,
		},
		{
			"EventControllerCreateRuleSubscription",
			strings.ToUpper("Post"),
			"/api/event/rule/subscription",
			c.EventControllerCreateRuleSubscription,
		},
		{
			"EventControllerFind",
			strings.ToUpper("Get"),
			"/api/events/all/{assetId}",
			c.EventControllerFind,
		},
		{
			"EventControllerFindUnresolved",
			strings.ToUpper("Get"),
			"/api/events/unresolved/{assetId}",
			c.EventControllerFindUnresolved,
		},
		{
			"EventControllerProcessSubscriptions",
			strings.ToUpper("Get"),
			"/api/event/process",
			c.EventControllerProcessSubscriptions,
		},
		{
			"EventControllerUpdateById",
			strings.ToUpper("Patch"),
			"/api/event/resolve/{id}",
			c.EventControllerUpdateById,
		},
	}
}

// EventControllerCreateNow - 
func (c *EventControllerApiController) EventControllerCreateNow(w http.ResponseWriter, r *http.Request) { 
	eventExcludingIdResolvedTimestampResolutionTimestamp := &EventExcludingIdResolvedTimestampResolutionTimestamp{}
	if err := json.NewDecoder(r.Body).Decode(&eventExcludingIdResolvedTimestampResolutionTimestamp); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.EventControllerCreateNow(*eventExcludingIdResolvedTimestampResolutionTimestamp)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// EventControllerCreateRelatedDev - 
func (c *EventControllerApiController) EventControllerCreateRelatedDev(w http.ResponseWriter, r *http.Request) { 
	eventRelatedDeviceExcludingId := &EventRelatedDeviceExcludingId{}
	if err := json.NewDecoder(r.Body).Decode(&eventRelatedDeviceExcludingId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.EventControllerCreateRelatedDev(*eventRelatedDeviceExcludingId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// EventControllerCreateRule - 
func (c *EventControllerApiController) EventControllerCreateRule(w http.ResponseWriter, r *http.Request) { 
	requestEventCreateRule := &RequestEventCreateRule{}
	if err := json.NewDecoder(r.Body).Decode(&requestEventCreateRule); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.EventControllerCreateRule(*requestEventCreateRule)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// EventControllerCreateRuleSubscription - 
func (c *EventControllerApiController) EventControllerCreateRuleSubscription(w http.ResponseWriter, r *http.Request) { 
	eventRuleSubscriptionExcludingIdLastExecTimestamp := &EventRuleSubscriptionExcludingIdLastExecTimestamp{}
	if err := json.NewDecoder(r.Body).Decode(&eventRuleSubscriptionExcludingIdLastExecTimestamp); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.EventControllerCreateRuleSubscription(*eventRuleSubscriptionExcludingIdLastExecTimestamp)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// EventControllerFind - 
func (c *EventControllerApiController) EventControllerFind(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetId := params["assetId"]
	result, err := c.service.EventControllerFind(assetId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// EventControllerFindUnresolved - 
func (c *EventControllerApiController) EventControllerFindUnresolved(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetId := params["assetId"]
	result, err := c.service.EventControllerFindUnresolved(assetId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// EventControllerProcessSubscriptions - 
func (c *EventControllerApiController) EventControllerProcessSubscriptions(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.EventControllerProcessSubscriptions()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// EventControllerUpdateById - 
func (c *EventControllerApiController) EventControllerUpdateById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.EventControllerUpdateById(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
