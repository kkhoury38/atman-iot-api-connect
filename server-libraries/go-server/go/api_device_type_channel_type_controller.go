/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DeviceTypeChannelTypeControllerApiController binds http requests to an api service and writes the service results to the http response
type DeviceTypeChannelTypeControllerApiController struct {
	service DeviceTypeChannelTypeControllerApiServicer
}

// NewDeviceTypeChannelTypeControllerApiController creates a default api controller
func NewDeviceTypeChannelTypeControllerApiController(s DeviceTypeChannelTypeControllerApiServicer) Router {
	return &DeviceTypeChannelTypeControllerApiController{ service: s }
}

// Routes returns all of the api route for the DeviceTypeChannelTypeControllerApiController
func (c *DeviceTypeChannelTypeControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"DeviceTypeChannelTypeControllerCount",
			strings.ToUpper("Get"),
			"/api/device-type-channel-type/{deviceTypeId}/count",
			c.DeviceTypeChannelTypeControllerCount,
		},
		{
			"DeviceTypeChannelTypeControllerCreate",
			strings.ToUpper("Post"),
			"/api/device-type-channel-type/{deviceTypeId}",
			c.DeviceTypeChannelTypeControllerCreate,
		},
		{
			"DeviceTypeChannelTypeControllerDeviceTypeChannelCategories",
			strings.ToUpper("Get"),
			"/api/device-type-channel-type/{deviceTypeId}/channel-categories",
			c.DeviceTypeChannelTypeControllerDeviceTypeChannelCategories,
		},
		{
			"DeviceTypeChannelTypeControllerFind",
			strings.ToUpper("Get"),
			"/api/device-type-channel-type/{deviceTypeId}/page/{page}/count/{count}",
			c.DeviceTypeChannelTypeControllerFind,
		},
		{
			"DeviceTypeChannelTypeControllerUpdateById",
			strings.ToUpper("Patch"),
			"/api/device-type-channel-type/channel-type/{channelTypeId}",
			c.DeviceTypeChannelTypeControllerUpdateById,
		},
	}
}

// DeviceTypeChannelTypeControllerCount - 
func (c *DeviceTypeChannelTypeControllerApiController) DeviceTypeChannelTypeControllerCount(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceTypeId := params["deviceTypeId"]
	result, err := c.service.DeviceTypeChannelTypeControllerCount(deviceTypeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeChannelTypeControllerCreate - 
func (c *DeviceTypeChannelTypeControllerApiController) DeviceTypeChannelTypeControllerCreate(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceTypeId := params["deviceTypeId"]
	channelTypeExcludingIdDeviceTypeId := &ChannelTypeExcludingIdDeviceTypeId{}
	if err := json.NewDecoder(r.Body).Decode(&channelTypeExcludingIdDeviceTypeId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceTypeChannelTypeControllerCreate(deviceTypeId, *channelTypeExcludingIdDeviceTypeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeChannelTypeControllerDeviceTypeChannelCategories - 
func (c *DeviceTypeChannelTypeControllerApiController) DeviceTypeChannelTypeControllerDeviceTypeChannelCategories(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceTypeId := params["deviceTypeId"]
	result, err := c.service.DeviceTypeChannelTypeControllerDeviceTypeChannelCategories(deviceTypeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeChannelTypeControllerFind - 
func (c *DeviceTypeChannelTypeControllerApiController) DeviceTypeChannelTypeControllerFind(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceTypeId := params["deviceTypeId"]
	page := params["page"]
	count := params["count"]
	result, err := c.service.DeviceTypeChannelTypeControllerFind(deviceTypeId, page, count)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeChannelTypeControllerUpdateById - 
func (c *DeviceTypeChannelTypeControllerApiController) DeviceTypeChannelTypeControllerUpdateById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	channelTypeId := params["channelTypeId"]
	channelTypeExcludingIdNameDeviceTypeId := &ChannelTypeExcludingIdNameDeviceTypeId{}
	if err := json.NewDecoder(r.Body).Decode(&channelTypeExcludingIdNameDeviceTypeId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceTypeChannelTypeControllerUpdateById(channelTypeId, *channelTypeExcludingIdNameDeviceTypeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
