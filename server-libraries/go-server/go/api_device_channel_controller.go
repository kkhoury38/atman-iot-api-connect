/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DeviceChannelControllerApiController binds http requests to an api service and writes the service results to the http response
type DeviceChannelControllerApiController struct {
	service DeviceChannelControllerApiServicer
}

// NewDeviceChannelControllerApiController creates a default api controller
func NewDeviceChannelControllerApiController(s DeviceChannelControllerApiServicer) Router {
	return &DeviceChannelControllerApiController{ service: s }
}

// Routes returns all of the api route for the DeviceChannelControllerApiController
func (c *DeviceChannelControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"DeviceChannelControllerFindByPeriod",
			strings.ToUpper("Get"),
			"/api/device-channel/data-by-period/{deviceId}/{channelId}/from/{fromTS}/to/{toTs}/page/{page}/count/{count}/groupBy/{groupBy}/operation/{operation}",
			c.DeviceChannelControllerFindByPeriod,
		},
		{
			"DeviceChannelControllerFindDeviceAllLastRecordedTS",
			strings.ToUpper("Get"),
			"/api/device-channel/last-timestamp-in-device/{deviceId}",
			c.DeviceChannelControllerFindDeviceAllLastRecordedTS,
		},
		{
			"DeviceChannelControllerFindDeviceAllLastTS",
			strings.ToUpper("Get"),
			"/api/device-channel/data-last-timestamp/all-channels/{deviceId}",
			c.DeviceChannelControllerFindDeviceAllLastTS,
		},
		{
			"DeviceChannelControllerFindDeviceChannelLastTS",
			strings.ToUpper("Get"),
			"/api/device-channel/data-last-timestamp/{deviceId}/{channelId}",
			c.DeviceChannelControllerFindDeviceChannelLastTS,
		},
		{
			"DeviceChannelControllerFindDeviceChannelLastTSSnChName",
			strings.ToUpper("Post"),
			"/api/device-channel/data-last-timestamp-by-name/{serialNo}/{channelName}",
			c.DeviceChannelControllerFindDeviceChannelLastTSSnChName,
		},
	}
}

// DeviceChannelControllerFindByPeriod - 
func (c *DeviceChannelControllerApiController) DeviceChannelControllerFindByPeriod(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	channelId := params["channelId"]
	fromTS := params["fromTS"]
	toTs := params["toTs"]
	page := params["page"]
	count := params["count"]
	groupBy := params["groupBy"]
	operation := params["operation"]
	result, err := c.service.DeviceChannelControllerFindByPeriod(deviceId, channelId, fromTS, toTs, page, count, groupBy, operation)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceChannelControllerFindDeviceAllLastRecordedTS - 
func (c *DeviceChannelControllerApiController) DeviceChannelControllerFindDeviceAllLastRecordedTS(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	result, err := c.service.DeviceChannelControllerFindDeviceAllLastRecordedTS(deviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceChannelControllerFindDeviceAllLastTS - 
func (c *DeviceChannelControllerApiController) DeviceChannelControllerFindDeviceAllLastTS(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	result, err := c.service.DeviceChannelControllerFindDeviceAllLastTS(deviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceChannelControllerFindDeviceChannelLastTS - 
func (c *DeviceChannelControllerApiController) DeviceChannelControllerFindDeviceChannelLastTS(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	channelId := params["channelId"]
	result, err := c.service.DeviceChannelControllerFindDeviceChannelLastTS(deviceId, channelId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceChannelControllerFindDeviceChannelLastTSSnChName - 
func (c *DeviceChannelControllerApiController) DeviceChannelControllerFindDeviceChannelLastTSSnChName(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	serialNo := params["serialNo"]
	channelName := params["channelName"]
	result, err := c.service.DeviceChannelControllerFindDeviceChannelLastTSSnChName(serialNo, channelName)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
