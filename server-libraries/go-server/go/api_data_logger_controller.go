/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DataLoggerControllerApiController binds http requests to an api service and writes the service results to the http response
type DataLoggerControllerApiController struct {
	service DataLoggerControllerApiServicer
}

// NewDataLoggerControllerApiController creates a default api controller
func NewDataLoggerControllerApiController(s DataLoggerControllerApiServicer) Router {
	return &DataLoggerControllerApiController{ service: s }
}

// Routes returns all of the api route for the DataLoggerControllerApiController
func (c *DataLoggerControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"DataLoggerControllerCreate",
			strings.ToUpper("Post"),
			"/api/data-logger",
			c.DataLoggerControllerCreate,
		},
		{
			"DataLoggerControllerDeleteById",
			strings.ToUpper("Delete"),
			"/api/data-logger/{id}",
			c.DataLoggerControllerDeleteById,
		},
		{
			"DataLoggerControllerFind",
			strings.ToUpper("Get"),
			"/api/data-loggers",
			c.DataLoggerControllerFind,
		},
		{
			"DataLoggerControllerSetupFromFtp1",
			strings.ToUpper("Post"),
			"/api/data-logger/setup-ftp/step1/{id}/{dataLoggerToken}",
			c.DataLoggerControllerSetupFromFtp1,
		},
		{
			"DataLoggerControllerSetupFromFtp3",
			strings.ToUpper("Post"),
			"/api/data-logger/setup-ftp/step3/{id}",
			c.DataLoggerControllerSetupFromFtp3,
		},
		{
			"DataLoggerControllerSetupFromFtpCsv2",
			strings.ToUpper("Post"),
			"/api/data-logger/setup-ftp/step2/csv/{id}",
			c.DataLoggerControllerSetupFromFtpCsv2,
		},
		{
			"DataLoggerControllerSetupFromFtpXml2",
			strings.ToUpper("Post"),
			"/api/data-logger/setup-ftp/step2/xml/{id}",
			c.DataLoggerControllerSetupFromFtpXml2,
		},
		{
			"DataLoggerControllerUploadDataFromCsv",
			strings.ToUpper("Post"),
			"/api/data-logger/data-from-csv/{id}/{dataLoggerToken}",
			c.DataLoggerControllerUploadDataFromCsv,
		},
		{
			"DataLoggerControllerUploadDataFromXml",
			strings.ToUpper("Post"),
			"/api/data-logger/data-from-xml/{id}/{dataLoggerToken}",
			c.DataLoggerControllerUploadDataFromXml,
		},
	}
}

// DataLoggerControllerCreate - 
func (c *DataLoggerControllerApiController) DataLoggerControllerCreate(w http.ResponseWriter, r *http.Request) { 
	dataLoggerExcludingIdAuthTokenConfigUserId := &DataLoggerExcludingIdAuthTokenConfigUserId{}
	if err := json.NewDecoder(r.Body).Decode(&dataLoggerExcludingIdAuthTokenConfigUserId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DataLoggerControllerCreate(*dataLoggerExcludingIdAuthTokenConfigUserId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerDeleteById - 
func (c *DataLoggerControllerApiController) DataLoggerControllerDeleteById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.DataLoggerControllerDeleteById(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerFind - 
func (c *DataLoggerControllerApiController) DataLoggerControllerFind(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.DataLoggerControllerFind()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerSetupFromFtp1 - 
func (c *DataLoggerControllerApiController) DataLoggerControllerSetupFromFtp1(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	dataLoggerToken := params["dataLoggerToken"]
	result, err := c.service.DataLoggerControllerSetupFromFtp1(id, dataLoggerToken)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerSetupFromFtp3 - 
func (c *DataLoggerControllerApiController) DataLoggerControllerSetupFromFtp3(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	responseDataLoggerSetupStep2 := &ResponseDataLoggerSetupStep2{}
	if err := json.NewDecoder(r.Body).Decode(&responseDataLoggerSetupStep2); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DataLoggerControllerSetupFromFtp3(id, *responseDataLoggerSetupStep2)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerSetupFromFtpCsv2 - 
func (c *DataLoggerControllerApiController) DataLoggerControllerSetupFromFtpCsv2(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	requestDataLoggerSetupCsv2ExcludingFileFormat := &RequestDataLoggerSetupCsv2ExcludingFileFormat{}
	if err := json.NewDecoder(r.Body).Decode(&requestDataLoggerSetupCsv2ExcludingFileFormat); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DataLoggerControllerSetupFromFtpCsv2(id, *requestDataLoggerSetupCsv2ExcludingFileFormat)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerSetupFromFtpXml2 - 
func (c *DataLoggerControllerApiController) DataLoggerControllerSetupFromFtpXml2(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	requestDataLoggerSetupXml2ExcludingFileFormat := &RequestDataLoggerSetupXml2ExcludingFileFormat{}
	if err := json.NewDecoder(r.Body).Decode(&requestDataLoggerSetupXml2ExcludingFileFormat); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DataLoggerControllerSetupFromFtpXml2(id, *requestDataLoggerSetupXml2ExcludingFileFormat)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerUploadDataFromCsv - 
func (c *DataLoggerControllerApiController) DataLoggerControllerUploadDataFromCsv(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	dataLoggerToken := params["dataLoggerToken"]
	result, err := c.service.DataLoggerControllerUploadDataFromCsv(id, dataLoggerToken)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DataLoggerControllerUploadDataFromXml - 
func (c *DataLoggerControllerApiController) DataLoggerControllerUploadDataFromXml(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	dataLoggerToken := params["dataLoggerToken"]
	result, err := c.service.DataLoggerControllerUploadDataFromXml(id, dataLoggerToken)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
