/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A UserSubscriptionControllerApiController binds http requests to an api service and writes the service results to the http response
type UserSubscriptionControllerApiController struct {
	service UserSubscriptionControllerApiServicer
}

// NewUserSubscriptionControllerApiController creates a default api controller
func NewUserSubscriptionControllerApiController(s UserSubscriptionControllerApiServicer) Router {
	return &UserSubscriptionControllerApiController{ service: s }
}

// Routes returns all of the api route for the UserSubscriptionControllerApiController
func (c *UserSubscriptionControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"UserSubscriptionControllerCreate",
			strings.ToUpper("Post"),
			"/api/user-subscriptions/paypal/callback",
			c.UserSubscriptionControllerCreate,
		},
		{
			"UserSubscriptionControllerCreateUserSubscriptionBySubId",
			strings.ToUpper("Get"),
			"/api/user-subscription/get-new/{subscriptionId}",
			c.UserSubscriptionControllerCreateUserSubscriptionBySubId,
		},
		{
			"UserSubscriptionControllerFindSubscriptionsByCategory",
			strings.ToUpper("Get"),
			"/api/user-subscription/subscriptions/{product}",
			c.UserSubscriptionControllerFindSubscriptionsByCategory,
		},
		{
			"UserSubscriptionControllerGetByRefferenceCode",
			strings.ToUpper("Get"),
			"/api/user-subscription/get-by-reference-code/{referenceCode}",
			c.UserSubscriptionControllerGetByRefferenceCode,
		},
		{
			"UserSubscriptionControllerVerifyCode",
			strings.ToUpper("Post"),
			"/api/user-subscriptions/verify-reference-code",
			c.UserSubscriptionControllerVerifyCode,
		},
	}
}

// UserSubscriptionControllerCreate - 
func (c *UserSubscriptionControllerApiController) UserSubscriptionControllerCreate(w http.ResponseWriter, r *http.Request) { 
	body := &map[string]interface{}{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UserSubscriptionControllerCreate(*body)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserSubscriptionControllerCreateUserSubscriptionBySubId - 
func (c *UserSubscriptionControllerApiController) UserSubscriptionControllerCreateUserSubscriptionBySubId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	subscriptionId := params["subscriptionId"]
	result, err := c.service.UserSubscriptionControllerCreateUserSubscriptionBySubId(subscriptionId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserSubscriptionControllerFindSubscriptionsByCategory - 
func (c *UserSubscriptionControllerApiController) UserSubscriptionControllerFindSubscriptionsByCategory(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	product := params["product"]
	result, err := c.service.UserSubscriptionControllerFindSubscriptionsByCategory(product)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserSubscriptionControllerGetByRefferenceCode - 
func (c *UserSubscriptionControllerApiController) UserSubscriptionControllerGetByRefferenceCode(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	referenceCode := params["referenceCode"]
	result, err := c.service.UserSubscriptionControllerGetByRefferenceCode(referenceCode)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserSubscriptionControllerVerifyCode - 
func (c *UserSubscriptionControllerApiController) UserSubscriptionControllerVerifyCode(w http.ResponseWriter, r *http.Request) { 
	codeVerificationRequest := &CodeVerificationRequest{}
	if err := json.NewDecoder(r.Body).Decode(&codeVerificationRequest); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UserSubscriptionControllerVerifyCode(*codeVerificationRequest)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
