/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DeviceTypeControllerApiController binds http requests to an api service and writes the service results to the http response
type DeviceTypeControllerApiController struct {
	service DeviceTypeControllerApiServicer
}

// NewDeviceTypeControllerApiController creates a default api controller
func NewDeviceTypeControllerApiController(s DeviceTypeControllerApiServicer) Router {
	return &DeviceTypeControllerApiController{ service: s }
}

// Routes returns all of the api route for the DeviceTypeControllerApiController
func (c *DeviceTypeControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"DeviceTypeControllerCount",
			strings.ToUpper("Get"),
			"/api/device-type/count",
			c.DeviceTypeControllerCount,
		},
		{
			"DeviceTypeControllerCreate",
			strings.ToUpper("Post"),
			"/api/device-type",
			c.DeviceTypeControllerCreate,
		},
		{
			"DeviceTypeControllerFind",
			strings.ToUpper("Get"),
			"/api/device-type/get-all/page/{page}/count/{count}",
			c.DeviceTypeControllerFind,
		},
		{
			"DeviceTypeControllerGetAssetDeviceCategories",
			strings.ToUpper("Get"),
			"/api/device-type/device-categories-in-asset/{assetId}",
			c.DeviceTypeControllerGetAssetDeviceCategories,
		},
		{
			"DeviceTypeControllerUpdateById",
			strings.ToUpper("Patch"),
			"/api/device-type/{id}",
			c.DeviceTypeControllerUpdateById,
		},
	}
}

// DeviceTypeControllerCount - 
func (c *DeviceTypeControllerApiController) DeviceTypeControllerCount(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.DeviceTypeControllerCount()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeControllerCreate - 
func (c *DeviceTypeControllerApiController) DeviceTypeControllerCreate(w http.ResponseWriter, r *http.Request) { 
	deviceType := &DeviceType{}
	if err := json.NewDecoder(r.Body).Decode(&deviceType); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceTypeControllerCreate(*deviceType)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeControllerFind - 
func (c *DeviceTypeControllerApiController) DeviceTypeControllerFind(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	page := params["page"]
	count := params["count"]
	result, err := c.service.DeviceTypeControllerFind(page, count)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeControllerGetAssetDeviceCategories - 
func (c *DeviceTypeControllerApiController) DeviceTypeControllerGetAssetDeviceCategories(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetId := params["assetId"]
	result, err := c.service.DeviceTypeControllerGetAssetDeviceCategories(assetId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceTypeControllerUpdateById - 
func (c *DeviceTypeControllerApiController) DeviceTypeControllerUpdateById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	deviceTypeExcludingIdModelManufacturer := &DeviceTypeExcludingIdModelManufacturer{}
	if err := json.NewDecoder(r.Body).Decode(&deviceTypeExcludingIdModelManufacturer); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceTypeControllerUpdateById(id, *deviceTypeExcludingIdModelManufacturer)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
