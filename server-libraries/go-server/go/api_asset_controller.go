/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A AssetControllerApiController binds http requests to an api service and writes the service results to the http response
type AssetControllerApiController struct {
	service AssetControllerApiServicer
}

// NewAssetControllerApiController creates a default api controller
func NewAssetControllerApiController(s AssetControllerApiServicer) Router {
	return &AssetControllerApiController{ service: s }
}

// Routes returns all of the api route for the AssetControllerApiController
func (c *AssetControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"AssetControllerCreate",
			strings.ToUpper("Post"),
			"/api/asset",
			c.AssetControllerCreate,
		},
		{
			"AssetControllerDeleteById",
			strings.ToUpper("Delete"),
			"/api/asset/{id}",
			c.AssetControllerDeleteById,
		},
		{
			"AssetControllerFind",
			strings.ToUpper("Get"),
			"/api/assets/{assetGroupId}",
			c.AssetControllerFind,
		},
		{
			"AssetControllerFindByName",
			strings.ToUpper("Get"),
			"/api/asset/by-name/{assetName}",
			c.AssetControllerFindByName,
		},
		{
			"AssetControllerFindByUserId",
			strings.ToUpper("Get"),
			"/api/assets/by-user/{userId}",
			c.AssetControllerFindByUserId,
		},
		{
			"AssetControllerUpdateById",
			strings.ToUpper("Patch"),
			"/api/asset/{id}",
			c.AssetControllerUpdateById,
		},
	}
}

// AssetControllerCreate - 
func (c *AssetControllerApiController) AssetControllerCreate(w http.ResponseWriter, r *http.Request) { 
	assetExcludingId := &AssetExcludingId{}
	if err := json.NewDecoder(r.Body).Decode(&assetExcludingId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.AssetControllerCreate(*assetExcludingId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// AssetControllerDeleteById - 
func (c *AssetControllerApiController) AssetControllerDeleteById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.AssetControllerDeleteById(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// AssetControllerFind - 
func (c *AssetControllerApiController) AssetControllerFind(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetGroupId := params["assetGroupId"]
	result, err := c.service.AssetControllerFind(assetGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// AssetControllerFindByName - 
func (c *AssetControllerApiController) AssetControllerFindByName(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetName := params["assetName"]
	result, err := c.service.AssetControllerFindByName(assetName)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// AssetControllerFindByUserId - 
func (c *AssetControllerApiController) AssetControllerFindByUserId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	userId := params["userId"]
	result, err := c.service.AssetControllerFindByUserId(userId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// AssetControllerUpdateById - 
func (c *AssetControllerApiController) AssetControllerUpdateById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	assetExcludingIdAssetGroupId := &AssetExcludingIdAssetGroupId{}
	if err := json.NewDecoder(r.Body).Decode(&assetExcludingIdAssetGroupId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.AssetControllerUpdateById(id, *assetExcludingIdAssetGroupId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
