/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A UserControllerApiController binds http requests to an api service and writes the service results to the http response
type UserControllerApiController struct {
	service UserControllerApiServicer
}

// NewUserControllerApiController creates a default api controller
func NewUserControllerApiController(s UserControllerApiServicer) Router {
	return &UserControllerApiController{ service: s }
}

// Routes returns all of the api route for the UserControllerApiController
func (c *UserControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"UserControllerCreate",
			strings.ToUpper("Post"),
			"/api/user/register/{referenceCode}",
			c.UserControllerCreate,
		},
		{
			"UserControllerCreateVirtual",
			strings.ToUpper("Post"),
			"/api/user/register/virtual",
			c.UserControllerCreateVirtual,
		},
		{
			"UserControllerDeleteVirtualUserById",
			strings.ToUpper("Delete"),
			"/api/users/virtualUser/{id}",
			c.UserControllerDeleteVirtualUserById,
		},
		{
			"UserControllerGetVirtualUsers",
			strings.ToUpper("Get"),
			"/api/user/getVirtualUsers",
			c.UserControllerGetVirtualUsers,
		},
		{
			"UserControllerLogin",
			strings.ToUpper("Post"),
			"/api/user/login",
			c.UserControllerLogin,
		},
	}
}

// UserControllerCreate - 
func (c *UserControllerApiController) UserControllerCreate(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	referenceCode := params["referenceCode"]
	userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode := &UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode{}
	if err := json.NewDecoder(r.Body).Decode(&userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UserControllerCreate(referenceCode, *userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserControllerCreateVirtual - 
func (c *UserControllerApiController) UserControllerCreateVirtual(w http.ResponseWriter, r *http.Request) { 
	userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode := &UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode{}
	if err := json.NewDecoder(r.Body).Decode(&userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UserControllerCreateVirtual(*userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserControllerDeleteVirtualUserById - 
func (c *UserControllerApiController) UserControllerDeleteVirtualUserById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.UserControllerDeleteVirtualUserById(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserControllerGetVirtualUsers - 
func (c *UserControllerApiController) UserControllerGetVirtualUsers(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.UserControllerGetVirtualUsers()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// UserControllerLogin - 
func (c *UserControllerApiController) UserControllerLogin(w http.ResponseWriter, r *http.Request) { 
	userExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode := &UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode{}
	if err := json.NewDecoder(r.Body).Decode(&userExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.UserControllerLogin(*userExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
