/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DeviceEventControllerApiController binds http requests to an api service and writes the service results to the http response
type DeviceEventControllerApiController struct {
	service DeviceEventControllerApiServicer
}

// NewDeviceEventControllerApiController creates a default api controller
func NewDeviceEventControllerApiController(s DeviceEventControllerApiServicer) Router {
	return &DeviceEventControllerApiController{ service: s }
}

// Routes returns all of the api route for the DeviceEventControllerApiController
func (c *DeviceEventControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"DeviceEventControllerCountNotViewed",
			strings.ToUpper("Get"),
			"/api/device-events/by-asset/count-not-viewed/{assetId}",
			c.DeviceEventControllerCountNotViewed,
		},
		{
			"DeviceEventControllerFind",
			strings.ToUpper("Get"),
			"/api/device-events/assetId/{assetId}/page/{page}/count/{count}",
			c.DeviceEventControllerFind,
		},
		{
			"DeviceEventControllerUpdateViewedBy",
			strings.ToUpper("Get"),
			"/api/device-events/mark-read/{eventId}",
			c.DeviceEventControllerUpdateViewedBy,
		},
	}
}

// DeviceEventControllerCountNotViewed - 
func (c *DeviceEventControllerApiController) DeviceEventControllerCountNotViewed(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetId := params["assetId"]
	result, err := c.service.DeviceEventControllerCountNotViewed(assetId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceEventControllerFind - 
func (c *DeviceEventControllerApiController) DeviceEventControllerFind(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	assetId := params["assetId"]
	page := params["page"]
	count := params["count"]
	result, err := c.service.DeviceEventControllerFind(assetId, page, count)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceEventControllerUpdateViewedBy - 
func (c *DeviceEventControllerApiController) DeviceEventControllerUpdateViewedBy(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	eventId := params["eventId"]
	result, err := c.service.DeviceEventControllerUpdateViewedBy(eventId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
