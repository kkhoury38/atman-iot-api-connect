/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DeviceControllerApiController binds http requests to an api service and writes the service results to the http response
type DeviceControllerApiController struct {
	service DeviceControllerApiServicer
}

// NewDeviceControllerApiController creates a default api controller
func NewDeviceControllerApiController(s DeviceControllerApiServicer) Router {
	return &DeviceControllerApiController{ service: s }
}

// Routes returns all of the api route for the DeviceControllerApiController
func (c *DeviceControllerApiController) Routes() Routes {
	return Routes{ 
		{
			"DeviceControllerCreate",
			strings.ToUpper("Post"),
			"/api/device/{dataLoggerId}",
			c.DeviceControllerCreate,
		},
		{
			"DeviceControllerCreateChannel",
			strings.ToUpper("Post"),
			"/api/device/{deviceId}/channel",
			c.DeviceControllerCreateChannel,
		},
		{
			"DeviceControllerDisableChannelMonitoring",
			strings.ToUpper("Get"),
			"/api/device/{deviceId}/channel/{channelId}/disable-monitoring/all/{all}",
			c.DeviceControllerDisableChannelMonitoring,
		},
		{
			"DeviceControllerEnableChannelMonitoring",
			strings.ToUpper("Get"),
			"/api/device/{deviceId}/channel/{channelId}/enable-monitoring/all/{all}",
			c.DeviceControllerEnableChannelMonitoring,
		},
		{
			"DeviceControllerFind",
			strings.ToUpper("Get"),
			"/api/devices/{dataLoggerId}",
			c.DeviceControllerFind,
		},
		{
			"DeviceControllerFindChannelTypes",
			strings.ToUpper("Get"),
			"/api/device/{deviceId}/channelTypes",
			c.DeviceControllerFindChannelTypes,
		},
		{
			"DeviceControllerFindChannels",
			strings.ToUpper("Get"),
			"/api/device/{deviceId}/channels",
			c.DeviceControllerFindChannels,
		},
		{
			"DeviceControllerGetDevicesWithType",
			strings.ToUpper("Post"),
			"/api/devices/with-device-type",
			c.DeviceControllerGetDevicesWithType,
		},
		{
			"DeviceControllerUpdateById",
			strings.ToUpper("Patch"),
			"/api/device/{id}",
			c.DeviceControllerUpdateById,
		},
	}
}

// DeviceControllerCreate - 
func (c *DeviceControllerApiController) DeviceControllerCreate(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	dataLoggerId := params["dataLoggerId"]
	deviceExcludingIdDataLoggerId := &DeviceExcludingIdDataLoggerId{}
	if err := json.NewDecoder(r.Body).Decode(&deviceExcludingIdDataLoggerId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceControllerCreate(dataLoggerId, *deviceExcludingIdDataLoggerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerCreateChannel - 
func (c *DeviceControllerApiController) DeviceControllerCreateChannel(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	channelExcludingIdDeviceId := &ChannelExcludingIdDeviceId{}
	if err := json.NewDecoder(r.Body).Decode(&channelExcludingIdDeviceId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceControllerCreateChannel(deviceId, *channelExcludingIdDeviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerDisableChannelMonitoring - 
func (c *DeviceControllerApiController) DeviceControllerDisableChannelMonitoring(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	channelId := params["channelId"]
	all := params["all"]
	result, err := c.service.DeviceControllerDisableChannelMonitoring(deviceId, channelId, all)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerEnableChannelMonitoring - 
func (c *DeviceControllerApiController) DeviceControllerEnableChannelMonitoring(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	channelId := params["channelId"]
	all := params["all"]
	result, err := c.service.DeviceControllerEnableChannelMonitoring(deviceId, channelId, all)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerFind - 
func (c *DeviceControllerApiController) DeviceControllerFind(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	dataLoggerId := params["dataLoggerId"]
	result, err := c.service.DeviceControllerFind(dataLoggerId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerFindChannelTypes - 
func (c *DeviceControllerApiController) DeviceControllerFindChannelTypes(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	result, err := c.service.DeviceControllerFindChannelTypes(deviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerFindChannels - 
func (c *DeviceControllerApiController) DeviceControllerFindChannels(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	deviceId := params["deviceId"]
	result, err := c.service.DeviceControllerFindChannels(deviceId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerGetDevicesWithType - 
func (c *DeviceControllerApiController) DeviceControllerGetDevicesWithType(w http.ResponseWriter, r *http.Request) { 
	deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId := &[]DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId{}
	if err := json.NewDecoder(r.Body).Decode(&deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceControllerGetDevicesWithType(*deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// DeviceControllerUpdateById - 
func (c *DeviceControllerApiController) DeviceControllerUpdateById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId := &DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId{}
	if err := json.NewDecoder(r.Body).Decode(&deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.DeviceControllerUpdateById(id, *deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
