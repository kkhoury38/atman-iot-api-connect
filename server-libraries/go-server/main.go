/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"

	openapi "github.com/GIT_USER_ID/GIT_REPO_ID/go"
)

func main() {
	log.Printf("Server started")

	AssetControllerApiService := openapi.NewAssetControllerApiService()
	AssetControllerApiController := openapi.NewAssetControllerApiController(AssetControllerApiService)

	AssetGroupControllerApiService := openapi.NewAssetGroupControllerApiService()
	AssetGroupControllerApiController := openapi.NewAssetGroupControllerApiController(AssetGroupControllerApiService)

	DashboardElementControllerApiService := openapi.NewDashboardElementControllerApiService()
	DashboardElementControllerApiController := openapi.NewDashboardElementControllerApiController(DashboardElementControllerApiService)

	DataLoggerControllerApiService := openapi.NewDataLoggerControllerApiService()
	DataLoggerControllerApiController := openapi.NewDataLoggerControllerApiController(DataLoggerControllerApiService)

	DeviceChannelControllerApiService := openapi.NewDeviceChannelControllerApiService()
	DeviceChannelControllerApiController := openapi.NewDeviceChannelControllerApiController(DeviceChannelControllerApiService)

	DeviceControllerApiService := openapi.NewDeviceControllerApiService()
	DeviceControllerApiController := openapi.NewDeviceControllerApiController(DeviceControllerApiService)

	DeviceEventControllerApiService := openapi.NewDeviceEventControllerApiService()
	DeviceEventControllerApiController := openapi.NewDeviceEventControllerApiController(DeviceEventControllerApiService)

	DeviceGroupMembershipControllerApiService := openapi.NewDeviceGroupMembershipControllerApiService()
	DeviceGroupMembershipControllerApiController := openapi.NewDeviceGroupMembershipControllerApiController(DeviceGroupMembershipControllerApiService)

	DeviceTypeChannelTypeControllerApiService := openapi.NewDeviceTypeChannelTypeControllerApiService()
	DeviceTypeChannelTypeControllerApiController := openapi.NewDeviceTypeChannelTypeControllerApiController(DeviceTypeChannelTypeControllerApiService)

	DeviceTypeControllerApiService := openapi.NewDeviceTypeControllerApiService()
	DeviceTypeControllerApiController := openapi.NewDeviceTypeControllerApiController(DeviceTypeControllerApiService)

	EventControllerApiService := openapi.NewEventControllerApiService()
	EventControllerApiController := openapi.NewEventControllerApiController(EventControllerApiService)

	PingControllerApiService := openapi.NewPingControllerApiService()
	PingControllerApiController := openapi.NewPingControllerApiController(PingControllerApiService)

	SchedulerControllerApiService := openapi.NewSchedulerControllerApiService()
	SchedulerControllerApiController := openapi.NewSchedulerControllerApiController(SchedulerControllerApiService)

	UserControllerApiService := openapi.NewUserControllerApiService()
	UserControllerApiController := openapi.NewUserControllerApiController(UserControllerApiService)

	UserSubscriptionControllerApiService := openapi.NewUserSubscriptionControllerApiService()
	UserSubscriptionControllerApiController := openapi.NewUserSubscriptionControllerApiController(UserSubscriptionControllerApiService)

	VirtualAccessControllerApiService := openapi.NewVirtualAccessControllerApiService()
	VirtualAccessControllerApiController := openapi.NewVirtualAccessControllerApiController(VirtualAccessControllerApiService)

	router := openapi.NewRouter(AssetControllerApiController, AssetGroupControllerApiController, DashboardElementControllerApiController, DataLoggerControllerApiController, DeviceChannelControllerApiController, DeviceControllerApiController, DeviceEventControllerApiController, DeviceGroupMembershipControllerApiController, DeviceTypeChannelTypeControllerApiController, DeviceTypeControllerApiController, EventControllerApiController, PingControllerApiController, SchedulerControllerApiController, UserControllerApiController, UserSubscriptionControllerApiController, VirtualAccessControllerApiController)

	log.Fatal(http.ListenAndServe(":8080", router))
}
