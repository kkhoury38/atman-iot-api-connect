<?php

/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class EventControllerController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation eventControllerCreateNow
     *
     * .
     *
     *
     * @return Http response
     */
    public function eventControllerCreateNow()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $eventExcludingIdResolvedTimestampResolutionTimestamp = $input['eventExcludingIdResolvedTimestampResolutionTimestamp'];


        return response('How about implementing eventControllerCreateNow as a post method ?');
    }
    /**
     * Operation eventControllerProcessSubscriptions
     *
     * .
     *
     *
     * @return Http response
     */
    public function eventControllerProcessSubscriptions()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing eventControllerProcessSubscriptions as a get method ?');
    }
    /**
     * Operation eventControllerCreateRelatedDev
     *
     * .
     *
     *
     * @return Http response
     */
    public function eventControllerCreateRelatedDev()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $eventRelatedDeviceExcludingId = $input['eventRelatedDeviceExcludingId'];


        return response('How about implementing eventControllerCreateRelatedDev as a post method ?');
    }
    /**
     * Operation eventControllerUpdateById
     *
     * .
     *
     * @param float $id  (required)
     *
     * @return Http response
     */
    public function eventControllerUpdateById($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing eventControllerUpdateById as a patch method ?');
    }
    /**
     * Operation eventControllerCreateRule
     *
     * .
     *
     *
     * @return Http response
     */
    public function eventControllerCreateRule()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $requestEventCreateRule = $input['requestEventCreateRule'];


        return response('How about implementing eventControllerCreateRule as a post method ?');
    }
    /**
     * Operation eventControllerCreateRuleSubscription
     *
     * .
     *
     *
     * @return Http response
     */
    public function eventControllerCreateRuleSubscription()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $eventRuleSubscriptionExcludingIdLastExecTimestamp = $input['eventRuleSubscriptionExcludingIdLastExecTimestamp'];


        return response('How about implementing eventControllerCreateRuleSubscription as a post method ?');
    }
    /**
     * Operation eventControllerFind
     *
     * .
     *
     * @param float $assetId  (required)
     *
     * @return Http response
     */
    public function eventControllerFind($assetId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing eventControllerFind as a get method ?');
    }
    /**
     * Operation eventControllerFindUnresolved
     *
     * .
     *
     * @param float $assetId  (required)
     *
     * @return Http response
     */
    public function eventControllerFindUnresolved($assetId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing eventControllerFindUnresolved as a get method ?');
    }
}
