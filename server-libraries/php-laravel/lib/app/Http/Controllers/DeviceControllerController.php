<?php

/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class DeviceControllerController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation deviceControllerCreate
     *
     * .
     *
     * @param float $dataLoggerId  (required)
     *
     * @return Http response
     */
    public function deviceControllerCreate($dataLoggerId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerCreate as a post method ?');
    }
    /**
     * Operation deviceControllerCreateChannel
     *
     * .
     *
     * @param float $deviceId  (required)
     *
     * @return Http response
     */
    public function deviceControllerCreateChannel($deviceId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerCreateChannel as a post method ?');
    }
    /**
     * Operation deviceControllerDisableChannelMonitoring
     *
     * .
     *
     * @param float $deviceId  (required)
     * @param float $channelId  (required)
     * @param bool $all  (required)
     *
     * @return Http response
     */
    public function deviceControllerDisableChannelMonitoring($deviceId, $channelId, $all)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerDisableChannelMonitoring as a get method ?');
    }
    /**
     * Operation deviceControllerEnableChannelMonitoring
     *
     * .
     *
     * @param float $deviceId  (required)
     * @param float $channelId  (required)
     * @param bool $all  (required)
     *
     * @return Http response
     */
    public function deviceControllerEnableChannelMonitoring($deviceId, $channelId, $all)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerEnableChannelMonitoring as a get method ?');
    }
    /**
     * Operation deviceControllerFindChannelTypes
     *
     * .
     *
     * @param float $deviceId  (required)
     *
     * @return Http response
     */
    public function deviceControllerFindChannelTypes($deviceId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerFindChannelTypes as a get method ?');
    }
    /**
     * Operation deviceControllerFindChannels
     *
     * .
     *
     * @param float $deviceId  (required)
     *
     * @return Http response
     */
    public function deviceControllerFindChannels($deviceId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerFindChannels as a get method ?');
    }
    /**
     * Operation deviceControllerUpdateById
     *
     * .
     *
     * @param float $id  (required)
     *
     * @return Http response
     */
    public function deviceControllerUpdateById($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerUpdateById as a patch method ?');
    }
    /**
     * Operation deviceControllerGetDevicesWithType
     *
     * .
     *
     *
     * @return Http response
     */
    public function deviceControllerGetDevicesWithType()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId = $input['deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId'];


        return response('How about implementing deviceControllerGetDevicesWithType as a post method ?');
    }
    /**
     * Operation deviceControllerFind
     *
     * .
     *
     * @param float $dataLoggerId  (required)
     *
     * @return Http response
     */
    public function deviceControllerFind($dataLoggerId)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deviceControllerFind as a get method ?');
    }
}
