<?php

/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class DataLoggerControllerController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation dataLoggerControllerCreate
     *
     * .
     *
     *
     * @return Http response
     */
    public function dataLoggerControllerCreate()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $dataLoggerExcludingIdAuthTokenConfigUserId = $input['dataLoggerExcludingIdAuthTokenConfigUserId'];


        return response('How about implementing dataLoggerControllerCreate as a post method ?');
    }
    /**
     * Operation dataLoggerControllerUploadDataFromCsv
     *
     * .
     *
     * @param float $id  (required)
     * @param string $dataLoggerToken  (required)
     *
     * @return Http response
     */
    public function dataLoggerControllerUploadDataFromCsv($id, $dataLoggerToken)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerUploadDataFromCsv as a post method ?');
    }
    /**
     * Operation dataLoggerControllerUploadDataFromXml
     *
     * .
     *
     * @param float $id  (required)
     * @param string $dataLoggerToken  (required)
     *
     * @return Http response
     */
    public function dataLoggerControllerUploadDataFromXml($id, $dataLoggerToken)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerUploadDataFromXml as a post method ?');
    }
    /**
     * Operation dataLoggerControllerSetupFromFtp1
     *
     * .
     *
     * @param float $id  (required)
     * @param string $dataLoggerToken  (required)
     *
     * @return Http response
     */
    public function dataLoggerControllerSetupFromFtp1($id, $dataLoggerToken)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerSetupFromFtp1 as a post method ?');
    }
    /**
     * Operation dataLoggerControllerSetupFromFtpCsv2
     *
     * .
     *
     * @param float $id  (required)
     *
     * @return Http response
     */
    public function dataLoggerControllerSetupFromFtpCsv2($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerSetupFromFtpCsv2 as a post method ?');
    }
    /**
     * Operation dataLoggerControllerSetupFromFtpXml2
     *
     * .
     *
     * @param float $id  (required)
     *
     * @return Http response
     */
    public function dataLoggerControllerSetupFromFtpXml2($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerSetupFromFtpXml2 as a post method ?');
    }
    /**
     * Operation dataLoggerControllerSetupFromFtp3
     *
     * .
     *
     * @param float $id  (required)
     *
     * @return Http response
     */
    public function dataLoggerControllerSetupFromFtp3($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerSetupFromFtp3 as a post method ?');
    }
    /**
     * Operation dataLoggerControllerDeleteById
     *
     * .
     *
     * @param float $id  (required)
     *
     * @return Http response
     */
    public function dataLoggerControllerDeleteById($id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerDeleteById as a delete method ?');
    }
    /**
     * Operation dataLoggerControllerFind
     *
     * .
     *
     *
     * @return Http response
     */
    public function dataLoggerControllerFind()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing dataLoggerControllerFind as a get method ?');
    }
}
