import connexion
import six

from openapi_server.models.data_logger import DataLogger  # noqa: E501
from openapi_server.models.data_logger_excluding_id_auth_token_config_user_id import DataLoggerExcludingIdAuthTokenConfigUserId  # noqa: E501
from openapi_server.models.request_data_logger_setup_csv2_excluding_file_format import RequestDataLoggerSetupCsv2ExcludingFileFormat  # noqa: E501
from openapi_server.models.request_data_logger_setup_xml2_excluding_file_format import RequestDataLoggerSetupXml2ExcludingFileFormat  # noqa: E501
from openapi_server.models.response_data_logger_setup_step2 import ResponseDataLoggerSetupStep2  # noqa: E501
from openapi_server import util


def data_logger_controller_create(data_logger_excluding_id_auth_token_config_user_id=None):  # noqa: E501
    """data_logger_controller_create

    Used for creating a new &lt;b&gt;DataLogger&lt;/b&gt; by and authorized &lt;b&gt;User&lt;/b&gt;, identified by the provided &lt;i&gt;token&lt;/i&gt;. &lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param data_logger_excluding_id_auth_token_config_user_id: 
    :type data_logger_excluding_id_auth_token_config_user_id: dict | bytes

    :rtype: DataLogger
    """
    if connexion.request.is_json:
        data_logger_excluding_id_auth_token_config_user_id = DataLoggerExcludingIdAuthTokenConfigUserId.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def data_logger_controller_delete_by_id(id):  # noqa: E501
    """data_logger_controller_delete_by_id

    Deletes a&lt;b&gt; DataLogger&lt;/b&gt; identified by &lt;i&gt;id&lt;/i&gt;, owned by a &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token.&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param id: 
    :type id: 

    :rtype: None
    """
    return 'do some magic!'


def data_logger_controller_find():  # noqa: E501
    """data_logger_controller_find

    Returns an array of &lt;b&gt;DataLoggers&lt;/b&gt; owned by a &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token.&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501


    :rtype: List[DataLogger]
    """
    return 'do some magic!'


def data_logger_controller_setup_from_ftp1(id, data_logger_token):  # noqa: E501
    """data_logger_controller_setup_from_ftp1

    Step 1 of setup process of &lt;b&gt;DataLoggers&lt;/b&gt; sending data via FTP. It is used for sending a sample uncompressed &lt;i&gt;file&lt;/i&gt; containing raw data, as it was generated by the &lt;b&gt;DataLogger&lt;/b&gt; (hardware) identified by &lt;i&gt;dataLoggerToken&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param id: 
    :type id: 
    :param data_logger_token: 
    :type data_logger_token: str

    :rtype: None
    """
    return 'do some magic!'


def data_logger_controller_setup_from_ftp3(id, response_data_logger_setup_step2=None):  # noqa: E501
    """data_logger_controller_setup_from_ftp3

    Step 3 of setup process of &lt;b&gt;DataLoggers&lt;/b&gt; sending data via FTP. It is used for initiating &lt;b&gt;DeviceTypes&lt;/b&gt;, &lt;b&gt;ChannelTypes&lt;/b&gt; and &lt;b&gt;Devices&lt;/b&gt;. Accepts as input the output of Step 2. Make sure that the &lt;i&gt;manufacturer&lt;/i&gt; property is added.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-devicecontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-devicetypecontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceTypeController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-devicetypechanneltypecontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceTypeChannelTypeController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param id: 
    :type id: 
    :param response_data_logger_setup_step2: 
    :type response_data_logger_setup_step2: dict | bytes

    :rtype: None
    """
    if connexion.request.is_json:
        response_data_logger_setup_step2 = ResponseDataLoggerSetupStep2.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def data_logger_controller_setup_from_ftp_csv2(id, request_data_logger_setup_csv2_excluding_file_format=None):  # noqa: E501
    """data_logger_controller_setup_from_ftp_csv2

    Step 2 of setup process of &lt;b&gt;DataLoggers&lt;/b&gt; sending CSV data via FTP. It is used for mapping properties of the sent &lt;i&gt;file&lt;/i&gt; to properties of models in the system. &lt;b&gt;DataLogger&lt;/b&gt; to be setup, is identified by &lt;i&gt;id&lt;/i&gt; and &lt;b&gt;User&lt;/b&gt; performing operation is identified by &lt;i&gt;token&lt;/i&gt;. Endpoint response represents the results of the mapping (required in Step 3). If it is satisfactory, it is saved by setting the property &lt;i&gt;confirm&lt;/i&gt; to &lt;i&gt;true&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param id: 
    :type id: 
    :param request_data_logger_setup_csv2_excluding_file_format: 
    :type request_data_logger_setup_csv2_excluding_file_format: dict | bytes

    :rtype: ResponseDataLoggerSetupStep2
    """
    if connexion.request.is_json:
        request_data_logger_setup_csv2_excluding_file_format = RequestDataLoggerSetupCsv2ExcludingFileFormat.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def data_logger_controller_setup_from_ftp_xml2(id, request_data_logger_setup_xml2_excluding_file_format=None):  # noqa: E501
    """data_logger_controller_setup_from_ftp_xml2

    Step 2 of setup process of &lt;b&gt;DataLoggers&lt;/b&gt; sending XML data via FTP. It is used for mapping properties of the sent &lt;i&gt;file&lt;/i&gt; to properties of models in the system. &lt;b&gt;DataLogger&lt;/b&gt; to be setup, is identified by &lt;i&gt;id&lt;/i&gt; and &lt;b&gt;User&lt;/b&gt; performing operation is identified by &lt;i&gt;token&lt;/i&gt;. Endpoint response represents the results of the mapping (required in Step 3). If it is satisfactory, it is saved by setting the property &lt;i&gt;confirm&lt;/i&gt; to &lt;i&gt;true&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param id: 
    :type id: 
    :param request_data_logger_setup_xml2_excluding_file_format: 
    :type request_data_logger_setup_xml2_excluding_file_format: dict | bytes

    :rtype: ResponseDataLoggerSetupStep2
    """
    if connexion.request.is_json:
        request_data_logger_setup_xml2_excluding_file_format = RequestDataLoggerSetupXml2ExcludingFileFormat.from_dict(connexion.request.get_json())  # noqa: E501
    return 'do some magic!'


def data_logger_controller_upload_data_from_csv(id, data_logger_token):  # noqa: E501
    """data_logger_controller_upload_data_from_csv

    Used for receiving data, sent in CSV format by a &lt;b&gt;DataLogger&lt;/b&gt; identified by &lt;i&gt;id&lt;/i&gt; and &lt;i&gt;dataLoggerToken&lt;/i&gt;. If the &lt;b&gt;DataLogger&lt;/b&gt; is sending data via FTP, endpoint is called internally.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param id: 
    :type id: 
    :param data_logger_token: 
    :type data_logger_token: str

    :rtype: None
    """
    return 'do some magic!'


def data_logger_controller_upload_data_from_xml(id, data_logger_token):  # noqa: E501
    """data_logger_controller_upload_data_from_xml

    Used for receiving data, sent in XML format by a &lt;b&gt;DataLogger&lt;/b&gt; identified by &lt;i&gt;id&lt;/i&gt; and &lt;i&gt;dataLoggerToken&lt;/i&gt;. If the &lt;b&gt;DataLogger&lt;/b&gt; is sending data via FTP, endpoint is called internally.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsdatalogger\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerModel&lt;/a&gt;&lt;/i&gt; # noqa: E501

    :param id: 
    :type id: 
    :param data_logger_token: 
    :type data_logger_token: str

    :rtype: None
    """
    return 'do some magic!'
