# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, asset_group_id=None):  # noqa: E501
        """Asset - a model defined in OpenAPI

        :param id: The id of this Asset.  # noqa: E501
        :type id: float
        :param name: The name of this Asset.  # noqa: E501
        :type name: str
        :param description: The description of this Asset.  # noqa: E501
        :type description: str
        :param asset_group_id: The asset_group_id of this Asset.  # noqa: E501
        :type asset_group_id: float
        """
        self.openapi_types = {
            'id': float,
            'name': str,
            'description': str,
            'asset_group_id': float
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'asset_group_id': 'assetGroupId'
        }

        self._id = id
        self._name = name
        self._description = description
        self._asset_group_id = asset_group_id

    @classmethod
    def from_dict(cls, dikt) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Asset of this Asset.  # noqa: E501
        :rtype: Asset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Asset.

        Automatically generated ID  # noqa: E501

        :return: The id of this Asset.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.

        Automatically generated ID  # noqa: E501

        :param id: The id of this Asset.
        :type id: float
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Asset.

        Asset name  # noqa: E501

        :return: The name of this Asset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Asset.

        Asset name  # noqa: E501

        :param name: The name of this Asset.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Asset.

        Asset description  # noqa: E501

        :return: The description of this Asset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Asset.

        Asset description  # noqa: E501

        :param description: The description of this Asset.
        :type description: str
        """

        self._description = description

    @property
    def asset_group_id(self):
        """Gets the asset_group_id of this Asset.

        ID of AssetGroup that Asset belongs to  # noqa: E501

        :return: The asset_group_id of this Asset.
        :rtype: float
        """
        return self._asset_group_id

    @asset_group_id.setter
    def asset_group_id(self, asset_group_id):
        """Sets the asset_group_id of this Asset.

        ID of AssetGroup that Asset belongs to  # noqa: E501

        :param asset_group_id: The asset_group_id of this Asset.
        :type asset_group_id: float
        """
        if asset_group_id is None:
            raise ValueError("Invalid value for `asset_group_id`, must not be `None`")  # noqa: E501

        self._asset_group_id = asset_group_id
