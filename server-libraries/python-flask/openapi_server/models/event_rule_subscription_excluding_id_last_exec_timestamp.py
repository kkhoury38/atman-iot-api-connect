# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EventRuleSubscriptionExcludingIdLastExecTimestamp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_period=None, asset_id=None, event_rule_id=None, rule_activated=None):  # noqa: E501
        """EventRuleSubscriptionExcludingIdLastExecTimestamp - a model defined in OpenAPI

        :param execution_period: The execution_period of this EventRuleSubscriptionExcludingIdLastExecTimestamp.  # noqa: E501
        :type execution_period: float
        :param asset_id: The asset_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.  # noqa: E501
        :type asset_id: float
        :param event_rule_id: The event_rule_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.  # noqa: E501
        :type event_rule_id: float
        :param rule_activated: The rule_activated of this EventRuleSubscriptionExcludingIdLastExecTimestamp.  # noqa: E501
        :type rule_activated: bool
        """
        self.openapi_types = {
            'execution_period': float,
            'asset_id': float,
            'event_rule_id': float,
            'rule_activated': bool
        }

        self.attribute_map = {
            'execution_period': 'executionPeriod',
            'asset_id': 'assetId',
            'event_rule_id': 'eventRuleId',
            'rule_activated': 'ruleActivated'
        }

        self._execution_period = execution_period
        self._asset_id = asset_id
        self._event_rule_id = event_rule_id
        self._rule_activated = rule_activated

    @classmethod
    def from_dict(cls, dikt) -> 'EventRuleSubscriptionExcludingIdLastExecTimestamp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventRuleSubscriptionExcluding_id-lastExecTimestamp_ of this EventRuleSubscriptionExcludingIdLastExecTimestamp.  # noqa: E501
        :rtype: EventRuleSubscriptionExcludingIdLastExecTimestamp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_period(self):
        """Gets the execution_period of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        EventRule execution period - seconds  # noqa: E501

        :return: The execution_period of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :rtype: float
        """
        return self._execution_period

    @execution_period.setter
    def execution_period(self, execution_period):
        """Sets the execution_period of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        EventRule execution period - seconds  # noqa: E501

        :param execution_period: The execution_period of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :type execution_period: float
        """
        if execution_period is None:
            raise ValueError("Invalid value for `execution_period`, must not be `None`")  # noqa: E501

        self._execution_period = execution_period

    @property
    def asset_id(self):
        """Gets the asset_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        ID of Asset subscribed to EventRule  # noqa: E501

        :return: The asset_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :rtype: float
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        ID of Asset subscribed to EventRule  # noqa: E501

        :param asset_id: The asset_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :type asset_id: float
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def event_rule_id(self):
        """Gets the event_rule_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        ID of associated EventRule  # noqa: E501

        :return: The event_rule_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :rtype: float
        """
        return self._event_rule_id

    @event_rule_id.setter
    def event_rule_id(self, event_rule_id):
        """Sets the event_rule_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        ID of associated EventRule  # noqa: E501

        :param event_rule_id: The event_rule_id of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :type event_rule_id: float
        """
        if event_rule_id is None:
            raise ValueError("Invalid value for `event_rule_id`, must not be `None`")  # noqa: E501

        self._event_rule_id = event_rule_id

    @property
    def rule_activated(self):
        """Gets the rule_activated of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        Is set to true when EventRule has been activated  # noqa: E501

        :return: The rule_activated of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :rtype: bool
        """
        return self._rule_activated

    @rule_activated.setter
    def rule_activated(self, rule_activated):
        """Sets the rule_activated of this EventRuleSubscriptionExcludingIdLastExecTimestamp.

        Is set to true when EventRule has been activated  # noqa: E501

        :param rule_activated: The rule_activated of this EventRuleSubscriptionExcludingIdLastExecTimestamp.
        :type rule_activated: bool
        """
        if rule_activated is None:
            raise ValueError("Invalid value for `rule_activated`, must not be `None`")  # noqa: E501

        self._rule_activated = rule_activated
