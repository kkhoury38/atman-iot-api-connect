# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RequestDataLoggerSetupCsv2LocationSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, row=None, column=None, set_manually=None, manual_value=None):  # noqa: E501
        """RequestDataLoggerSetupCsv2LocationSpec - a model defined in OpenAPI

        :param row: The row of this RequestDataLoggerSetupCsv2LocationSpec.  # noqa: E501
        :type row: float
        :param column: The column of this RequestDataLoggerSetupCsv2LocationSpec.  # noqa: E501
        :type column: float
        :param set_manually: The set_manually of this RequestDataLoggerSetupCsv2LocationSpec.  # noqa: E501
        :type set_manually: bool
        :param manual_value: The manual_value of this RequestDataLoggerSetupCsv2LocationSpec.  # noqa: E501
        :type manual_value: str
        """
        self.openapi_types = {
            'row': float,
            'column': float,
            'set_manually': bool,
            'manual_value': str
        }

        self.attribute_map = {
            'row': 'row',
            'column': 'column',
            'set_manually': 'setManually',
            'manual_value': 'manualValue'
        }

        self._row = row
        self._column = column
        self._set_manually = set_manually
        self._manual_value = manual_value

    @classmethod
    def from_dict(cls, dikt) -> 'RequestDataLoggerSetupCsv2LocationSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestDataLoggerSetupCsv2LocationSpec of this RequestDataLoggerSetupCsv2LocationSpec.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2LocationSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def row(self):
        """Gets the row of this RequestDataLoggerSetupCsv2LocationSpec.

        Row containing parent info  # noqa: E501

        :return: The row of this RequestDataLoggerSetupCsv2LocationSpec.
        :rtype: float
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this RequestDataLoggerSetupCsv2LocationSpec.

        Row containing parent info  # noqa: E501

        :param row: The row of this RequestDataLoggerSetupCsv2LocationSpec.
        :type row: float
        """
        if row is None:
            raise ValueError("Invalid value for `row`, must not be `None`")  # noqa: E501

        self._row = row

    @property
    def column(self):
        """Gets the column of this RequestDataLoggerSetupCsv2LocationSpec.

        Row containing parent info  # noqa: E501

        :return: The column of this RequestDataLoggerSetupCsv2LocationSpec.
        :rtype: float
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this RequestDataLoggerSetupCsv2LocationSpec.

        Row containing parent info  # noqa: E501

        :param column: The column of this RequestDataLoggerSetupCsv2LocationSpec.
        :type column: float
        """
        if column is None:
            raise ValueError("Invalid value for `column`, must not be `None`")  # noqa: E501

        self._column = column

    @property
    def set_manually(self):
        """Gets the set_manually of this RequestDataLoggerSetupCsv2LocationSpec.

        Flag to enable setting parent manually  # noqa: E501

        :return: The set_manually of this RequestDataLoggerSetupCsv2LocationSpec.
        :rtype: bool
        """
        return self._set_manually

    @set_manually.setter
    def set_manually(self, set_manually):
        """Sets the set_manually of this RequestDataLoggerSetupCsv2LocationSpec.

        Flag to enable setting parent manually  # noqa: E501

        :param set_manually: The set_manually of this RequestDataLoggerSetupCsv2LocationSpec.
        :type set_manually: bool
        """
        if set_manually is None:
            raise ValueError("Invalid value for `set_manually`, must not be `None`")  # noqa: E501

        self._set_manually = set_manually

    @property
    def manual_value(self):
        """Gets the manual_value of this RequestDataLoggerSetupCsv2LocationSpec.

        Manual value for parent  # noqa: E501

        :return: The manual_value of this RequestDataLoggerSetupCsv2LocationSpec.
        :rtype: str
        """
        return self._manual_value

    @manual_value.setter
    def manual_value(self, manual_value):
        """Sets the manual_value of this RequestDataLoggerSetupCsv2LocationSpec.

        Manual value for parent  # noqa: E501

        :param manual_value: The manual_value of this RequestDataLoggerSetupCsv2LocationSpec.
        :type manual_value: str
        """
        if manual_value is None:
            raise ValueError("Invalid value for `manual_value`, must not be `None`")  # noqa: E501

        self._manual_value = manual_value
