# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EventExcludingIdResolvedTimestampResolutionTimestamp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id=None, event_rule_id=None, severity=None, description=None):  # noqa: E501
        """EventExcludingIdResolvedTimestampResolutionTimestamp - a model defined in OpenAPI

        :param asset_id: The asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type asset_id: float
        :param event_rule_id: The event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type event_rule_id: float
        :param severity: The severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type severity: str
        :param description: The description of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'asset_id': float,
            'event_rule_id': float,
            'severity': str,
            'description': str
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'event_rule_id': 'eventRuleId',
            'severity': 'severity',
            'description': 'description'
        }

        self._asset_id = asset_id
        self._event_rule_id = event_rule_id
        self._severity = severity
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'EventExcludingIdResolvedTimestampResolutionTimestamp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventExcluding_id-resolved-timestamp-resolutionTimestamp_ of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :rtype: EventExcludingIdResolvedTimestampResolutionTimestamp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        ID of Asset associated with Event  # noqa: E501

        :return: The asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :rtype: float
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        ID of Asset associated with Event  # noqa: E501

        :param asset_id: The asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :type asset_id: float
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def event_rule_id(self):
        """Gets the event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        ID of EventRule triggered  # noqa: E501

        :return: The event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :rtype: float
        """
        return self._event_rule_id

    @event_rule_id.setter
    def event_rule_id(self, event_rule_id):
        """Sets the event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        ID of EventRule triggered  # noqa: E501

        :param event_rule_id: The event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :type event_rule_id: float
        """
        if event_rule_id is None:
            raise ValueError("Invalid value for `event_rule_id`, must not be `None`")  # noqa: E501

        self._event_rule_id = event_rule_id

    @property
    def severity(self):
        """Gets the severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        Event severity - Can be  LOW / MEDIUM / HIGH  # noqa: E501

        :return: The severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        Event severity - Can be  LOW / MEDIUM / HIGH  # noqa: E501

        :param severity: The severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :type severity: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        Event description  # noqa: E501

        :return: The description of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        Event description  # noqa: E501

        :param description: The description of this EventExcludingIdResolvedTimestampResolutionTimestamp.
        :type description: str
        """

        self._description = description
