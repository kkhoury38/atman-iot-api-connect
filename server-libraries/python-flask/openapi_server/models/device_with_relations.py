# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.data_logger_with_relations import DataLoggerWithRelations
from openapi_server.models.device_type_with_relations import DeviceTypeWithRelations
from openapi_server import util

from openapi_server.models.data_logger_with_relations import DataLoggerWithRelations  # noqa: E501
from openapi_server.models.device_type_with_relations import DeviceTypeWithRelations  # noqa: E501

class DeviceWithRelations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, description=None, serial_no=None, data_logger_id=None, device_type_id=None, data_logger=None, device_type=None):  # noqa: E501
        """DeviceWithRelations - a model defined in OpenAPI

        :param id: The id of this DeviceWithRelations.  # noqa: E501
        :type id: float
        :param description: The description of this DeviceWithRelations.  # noqa: E501
        :type description: str
        :param serial_no: The serial_no of this DeviceWithRelations.  # noqa: E501
        :type serial_no: str
        :param data_logger_id: The data_logger_id of this DeviceWithRelations.  # noqa: E501
        :type data_logger_id: float
        :param device_type_id: The device_type_id of this DeviceWithRelations.  # noqa: E501
        :type device_type_id: float
        :param data_logger: The data_logger of this DeviceWithRelations.  # noqa: E501
        :type data_logger: DataLoggerWithRelations
        :param device_type: The device_type of this DeviceWithRelations.  # noqa: E501
        :type device_type: DeviceTypeWithRelations
        """
        self.openapi_types = {
            'id': float,
            'description': str,
            'serial_no': str,
            'data_logger_id': float,
            'device_type_id': float,
            'data_logger': DataLoggerWithRelations,
            'device_type': DeviceTypeWithRelations
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'serial_no': 'serialNo',
            'data_logger_id': 'dataLoggerId',
            'device_type_id': 'deviceTypeId',
            'data_logger': 'dataLogger',
            'device_type': 'deviceType'
        }

        self._id = id
        self._description = description
        self._serial_no = serial_no
        self._data_logger_id = data_logger_id
        self._device_type_id = device_type_id
        self._data_logger = data_logger
        self._device_type = device_type

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceWithRelations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceWithRelations of this DeviceWithRelations.  # noqa: E501
        :rtype: DeviceWithRelations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeviceWithRelations.

        Automatically generated ID  # noqa: E501

        :return: The id of this DeviceWithRelations.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceWithRelations.

        Automatically generated ID  # noqa: E501

        :param id: The id of this DeviceWithRelations.
        :type id: float
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this DeviceWithRelations.

        Device description  # noqa: E501

        :return: The description of this DeviceWithRelations.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceWithRelations.

        Device description  # noqa: E501

        :param description: The description of this DeviceWithRelations.
        :type description: str
        """

        self._description = description

    @property
    def serial_no(self):
        """Gets the serial_no of this DeviceWithRelations.

        Device serial number  # noqa: E501

        :return: The serial_no of this DeviceWithRelations.
        :rtype: str
        """
        return self._serial_no

    @serial_no.setter
    def serial_no(self, serial_no):
        """Sets the serial_no of this DeviceWithRelations.

        Device serial number  # noqa: E501

        :param serial_no: The serial_no of this DeviceWithRelations.
        :type serial_no: str
        """
        if serial_no is None:
            raise ValueError("Invalid value for `serial_no`, must not be `None`")  # noqa: E501

        self._serial_no = serial_no

    @property
    def data_logger_id(self):
        """Gets the data_logger_id of this DeviceWithRelations.

        ID of DataLogger that Device belongs to  # noqa: E501

        :return: The data_logger_id of this DeviceWithRelations.
        :rtype: float
        """
        return self._data_logger_id

    @data_logger_id.setter
    def data_logger_id(self, data_logger_id):
        """Sets the data_logger_id of this DeviceWithRelations.

        ID of DataLogger that Device belongs to  # noqa: E501

        :param data_logger_id: The data_logger_id of this DeviceWithRelations.
        :type data_logger_id: float
        """
        if data_logger_id is None:
            raise ValueError("Invalid value for `data_logger_id`, must not be `None`")  # noqa: E501

        self._data_logger_id = data_logger_id

    @property
    def device_type_id(self):
        """Gets the device_type_id of this DeviceWithRelations.


        :return: The device_type_id of this DeviceWithRelations.
        :rtype: float
        """
        return self._device_type_id

    @device_type_id.setter
    def device_type_id(self, device_type_id):
        """Sets the device_type_id of this DeviceWithRelations.


        :param device_type_id: The device_type_id of this DeviceWithRelations.
        :type device_type_id: float
        """

        self._device_type_id = device_type_id

    @property
    def data_logger(self):
        """Gets the data_logger of this DeviceWithRelations.


        :return: The data_logger of this DeviceWithRelations.
        :rtype: DataLoggerWithRelations
        """
        return self._data_logger

    @data_logger.setter
    def data_logger(self, data_logger):
        """Sets the data_logger of this DeviceWithRelations.


        :param data_logger: The data_logger of this DeviceWithRelations.
        :type data_logger: DataLoggerWithRelations
        """

        self._data_logger = data_logger

    @property
    def device_type(self):
        """Gets the device_type of this DeviceWithRelations.


        :return: The device_type of this DeviceWithRelations.
        :rtype: DeviceTypeWithRelations
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceWithRelations.


        :param device_type: The device_type of this DeviceWithRelations.
        :type device_type: DeviceTypeWithRelations
        """

        self._device_type = device_type
