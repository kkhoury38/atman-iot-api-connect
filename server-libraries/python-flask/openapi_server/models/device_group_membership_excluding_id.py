# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DeviceGroupMembershipExcludingId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id=None, device_id=None):  # noqa: E501
        """DeviceGroupMembershipExcludingId - a model defined in OpenAPI

        :param asset_id: The asset_id of this DeviceGroupMembershipExcludingId.  # noqa: E501
        :type asset_id: float
        :param device_id: The device_id of this DeviceGroupMembershipExcludingId.  # noqa: E501
        :type device_id: float
        """
        self.openapi_types = {
            'asset_id': float,
            'device_id': float
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'device_id': 'deviceId'
        }

        self._asset_id = asset_id
        self._device_id = device_id

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceGroupMembershipExcludingId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceGroupMembershipExcluding_id_ of this DeviceGroupMembershipExcludingId.  # noqa: E501
        :rtype: DeviceGroupMembershipExcludingId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this DeviceGroupMembershipExcludingId.

        ID of Device associated with Asset  # noqa: E501

        :return: The asset_id of this DeviceGroupMembershipExcludingId.
        :rtype: float
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DeviceGroupMembershipExcludingId.

        ID of Device associated with Asset  # noqa: E501

        :param asset_id: The asset_id of this DeviceGroupMembershipExcludingId.
        :type asset_id: float
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def device_id(self):
        """Gets the device_id of this DeviceGroupMembershipExcludingId.

        ID of Device associated with Asset  # noqa: E501

        :return: The device_id of this DeviceGroupMembershipExcludingId.
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceGroupMembershipExcludingId.

        ID of Device associated with Asset  # noqa: E501

        :param device_id: The device_id of this DeviceGroupMembershipExcludingId.
        :type device_id: float
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id
