# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.timestamp import Timestamp
from openapi_server import util

java.sql.Timestamp  # noqa: E501

class MeasurementSample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, period=None, timestamp=None, scope=None):  # noqa: E501
        """MeasurementSample - a model defined in OpenAPI

        :param value: The value of this MeasurementSample.  # noqa: E501
        :type value: object
        :param period: The period of this MeasurementSample.  # noqa: E501
        :type period: float
        :param timestamp: The timestamp of this MeasurementSample.  # noqa: E501
        :type timestamp: Timestamp
        :param scope: The scope of this MeasurementSample.  # noqa: E501
        :type scope: str
        """
        self.openapi_types = {
            'value': object,
            'period': float,
            'timestamp': Timestamp,
            'scope': str
        }

        self.attribute_map = {
            'value': 'value',
            'period': 'period',
            'timestamp': 'timestamp',
            'scope': 'scope'
        }

        self._value = value
        self._period = period
        self._timestamp = timestamp
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt) -> 'MeasurementSample':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MeasurementSample of this MeasurementSample.  # noqa: E501
        :rtype: MeasurementSample
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this MeasurementSample.

        measurement: string / number  # noqa: E501

        :return: The value of this MeasurementSample.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MeasurementSample.

        measurement: string / number  # noqa: E501

        :param value: The value of this MeasurementSample.
        :type value: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def period(self):
        """Gets the period of this MeasurementSample.


        :return: The period of this MeasurementSample.
        :rtype: float
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this MeasurementSample.


        :param period: The period of this MeasurementSample.
        :type period: float
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def timestamp(self):
        """Gets the timestamp of this MeasurementSample.


        :return: The timestamp of this MeasurementSample.
        :rtype: Timestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MeasurementSample.


        :param timestamp: The timestamp of this MeasurementSample.
        :type timestamp: Timestamp
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def scope(self):
        """Gets the scope of this MeasurementSample.

        Scope  # noqa: E501

        :return: The scope of this MeasurementSample.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this MeasurementSample.

        Scope  # noqa: E501

        :param scope: The scope of this MeasurementSample.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope
