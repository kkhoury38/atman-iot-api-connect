# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DeviceType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, model=None, description=None, manufacturer=None, category=None):  # noqa: E501
        """DeviceType - a model defined in OpenAPI

        :param id: The id of this DeviceType.  # noqa: E501
        :type id: float
        :param model: The model of this DeviceType.  # noqa: E501
        :type model: str
        :param description: The description of this DeviceType.  # noqa: E501
        :type description: str
        :param manufacturer: The manufacturer of this DeviceType.  # noqa: E501
        :type manufacturer: str
        :param category: The category of this DeviceType.  # noqa: E501
        :type category: str
        """
        self.openapi_types = {
            'id': float,
            'model': str,
            'description': str,
            'manufacturer': str,
            'category': str
        }

        self.attribute_map = {
            'id': 'id',
            'model': 'model',
            'description': 'description',
            'manufacturer': 'manufacturer',
            'category': 'category'
        }

        self._id = id
        self._model = model
        self._description = description
        self._manufacturer = manufacturer
        self._category = category

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceType of this DeviceType.  # noqa: E501
        :rtype: DeviceType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeviceType.

        Automatically generated ID  # noqa: E501

        :return: The id of this DeviceType.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceType.

        Automatically generated ID  # noqa: E501

        :param id: The id of this DeviceType.
        :type id: float
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this DeviceType.

        DeviceType model  # noqa: E501

        :return: The model of this DeviceType.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceType.

        DeviceType model  # noqa: E501

        :param model: The model of this DeviceType.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def description(self):
        """Gets the description of this DeviceType.

        DeviceType description  # noqa: E501

        :return: The description of this DeviceType.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceType.

        DeviceType description  # noqa: E501

        :param description: The description of this DeviceType.
        :type description: str
        """

        self._description = description

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DeviceType.

        DeviceType manufacturer  # noqa: E501

        :return: The manufacturer of this DeviceType.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DeviceType.

        DeviceType manufacturer  # noqa: E501

        :param manufacturer: The manufacturer of this DeviceType.
        :type manufacturer: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")  # noqa: E501

        self._manufacturer = manufacturer

    @property
    def category(self):
        """Gets the category of this DeviceType.

        DeviceType category  # noqa: E501

        :return: The category of this DeviceType.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DeviceType.

        DeviceType category  # noqa: E501

        :param category: The category of this DeviceType.
        :type category: str
        """

        self._category = category
