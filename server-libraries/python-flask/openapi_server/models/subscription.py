# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, product=None, type=None, description=None, duration=None, monthly_price=None, yearly_price=None, active=None):  # noqa: E501
        """Subscription - a model defined in OpenAPI

        :param id: The id of this Subscription.  # noqa: E501
        :type id: float
        :param product: The product of this Subscription.  # noqa: E501
        :type product: str
        :param type: The type of this Subscription.  # noqa: E501
        :type type: str
        :param description: The description of this Subscription.  # noqa: E501
        :type description: str
        :param duration: The duration of this Subscription.  # noqa: E501
        :type duration: float
        :param monthly_price: The monthly_price of this Subscription.  # noqa: E501
        :type monthly_price: float
        :param yearly_price: The yearly_price of this Subscription.  # noqa: E501
        :type yearly_price: float
        :param active: The active of this Subscription.  # noqa: E501
        :type active: bool
        """
        self.openapi_types = {
            'id': float,
            'product': str,
            'type': str,
            'description': str,
            'duration': float,
            'monthly_price': float,
            'yearly_price': float,
            'active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'product': 'product',
            'type': 'type',
            'description': 'description',
            'duration': 'duration',
            'monthly_price': 'monthlyPrice',
            'yearly_price': 'yearlyPrice',
            'active': 'active'
        }

        self._id = id
        self._product = product
        self._type = type
        self._description = description
        self._duration = duration
        self._monthly_price = monthly_price
        self._yearly_price = yearly_price
        self._active = active

    @classmethod
    def from_dict(cls, dikt) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Subscription.


        :return: The id of this Subscription.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.


        :param id: The id of this Subscription.
        :type id: float
        """

        self._id = id

    @property
    def product(self):
        """Gets the product of this Subscription.


        :return: The product of this Subscription.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Subscription.


        :param product: The product of this Subscription.
        :type product: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def type(self):
        """Gets the type of this Subscription.


        :return: The type of this Subscription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Subscription.


        :param type: The type of this Subscription.
        :type type: str
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this Subscription.


        :return: The description of this Subscription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subscription.


        :param description: The description of this Subscription.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this Subscription.


        :return: The duration of this Subscription.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Subscription.


        :param duration: The duration of this Subscription.
        :type duration: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def monthly_price(self):
        """Gets the monthly_price of this Subscription.


        :return: The monthly_price of this Subscription.
        :rtype: float
        """
        return self._monthly_price

    @monthly_price.setter
    def monthly_price(self, monthly_price):
        """Sets the monthly_price of this Subscription.


        :param monthly_price: The monthly_price of this Subscription.
        :type monthly_price: float
        """
        if monthly_price is None:
            raise ValueError("Invalid value for `monthly_price`, must not be `None`")  # noqa: E501

        self._monthly_price = monthly_price

    @property
    def yearly_price(self):
        """Gets the yearly_price of this Subscription.


        :return: The yearly_price of this Subscription.
        :rtype: float
        """
        return self._yearly_price

    @yearly_price.setter
    def yearly_price(self, yearly_price):
        """Sets the yearly_price of this Subscription.


        :param yearly_price: The yearly_price of this Subscription.
        :type yearly_price: float
        """
        if yearly_price is None:
            raise ValueError("Invalid value for `yearly_price`, must not be `None`")  # noqa: E501

        self._yearly_price = yearly_price

    @property
    def active(self):
        """Gets the active of this Subscription.


        :return: The active of this Subscription.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Subscription.


        :param active: The active of this Subscription.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active
