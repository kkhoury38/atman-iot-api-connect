# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.device import Device
from openapi_server.models.device_type_extended import DeviceTypeExtended
from openapi_server.models.measurement_sample import MeasurementSample
from openapi_server import util

from openapi_server.models.device import Device  # noqa: E501
from openapi_server.models.device_type_extended import DeviceTypeExtended  # noqa: E501
from openapi_server.models.measurement_sample import MeasurementSample  # noqa: E501

class ResponseDataLoggerSetupStep2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_types=None, devices=None, sample=None, error_count=None, errors=None):  # noqa: E501
        """ResponseDataLoggerSetupStep2 - a model defined in OpenAPI

        :param device_types: The device_types of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type device_types: List[DeviceTypeExtended]
        :param devices: The devices of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type devices: List[Device]
        :param sample: The sample of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type sample: MeasurementSample
        :param error_count: The error_count of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type error_count: float
        :param errors: The errors of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type errors: List[str]
        """
        self.openapi_types = {
            'device_types': List[DeviceTypeExtended],
            'devices': List[Device],
            'sample': MeasurementSample,
            'error_count': float,
            'errors': List[str]
        }

        self.attribute_map = {
            'device_types': 'deviceTypes',
            'devices': 'devices',
            'sample': 'sample',
            'error_count': 'errorCount',
            'errors': 'errors'
        }

        self._device_types = device_types
        self._devices = devices
        self._sample = sample
        self._error_count = error_count
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseDataLoggerSetupStep2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseDataLoggerSetupStep2 of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :rtype: ResponseDataLoggerSetupStep2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_types(self):
        """Gets the device_types of this ResponseDataLoggerSetupStep2.


        :return: The device_types of this ResponseDataLoggerSetupStep2.
        :rtype: List[DeviceTypeExtended]
        """
        return self._device_types

    @device_types.setter
    def device_types(self, device_types):
        """Sets the device_types of this ResponseDataLoggerSetupStep2.


        :param device_types: The device_types of this ResponseDataLoggerSetupStep2.
        :type device_types: List[DeviceTypeExtended]
        """
        if device_types is None:
            raise ValueError("Invalid value for `device_types`, must not be `None`")  # noqa: E501

        self._device_types = device_types

    @property
    def devices(self):
        """Gets the devices of this ResponseDataLoggerSetupStep2.


        :return: The devices of this ResponseDataLoggerSetupStep2.
        :rtype: List[Device]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this ResponseDataLoggerSetupStep2.


        :param devices: The devices of this ResponseDataLoggerSetupStep2.
        :type devices: List[Device]
        """
        if devices is None:
            raise ValueError("Invalid value for `devices`, must not be `None`")  # noqa: E501

        self._devices = devices

    @property
    def sample(self):
        """Gets the sample of this ResponseDataLoggerSetupStep2.


        :return: The sample of this ResponseDataLoggerSetupStep2.
        :rtype: MeasurementSample
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this ResponseDataLoggerSetupStep2.


        :param sample: The sample of this ResponseDataLoggerSetupStep2.
        :type sample: MeasurementSample
        """

        self._sample = sample

    @property
    def error_count(self):
        """Gets the error_count of this ResponseDataLoggerSetupStep2.

        Sample Value  # noqa: E501

        :return: The error_count of this ResponseDataLoggerSetupStep2.
        :rtype: float
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this ResponseDataLoggerSetupStep2.

        Sample Value  # noqa: E501

        :param error_count: The error_count of this ResponseDataLoggerSetupStep2.
        :type error_count: float
        """
        if error_count is None:
            raise ValueError("Invalid value for `error_count`, must not be `None`")  # noqa: E501

        self._error_count = error_count

    @property
    def errors(self):
        """Gets the errors of this ResponseDataLoggerSetupStep2.


        :return: The errors of this ResponseDataLoggerSetupStep2.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ResponseDataLoggerSetupStep2.


        :param errors: The errors of this ResponseDataLoggerSetupStep2.
        :type errors: List[str]
        """

        self._errors = errors
