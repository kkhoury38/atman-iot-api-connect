# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class DataLoggerExcludingIdAuthTokenConfigUserId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, connection_type=None, file_format=None, username=None, passwd=None, auto_init=None, data_compressed=None):  # noqa: E501
        """DataLoggerExcludingIdAuthTokenConfigUserId - a model defined in OpenAPI

        :param description: The description of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :type description: str
        :param connection_type: The connection_type of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :type connection_type: str
        :param file_format: The file_format of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :type file_format: str
        :param username: The username of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :type username: str
        :param passwd: The passwd of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :type passwd: str
        :param auto_init: The auto_init of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :type auto_init: bool
        :param data_compressed: The data_compressed of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :type data_compressed: bool
        """
        self.openapi_types = {
            'description': str,
            'connection_type': str,
            'file_format': str,
            'username': str,
            'passwd': str,
            'auto_init': bool,
            'data_compressed': bool
        }

        self.attribute_map = {
            'description': 'description',
            'connection_type': 'connectionType',
            'file_format': 'fileFormat',
            'username': 'username',
            'passwd': 'passwd',
            'auto_init': 'autoInit',
            'data_compressed': 'dataCompressed'
        }

        self._description = description
        self._connection_type = connection_type
        self._file_format = file_format
        self._username = username
        self._passwd = passwd
        self._auto_init = auto_init
        self._data_compressed = data_compressed

    @classmethod
    def from_dict(cls, dikt) -> 'DataLoggerExcludingIdAuthTokenConfigUserId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataLoggerExcluding_id-authToken-config-userId_ of this DataLoggerExcludingIdAuthTokenConfigUserId.  # noqa: E501
        :rtype: DataLoggerExcludingIdAuthTokenConfigUserId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Datalogger description  # noqa: E501

        :return: The description of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Datalogger description  # noqa: E501

        :param description: The description of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :type description: str
        """

        self._description = description

    @property
    def connection_type(self):
        """Gets the connection_type of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Method used by DataLogger to send data to the system. At present only FTP implemented  # noqa: E501

        :return: The connection_type of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Method used by DataLogger to send data to the system. At present only FTP implemented  # noqa: E501

        :param connection_type: The connection_type of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :type connection_type: str
        """
        if connection_type is None:
            raise ValueError("Invalid value for `connection_type`, must not be `None`")  # noqa: E501

        self._connection_type = connection_type

    @property
    def file_format(self):
        """Gets the file_format of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats  # noqa: E501

        :return: The file_format of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats  # noqa: E501

        :param file_format: The file_format of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :type file_format: str
        """
        if file_format is None:
            raise ValueError("Invalid value for `file_format`, must not be `None`")  # noqa: E501

        self._file_format = file_format

    @property
    def username(self):
        """Gets the username of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Username of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :return: The username of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Username of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :param username: The username of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :type username: str
        """

        self._username = username

    @property
    def passwd(self):
        """Gets the passwd of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Password of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :return: The passwd of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :rtype: str
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd):
        """Sets the passwd of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Password of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :param passwd: The passwd of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :type passwd: str
        """

        self._passwd = passwd

    @property
    def auto_init(self):
        """Gets the auto_init of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration  # noqa: E501

        :return: The auto_init of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :rtype: bool
        """
        return self._auto_init

    @auto_init.setter
    def auto_init(self, auto_init):
        """Sets the auto_init of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration  # noqa: E501

        :param auto_init: The auto_init of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :type auto_init: bool
        """
        if auto_init is None:
            raise ValueError("Invalid value for `auto_init`, must not be `None`")  # noqa: E501

        self._auto_init = auto_init

    @property
    def data_compressed(self):
        """Gets the data_compressed of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Flag for selecting if DataLogger sends compressed files  # noqa: E501

        :return: The data_compressed of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :rtype: bool
        """
        return self._data_compressed

    @data_compressed.setter
    def data_compressed(self, data_compressed):
        """Sets the data_compressed of this DataLoggerExcludingIdAuthTokenConfigUserId.

        Flag for selecting if DataLogger sends compressed files  # noqa: E501

        :param data_compressed: The data_compressed of this DataLoggerExcludingIdAuthTokenConfigUserId.
        :type data_compressed: bool
        """
        if data_compressed is None:
            raise ValueError("Invalid value for `data_compressed`, must not be `None`")  # noqa: E501

        self._data_compressed = data_compressed
