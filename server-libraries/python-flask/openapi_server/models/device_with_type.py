# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.device import Device
from openapi_server.models.device_type import DeviceType
from openapi_server import util

from openapi_server.models.device import Device  # noqa: E501
from openapi_server.models.device_type import DeviceType  # noqa: E501

class DeviceWithType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_type=None, device=None):  # noqa: E501
        """DeviceWithType - a model defined in OpenAPI

        :param device_type: The device_type of this DeviceWithType.  # noqa: E501
        :type device_type: DeviceType
        :param device: The device of this DeviceWithType.  # noqa: E501
        :type device: Device
        """
        self.openapi_types = {
            'device_type': DeviceType,
            'device': Device
        }

        self.attribute_map = {
            'device_type': 'deviceType',
            'device': 'device'
        }

        self._device_type = device_type
        self._device = device

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceWithType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceWithType of this DeviceWithType.  # noqa: E501
        :rtype: DeviceWithType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_type(self):
        """Gets the device_type of this DeviceWithType.


        :return: The device_type of this DeviceWithType.
        :rtype: DeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceWithType.


        :param device_type: The device_type of this DeviceWithType.
        :type device_type: DeviceType
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501

        self._device_type = device_type

    @property
    def device(self):
        """Gets the device of this DeviceWithType.


        :return: The device of this DeviceWithType.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DeviceWithType.


        :param device: The device of this DeviceWithType.
        :type device: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device
