# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.channel_type import ChannelType
from openapi_server.models.data_float import DataFloat
from openapi_server.models.data_text import DataText
from openapi_server import util

from openapi_server.models.channel_type import ChannelType  # noqa: E501
from openapi_server.models.data_float import DataFloat  # noqa: E501
from openapi_server.models.data_text import DataText  # noqa: E501

class ResponseDeviceChannelData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_type=None, data_float=None, data_text=None):  # noqa: E501
        """ResponseDeviceChannelData - a model defined in OpenAPI

        :param channel_type: The channel_type of this ResponseDeviceChannelData.  # noqa: E501
        :type channel_type: ChannelType
        :param data_float: The data_float of this ResponseDeviceChannelData.  # noqa: E501
        :type data_float: List[DataFloat]
        :param data_text: The data_text of this ResponseDeviceChannelData.  # noqa: E501
        :type data_text: List[DataText]
        """
        self.openapi_types = {
            'channel_type': ChannelType,
            'data_float': List[DataFloat],
            'data_text': List[DataText]
        }

        self.attribute_map = {
            'channel_type': 'channelType',
            'data_float': 'dataFloat',
            'data_text': 'dataText'
        }

        self._channel_type = channel_type
        self._data_float = data_float
        self._data_text = data_text

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseDeviceChannelData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseDeviceChannelData of this ResponseDeviceChannelData.  # noqa: E501
        :rtype: ResponseDeviceChannelData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_type(self):
        """Gets the channel_type of this ResponseDeviceChannelData.


        :return: The channel_type of this ResponseDeviceChannelData.
        :rtype: ChannelType
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this ResponseDeviceChannelData.


        :param channel_type: The channel_type of this ResponseDeviceChannelData.
        :type channel_type: ChannelType
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")  # noqa: E501

        self._channel_type = channel_type

    @property
    def data_float(self):
        """Gets the data_float of this ResponseDeviceChannelData.


        :return: The data_float of this ResponseDeviceChannelData.
        :rtype: List[DataFloat]
        """
        return self._data_float

    @data_float.setter
    def data_float(self, data_float):
        """Sets the data_float of this ResponseDeviceChannelData.


        :param data_float: The data_float of this ResponseDeviceChannelData.
        :type data_float: List[DataFloat]
        """

        self._data_float = data_float

    @property
    def data_text(self):
        """Gets the data_text of this ResponseDeviceChannelData.


        :return: The data_text of this ResponseDeviceChannelData.
        :rtype: List[DataText]
        """
        return self._data_text

    @data_text.setter
    def data_text(self, data_text):
        """Sets the data_text of this ResponseDeviceChannelData.


        :param data_text: The data_text of this ResponseDeviceChannelData.
        :type data_text: List[DataText]
        """

        self._data_text = data_text
