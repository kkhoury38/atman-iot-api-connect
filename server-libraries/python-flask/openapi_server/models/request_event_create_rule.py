# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.request_event_rule_scope import RequestEventRuleScope
from openapi_server import util

from openapi_server.models.request_event_rule_scope import RequestEventRuleScope  # noqa: E501

class RequestEventCreateRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, scope=None, action=None, action_parameters=None):  # noqa: E501
        """RequestEventCreateRule - a model defined in OpenAPI

        :param description: The description of this RequestEventCreateRule.  # noqa: E501
        :type description: str
        :param scope: The scope of this RequestEventCreateRule.  # noqa: E501
        :type scope: List[RequestEventRuleScope]
        :param action: The action of this RequestEventCreateRule.  # noqa: E501
        :type action: str
        :param action_parameters: The action_parameters of this RequestEventCreateRule.  # noqa: E501
        :type action_parameters: object
        """
        self.openapi_types = {
            'description': str,
            'scope': List[RequestEventRuleScope],
            'action': str,
            'action_parameters': object
        }

        self.attribute_map = {
            'description': 'description',
            'scope': 'scope',
            'action': 'action',
            'action_parameters': 'actionParameters'
        }

        self._description = description
        self._scope = scope
        self._action = action
        self._action_parameters = action_parameters

    @classmethod
    def from_dict(cls, dikt) -> 'RequestEventCreateRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestEventCreateRule of this RequestEventCreateRule.  # noqa: E501
        :rtype: RequestEventCreateRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this RequestEventCreateRule.

        Rule description  # noqa: E501

        :return: The description of this RequestEventCreateRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RequestEventCreateRule.

        Rule description  # noqa: E501

        :param description: The description of this RequestEventCreateRule.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def scope(self):
        """Gets the scope of this RequestEventCreateRule.


        :return: The scope of this RequestEventCreateRule.
        :rtype: List[RequestEventRuleScope]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this RequestEventCreateRule.


        :param scope: The scope of this RequestEventCreateRule.
        :type scope: List[RequestEventRuleScope]
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def action(self):
        """Gets the action of this RequestEventCreateRule.

        Rule action  # noqa: E501

        :return: The action of this RequestEventCreateRule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RequestEventCreateRule.

        Rule action  # noqa: E501

        :param action: The action of this RequestEventCreateRule.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def action_parameters(self):
        """Gets the action_parameters of this RequestEventCreateRule.

        Action Parameters  # noqa: E501

        :return: The action_parameters of this RequestEventCreateRule.
        :rtype: object
        """
        return self._action_parameters

    @action_parameters.setter
    def action_parameters(self, action_parameters):
        """Sets the action_parameters of this RequestEventCreateRule.

        Action Parameters  # noqa: E501

        :param action_parameters: The action_parameters of this RequestEventCreateRule.
        :type action_parameters: object
        """
        if action_parameters is None:
            raise ValueError("Invalid value for `action_parameters`, must not be `None`")  # noqa: E501

        self._action_parameters = action_parameters
