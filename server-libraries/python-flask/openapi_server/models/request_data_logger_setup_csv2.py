# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.request_data_logger_setup_csv2_data import RequestDataLoggerSetupCsv2Data
from openapi_server.models.request_data_logger_setup_csv2_time_data import RequestDataLoggerSetupCsv2TimeData
from openapi_server import util

from openapi_server.models.request_data_logger_setup_csv2_data import RequestDataLoggerSetupCsv2Data  # noqa: E501
from openapi_server.models.request_data_logger_setup_csv2_time_data import RequestDataLoggerSetupCsv2TimeData  # noqa: E501

class RequestDataLoggerSetupCsv2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delimiter=None, decimal_point=None, time_data=None, data=None, confirm=None, file_format=None):  # noqa: E501
        """RequestDataLoggerSetupCsv2 - a model defined in OpenAPI

        :param delimiter: The delimiter of this RequestDataLoggerSetupCsv2.  # noqa: E501
        :type delimiter: str
        :param decimal_point: The decimal_point of this RequestDataLoggerSetupCsv2.  # noqa: E501
        :type decimal_point: str
        :param time_data: The time_data of this RequestDataLoggerSetupCsv2.  # noqa: E501
        :type time_data: RequestDataLoggerSetupCsv2TimeData
        :param data: The data of this RequestDataLoggerSetupCsv2.  # noqa: E501
        :type data: RequestDataLoggerSetupCsv2Data
        :param confirm: The confirm of this RequestDataLoggerSetupCsv2.  # noqa: E501
        :type confirm: bool
        :param file_format: The file_format of this RequestDataLoggerSetupCsv2.  # noqa: E501
        :type file_format: str
        """
        self.openapi_types = {
            'delimiter': str,
            'decimal_point': str,
            'time_data': RequestDataLoggerSetupCsv2TimeData,
            'data': RequestDataLoggerSetupCsv2Data,
            'confirm': bool,
            'file_format': str
        }

        self.attribute_map = {
            'delimiter': 'delimiter',
            'decimal_point': 'decimalPoint',
            'time_data': 'timeData',
            'data': 'data',
            'confirm': 'confirm',
            'file_format': 'fileFormat'
        }

        self._delimiter = delimiter
        self._decimal_point = decimal_point
        self._time_data = time_data
        self._data = data
        self._confirm = confirm
        self._file_format = file_format

    @classmethod
    def from_dict(cls, dikt) -> 'RequestDataLoggerSetupCsv2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestDataLoggerSetupCsv2 of this RequestDataLoggerSetupCsv2.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delimiter(self):
        """Gets the delimiter of this RequestDataLoggerSetupCsv2.

        Delimiter used in CSV file  # noqa: E501

        :return: The delimiter of this RequestDataLoggerSetupCsv2.
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this RequestDataLoggerSetupCsv2.

        Delimiter used in CSV file  # noqa: E501

        :param delimiter: The delimiter of this RequestDataLoggerSetupCsv2.
        :type delimiter: str
        """
        if delimiter is None:
            raise ValueError("Invalid value for `delimiter`, must not be `None`")  # noqa: E501

        self._delimiter = delimiter

    @property
    def decimal_point(self):
        """Gets the decimal_point of this RequestDataLoggerSetupCsv2.

        Decimal Point of values in CSV file  # noqa: E501

        :return: The decimal_point of this RequestDataLoggerSetupCsv2.
        :rtype: str
        """
        return self._decimal_point

    @decimal_point.setter
    def decimal_point(self, decimal_point):
        """Sets the decimal_point of this RequestDataLoggerSetupCsv2.

        Decimal Point of values in CSV file  # noqa: E501

        :param decimal_point: The decimal_point of this RequestDataLoggerSetupCsv2.
        :type decimal_point: str
        """
        if decimal_point is None:
            raise ValueError("Invalid value for `decimal_point`, must not be `None`")  # noqa: E501

        self._decimal_point = decimal_point

    @property
    def time_data(self):
        """Gets the time_data of this RequestDataLoggerSetupCsv2.


        :return: The time_data of this RequestDataLoggerSetupCsv2.
        :rtype: RequestDataLoggerSetupCsv2TimeData
        """
        return self._time_data

    @time_data.setter
    def time_data(self, time_data):
        """Sets the time_data of this RequestDataLoggerSetupCsv2.


        :param time_data: The time_data of this RequestDataLoggerSetupCsv2.
        :type time_data: RequestDataLoggerSetupCsv2TimeData
        """
        if time_data is None:
            raise ValueError("Invalid value for `time_data`, must not be `None`")  # noqa: E501

        self._time_data = time_data

    @property
    def data(self):
        """Gets the data of this RequestDataLoggerSetupCsv2.


        :return: The data of this RequestDataLoggerSetupCsv2.
        :rtype: RequestDataLoggerSetupCsv2Data
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RequestDataLoggerSetupCsv2.


        :param data: The data of this RequestDataLoggerSetupCsv2.
        :type data: RequestDataLoggerSetupCsv2Data
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def confirm(self):
        """Gets the confirm of this RequestDataLoggerSetupCsv2.

        Provided Configuration Confirmation. Set to true to save current configuration  # noqa: E501

        :return: The confirm of this RequestDataLoggerSetupCsv2.
        :rtype: bool
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this RequestDataLoggerSetupCsv2.

        Provided Configuration Confirmation. Set to true to save current configuration  # noqa: E501

        :param confirm: The confirm of this RequestDataLoggerSetupCsv2.
        :type confirm: bool
        """
        if confirm is None:
            raise ValueError("Invalid value for `confirm`, must not be `None`")  # noqa: E501

        self._confirm = confirm

    @property
    def file_format(self):
        """Gets the file_format of this RequestDataLoggerSetupCsv2.

        Data File Format  # noqa: E501

        :return: The file_format of this RequestDataLoggerSetupCsv2.
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this RequestDataLoggerSetupCsv2.

        Data File Format  # noqa: E501

        :param file_format: The file_format of this RequestDataLoggerSetupCsv2.
        :type file_format: str
        """
        if file_format is None:
            raise ValueError("Invalid value for `file_format`, must not be `None`")  # noqa: E501

        self._file_format = file_format
