# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ChannelExcludingIdDeviceId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, monitor=None, last_timestamp=None, status=None, channel_type_id=None):  # noqa: E501
        """ChannelExcludingIdDeviceId - a model defined in OpenAPI

        :param monitor: The monitor of this ChannelExcludingIdDeviceId.  # noqa: E501
        :type monitor: bool
        :param last_timestamp: The last_timestamp of this ChannelExcludingIdDeviceId.  # noqa: E501
        :type last_timestamp: datetime
        :param status: The status of this ChannelExcludingIdDeviceId.  # noqa: E501
        :type status: str
        :param channel_type_id: The channel_type_id of this ChannelExcludingIdDeviceId.  # noqa: E501
        :type channel_type_id: float
        """
        self.openapi_types = {
            'monitor': bool,
            'last_timestamp': datetime,
            'status': str,
            'channel_type_id': float
        }

        self.attribute_map = {
            'monitor': 'monitor',
            'last_timestamp': 'lastTimestamp',
            'status': 'status',
            'channel_type_id': 'channelTypeId'
        }

        self._monitor = monitor
        self._last_timestamp = last_timestamp
        self._status = status
        self._channel_type_id = channel_type_id

    @classmethod
    def from_dict(cls, dikt) -> 'ChannelExcludingIdDeviceId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChannelExcluding_id-deviceId_ of this ChannelExcludingIdDeviceId.  # noqa: E501
        :rtype: ChannelExcludingIdDeviceId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def monitor(self):
        """Gets the monitor of this ChannelExcludingIdDeviceId.

        Enable channel monitoring - data recording - by setting to true  # noqa: E501

        :return: The monitor of this ChannelExcludingIdDeviceId.
        :rtype: bool
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this ChannelExcludingIdDeviceId.

        Enable channel monitoring - data recording - by setting to true  # noqa: E501

        :param monitor: The monitor of this ChannelExcludingIdDeviceId.
        :type monitor: bool
        """
        if monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")  # noqa: E501

        self._monitor = monitor

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this ChannelExcludingIdDeviceId.

        Timestamp  # noqa: E501

        :return: The last_timestamp of this ChannelExcludingIdDeviceId.
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this ChannelExcludingIdDeviceId.

        Timestamp  # noqa: E501

        :param last_timestamp: The last_timestamp of this ChannelExcludingIdDeviceId.
        :type last_timestamp: datetime
        """

        self._last_timestamp = last_timestamp

    @property
    def status(self):
        """Gets the status of this ChannelExcludingIdDeviceId.

        Channel Status  # noqa: E501

        :return: The status of this ChannelExcludingIdDeviceId.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChannelExcludingIdDeviceId.

        Channel Status  # noqa: E501

        :param status: The status of this ChannelExcludingIdDeviceId.
        :type status: str
        """

        self._status = status

    @property
    def channel_type_id(self):
        """Gets the channel_type_id of this ChannelExcludingIdDeviceId.

        ID of ChannelType associated with Channel  # noqa: E501

        :return: The channel_type_id of this ChannelExcludingIdDeviceId.
        :rtype: float
        """
        return self._channel_type_id

    @channel_type_id.setter
    def channel_type_id(self, channel_type_id):
        """Sets the channel_type_id of this ChannelExcludingIdDeviceId.

        ID of ChannelType associated with Channel  # noqa: E501

        :param channel_type_id: The channel_type_id of this ChannelExcludingIdDeviceId.
        :type channel_type_id: float
        """
        if channel_type_id is None:
            raise ValueError("Invalid value for `channel_type_id`, must not be `None`")  # noqa: E501

        self._channel_type_id = channel_type_id
