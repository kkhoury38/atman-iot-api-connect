# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class VirtualAccess(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, virtual_relation_id=None, asset_id=None):  # noqa: E501
        """VirtualAccess - a model defined in OpenAPI

        :param id: The id of this VirtualAccess.  # noqa: E501
        :type id: float
        :param virtual_relation_id: The virtual_relation_id of this VirtualAccess.  # noqa: E501
        :type virtual_relation_id: float
        :param asset_id: The asset_id of this VirtualAccess.  # noqa: E501
        :type asset_id: float
        """
        self.openapi_types = {
            'id': float,
            'virtual_relation_id': float,
            'asset_id': float
        }

        self.attribute_map = {
            'id': 'id',
            'virtual_relation_id': 'virtualRelationId',
            'asset_id': 'assetId'
        }

        self._id = id
        self._virtual_relation_id = virtual_relation_id
        self._asset_id = asset_id

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualAccess':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualAccess of this VirtualAccess.  # noqa: E501
        :rtype: VirtualAccess
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VirtualAccess.

        Automatically generated ID  # noqa: E501

        :return: The id of this VirtualAccess.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualAccess.

        Automatically generated ID  # noqa: E501

        :param id: The id of this VirtualAccess.
        :type id: float
        """

        self._id = id

    @property
    def virtual_relation_id(self):
        """Gets the virtual_relation_id of this VirtualAccess.

        ID of VirtualRelation  # noqa: E501

        :return: The virtual_relation_id of this VirtualAccess.
        :rtype: float
        """
        return self._virtual_relation_id

    @virtual_relation_id.setter
    def virtual_relation_id(self, virtual_relation_id):
        """Sets the virtual_relation_id of this VirtualAccess.

        ID of VirtualRelation  # noqa: E501

        :param virtual_relation_id: The virtual_relation_id of this VirtualAccess.
        :type virtual_relation_id: float
        """
        if virtual_relation_id is None:
            raise ValueError("Invalid value for `virtual_relation_id`, must not be `None`")  # noqa: E501

        self._virtual_relation_id = virtual_relation_id

    @property
    def asset_id(self):
        """Gets the asset_id of this VirtualAccess.

        ID of Asset associated with VirtualRelation  # noqa: E501

        :return: The asset_id of this VirtualAccess.
        :rtype: float
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this VirtualAccess.

        ID of Asset associated with VirtualRelation  # noqa: E501

        :param asset_id: The asset_id of this VirtualAccess.
        :type asset_id: float
        """
        if asset_id is None:
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id
