# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CodeVerificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key=None, reference_code=None, user_email=None):  # noqa: E501
        """CodeVerificationRequest - a model defined in OpenAPI

        :param api_key: The api_key of this CodeVerificationRequest.  # noqa: E501
        :type api_key: str
        :param reference_code: The reference_code of this CodeVerificationRequest.  # noqa: E501
        :type reference_code: str
        :param user_email: The user_email of this CodeVerificationRequest.  # noqa: E501
        :type user_email: str
        """
        self.openapi_types = {
            'api_key': str,
            'reference_code': str,
            'user_email': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'reference_code': 'referenceCode',
            'user_email': 'userEmail'
        }

        self._api_key = api_key
        self._reference_code = reference_code
        self._user_email = user_email

    @classmethod
    def from_dict(cls, dikt) -> 'CodeVerificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CodeVerificationRequest of this CodeVerificationRequest.  # noqa: E501
        :rtype: CodeVerificationRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this CodeVerificationRequest.


        :return: The api_key of this CodeVerificationRequest.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this CodeVerificationRequest.


        :param api_key: The api_key of this CodeVerificationRequest.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def reference_code(self):
        """Gets the reference_code of this CodeVerificationRequest.


        :return: The reference_code of this CodeVerificationRequest.
        :rtype: str
        """
        return self._reference_code

    @reference_code.setter
    def reference_code(self, reference_code):
        """Sets the reference_code of this CodeVerificationRequest.


        :param reference_code: The reference_code of this CodeVerificationRequest.
        :type reference_code: str
        """
        if reference_code is None:
            raise ValueError("Invalid value for `reference_code`, must not be `None`")  # noqa: E501

        self._reference_code = reference_code

    @property
    def user_email(self):
        """Gets the user_email of this CodeVerificationRequest.


        :return: The user_email of this CodeVerificationRequest.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this CodeVerificationRequest.


        :param user_email: The user_email of this CodeVerificationRequest.
        :type user_email: str
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email
