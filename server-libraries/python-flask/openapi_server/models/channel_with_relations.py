# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.channel_type_with_relations import ChannelTypeWithRelations
from openapi_server.models.device_with_relations import DeviceWithRelations
from openapi_server import util

from openapi_server.models.channel_type_with_relations import ChannelTypeWithRelations  # noqa: E501
from openapi_server.models.device_with_relations import DeviceWithRelations  # noqa: E501

class ChannelWithRelations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, monitor=None, last_timestamp=None, status=None, device_id=None, channel_type_id=None, device=None, channel_type=None):  # noqa: E501
        """ChannelWithRelations - a model defined in OpenAPI

        :param id: The id of this ChannelWithRelations.  # noqa: E501
        :type id: float
        :param monitor: The monitor of this ChannelWithRelations.  # noqa: E501
        :type monitor: bool
        :param last_timestamp: The last_timestamp of this ChannelWithRelations.  # noqa: E501
        :type last_timestamp: datetime
        :param status: The status of this ChannelWithRelations.  # noqa: E501
        :type status: str
        :param device_id: The device_id of this ChannelWithRelations.  # noqa: E501
        :type device_id: float
        :param channel_type_id: The channel_type_id of this ChannelWithRelations.  # noqa: E501
        :type channel_type_id: float
        :param device: The device of this ChannelWithRelations.  # noqa: E501
        :type device: DeviceWithRelations
        :param channel_type: The channel_type of this ChannelWithRelations.  # noqa: E501
        :type channel_type: ChannelTypeWithRelations
        """
        self.openapi_types = {
            'id': float,
            'monitor': bool,
            'last_timestamp': datetime,
            'status': str,
            'device_id': float,
            'channel_type_id': float,
            'device': DeviceWithRelations,
            'channel_type': ChannelTypeWithRelations
        }

        self.attribute_map = {
            'id': 'id',
            'monitor': 'monitor',
            'last_timestamp': 'lastTimestamp',
            'status': 'status',
            'device_id': 'deviceId',
            'channel_type_id': 'channelTypeId',
            'device': 'device',
            'channel_type': 'channelType'
        }

        self._id = id
        self._monitor = monitor
        self._last_timestamp = last_timestamp
        self._status = status
        self._device_id = device_id
        self._channel_type_id = channel_type_id
        self._device = device
        self._channel_type = channel_type

    @classmethod
    def from_dict(cls, dikt) -> 'ChannelWithRelations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChannelWithRelations of this ChannelWithRelations.  # noqa: E501
        :rtype: ChannelWithRelations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ChannelWithRelations.

        Automatically generated ID  # noqa: E501

        :return: The id of this ChannelWithRelations.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChannelWithRelations.

        Automatically generated ID  # noqa: E501

        :param id: The id of this ChannelWithRelations.
        :type id: float
        """

        self._id = id

    @property
    def monitor(self):
        """Gets the monitor of this ChannelWithRelations.

        Enable channel monitoring - data recording - by setting to true  # noqa: E501

        :return: The monitor of this ChannelWithRelations.
        :rtype: bool
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this ChannelWithRelations.

        Enable channel monitoring - data recording - by setting to true  # noqa: E501

        :param monitor: The monitor of this ChannelWithRelations.
        :type monitor: bool
        """
        if monitor is None:
            raise ValueError("Invalid value for `monitor`, must not be `None`")  # noqa: E501

        self._monitor = monitor

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this ChannelWithRelations.

        Timestamp  # noqa: E501

        :return: The last_timestamp of this ChannelWithRelations.
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this ChannelWithRelations.

        Timestamp  # noqa: E501

        :param last_timestamp: The last_timestamp of this ChannelWithRelations.
        :type last_timestamp: datetime
        """

        self._last_timestamp = last_timestamp

    @property
    def status(self):
        """Gets the status of this ChannelWithRelations.

        Channel Status  # noqa: E501

        :return: The status of this ChannelWithRelations.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChannelWithRelations.

        Channel Status  # noqa: E501

        :param status: The status of this ChannelWithRelations.
        :type status: str
        """

        self._status = status

    @property
    def device_id(self):
        """Gets the device_id of this ChannelWithRelations.

        ID of Device that Channel belongs to  # noqa: E501

        :return: The device_id of this ChannelWithRelations.
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ChannelWithRelations.

        ID of Device that Channel belongs to  # noqa: E501

        :param device_id: The device_id of this ChannelWithRelations.
        :type device_id: float
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def channel_type_id(self):
        """Gets the channel_type_id of this ChannelWithRelations.

        ID of ChannelType associated with Channel  # noqa: E501

        :return: The channel_type_id of this ChannelWithRelations.
        :rtype: float
        """
        return self._channel_type_id

    @channel_type_id.setter
    def channel_type_id(self, channel_type_id):
        """Sets the channel_type_id of this ChannelWithRelations.

        ID of ChannelType associated with Channel  # noqa: E501

        :param channel_type_id: The channel_type_id of this ChannelWithRelations.
        :type channel_type_id: float
        """
        if channel_type_id is None:
            raise ValueError("Invalid value for `channel_type_id`, must not be `None`")  # noqa: E501

        self._channel_type_id = channel_type_id

    @property
    def device(self):
        """Gets the device of this ChannelWithRelations.


        :return: The device of this ChannelWithRelations.
        :rtype: DeviceWithRelations
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ChannelWithRelations.


        :param device: The device of this ChannelWithRelations.
        :type device: DeviceWithRelations
        """

        self._device = device

    @property
    def channel_type(self):
        """Gets the channel_type of this ChannelWithRelations.


        :return: The channel_type of this ChannelWithRelations.
        :rtype: ChannelTypeWithRelations
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this ChannelWithRelations.


        :param channel_type: The channel_type of this ChannelWithRelations.
        :type channel_type: ChannelTypeWithRelations
        """

        self._channel_type = channel_type
