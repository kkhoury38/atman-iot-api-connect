# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.subscription_with_relations import SubscriptionWithRelations
from openapi_server import util

from openapi_server.models.subscription_with_relations import SubscriptionWithRelations  # noqa: E501

class UserSubscriptionWithRelations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, reference_code=None, email=None, discount=None, creation_timestamp=None, activation_timestamp=None, end_timestamp=None, has_registered=None, subscription_id=None, subscription=None):  # noqa: E501
        """UserSubscriptionWithRelations - a model defined in OpenAPI

        :param id: The id of this UserSubscriptionWithRelations.  # noqa: E501
        :type id: float
        :param reference_code: The reference_code of this UserSubscriptionWithRelations.  # noqa: E501
        :type reference_code: str
        :param email: The email of this UserSubscriptionWithRelations.  # noqa: E501
        :type email: str
        :param discount: The discount of this UserSubscriptionWithRelations.  # noqa: E501
        :type discount: float
        :param creation_timestamp: The creation_timestamp of this UserSubscriptionWithRelations.  # noqa: E501
        :type creation_timestamp: datetime
        :param activation_timestamp: The activation_timestamp of this UserSubscriptionWithRelations.  # noqa: E501
        :type activation_timestamp: datetime
        :param end_timestamp: The end_timestamp of this UserSubscriptionWithRelations.  # noqa: E501
        :type end_timestamp: datetime
        :param has_registered: The has_registered of this UserSubscriptionWithRelations.  # noqa: E501
        :type has_registered: bool
        :param subscription_id: The subscription_id of this UserSubscriptionWithRelations.  # noqa: E501
        :type subscription_id: float
        :param subscription: The subscription of this UserSubscriptionWithRelations.  # noqa: E501
        :type subscription: SubscriptionWithRelations
        """
        self.openapi_types = {
            'id': float,
            'reference_code': str,
            'email': str,
            'discount': float,
            'creation_timestamp': datetime,
            'activation_timestamp': datetime,
            'end_timestamp': datetime,
            'has_registered': bool,
            'subscription_id': float,
            'subscription': SubscriptionWithRelations
        }

        self.attribute_map = {
            'id': 'id',
            'reference_code': 'referenceCode',
            'email': 'email',
            'discount': 'discount',
            'creation_timestamp': 'creationTimestamp',
            'activation_timestamp': 'activationTimestamp',
            'end_timestamp': 'endTimestamp',
            'has_registered': 'hasRegistered',
            'subscription_id': 'subscriptionId',
            'subscription': 'subscription'
        }

        self._id = id
        self._reference_code = reference_code
        self._email = email
        self._discount = discount
        self._creation_timestamp = creation_timestamp
        self._activation_timestamp = activation_timestamp
        self._end_timestamp = end_timestamp
        self._has_registered = has_registered
        self._subscription_id = subscription_id
        self._subscription = subscription

    @classmethod
    def from_dict(cls, dikt) -> 'UserSubscriptionWithRelations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserSubscriptionWithRelations of this UserSubscriptionWithRelations.  # noqa: E501
        :rtype: UserSubscriptionWithRelations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UserSubscriptionWithRelations.


        :return: The id of this UserSubscriptionWithRelations.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSubscriptionWithRelations.


        :param id: The id of this UserSubscriptionWithRelations.
        :type id: float
        """

        self._id = id

    @property
    def reference_code(self):
        """Gets the reference_code of this UserSubscriptionWithRelations.


        :return: The reference_code of this UserSubscriptionWithRelations.
        :rtype: str
        """
        return self._reference_code

    @reference_code.setter
    def reference_code(self, reference_code):
        """Sets the reference_code of this UserSubscriptionWithRelations.


        :param reference_code: The reference_code of this UserSubscriptionWithRelations.
        :type reference_code: str
        """
        if reference_code is None:
            raise ValueError("Invalid value for `reference_code`, must not be `None`")  # noqa: E501

        self._reference_code = reference_code

    @property
    def email(self):
        """Gets the email of this UserSubscriptionWithRelations.


        :return: The email of this UserSubscriptionWithRelations.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSubscriptionWithRelations.


        :param email: The email of this UserSubscriptionWithRelations.
        :type email: str
        """

        self._email = email

    @property
    def discount(self):
        """Gets the discount of this UserSubscriptionWithRelations.


        :return: The discount of this UserSubscriptionWithRelations.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this UserSubscriptionWithRelations.


        :param discount: The discount of this UserSubscriptionWithRelations.
        :type discount: float
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this UserSubscriptionWithRelations.

        Timestamp  # noqa: E501

        :return: The creation_timestamp of this UserSubscriptionWithRelations.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this UserSubscriptionWithRelations.

        Timestamp  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this UserSubscriptionWithRelations.
        :type creation_timestamp: datetime
        """
        if creation_timestamp is None:
            raise ValueError("Invalid value for `creation_timestamp`, must not be `None`")  # noqa: E501

        self._creation_timestamp = creation_timestamp

    @property
    def activation_timestamp(self):
        """Gets the activation_timestamp of this UserSubscriptionWithRelations.

        Timestamp  # noqa: E501

        :return: The activation_timestamp of this UserSubscriptionWithRelations.
        :rtype: datetime
        """
        return self._activation_timestamp

    @activation_timestamp.setter
    def activation_timestamp(self, activation_timestamp):
        """Sets the activation_timestamp of this UserSubscriptionWithRelations.

        Timestamp  # noqa: E501

        :param activation_timestamp: The activation_timestamp of this UserSubscriptionWithRelations.
        :type activation_timestamp: datetime
        """

        self._activation_timestamp = activation_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this UserSubscriptionWithRelations.

        Timestamp  # noqa: E501

        :return: The end_timestamp of this UserSubscriptionWithRelations.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this UserSubscriptionWithRelations.

        Timestamp  # noqa: E501

        :param end_timestamp: The end_timestamp of this UserSubscriptionWithRelations.
        :type end_timestamp: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def has_registered(self):
        """Gets the has_registered of this UserSubscriptionWithRelations.


        :return: The has_registered of this UserSubscriptionWithRelations.
        :rtype: bool
        """
        return self._has_registered

    @has_registered.setter
    def has_registered(self, has_registered):
        """Sets the has_registered of this UserSubscriptionWithRelations.


        :param has_registered: The has_registered of this UserSubscriptionWithRelations.
        :type has_registered: bool
        """
        if has_registered is None:
            raise ValueError("Invalid value for `has_registered`, must not be `None`")  # noqa: E501

        self._has_registered = has_registered

    @property
    def subscription_id(self):
        """Gets the subscription_id of this UserSubscriptionWithRelations.

        ID of Subscription  # noqa: E501

        :return: The subscription_id of this UserSubscriptionWithRelations.
        :rtype: float
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UserSubscriptionWithRelations.

        ID of Subscription  # noqa: E501

        :param subscription_id: The subscription_id of this UserSubscriptionWithRelations.
        :type subscription_id: float
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def subscription(self):
        """Gets the subscription of this UserSubscriptionWithRelations.


        :return: The subscription of this UserSubscriptionWithRelations.
        :rtype: SubscriptionWithRelations
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this UserSubscriptionWithRelations.


        :param subscription: The subscription of this UserSubscriptionWithRelations.
        :type subscription: SubscriptionWithRelations
        """

        self._subscription = subscription
