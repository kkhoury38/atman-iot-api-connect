# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ChannelTypeExcludingIdDeviceTypeId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, category=None, description=None, unit=None, channel_type=None):  # noqa: E501
        """ChannelTypeExcludingIdDeviceTypeId - a model defined in OpenAPI

        :param name: The name of this ChannelTypeExcludingIdDeviceTypeId.  # noqa: E501
        :type name: str
        :param category: The category of this ChannelTypeExcludingIdDeviceTypeId.  # noqa: E501
        :type category: str
        :param description: The description of this ChannelTypeExcludingIdDeviceTypeId.  # noqa: E501
        :type description: str
        :param unit: The unit of this ChannelTypeExcludingIdDeviceTypeId.  # noqa: E501
        :type unit: str
        :param channel_type: The channel_type of this ChannelTypeExcludingIdDeviceTypeId.  # noqa: E501
        :type channel_type: str
        """
        self.openapi_types = {
            'name': str,
            'category': str,
            'description': str,
            'unit': str,
            'channel_type': str
        }

        self.attribute_map = {
            'name': 'name',
            'category': 'category',
            'description': 'description',
            'unit': 'unit',
            'channel_type': 'channelType'
        }

        self._name = name
        self._category = category
        self._description = description
        self._unit = unit
        self._channel_type = channel_type

    @classmethod
    def from_dict(cls, dikt) -> 'ChannelTypeExcludingIdDeviceTypeId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChannelTypeExcluding_id-deviceTypeId_ of this ChannelTypeExcludingIdDeviceTypeId.  # noqa: E501
        :rtype: ChannelTypeExcludingIdDeviceTypeId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ChannelTypeExcludingIdDeviceTypeId.

        ChannelType name  # noqa: E501

        :return: The name of this ChannelTypeExcludingIdDeviceTypeId.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChannelTypeExcludingIdDeviceTypeId.

        ChannelType name  # noqa: E501

        :param name: The name of this ChannelTypeExcludingIdDeviceTypeId.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def category(self):
        """Gets the category of this ChannelTypeExcludingIdDeviceTypeId.

        ChannelType category  # noqa: E501

        :return: The category of this ChannelTypeExcludingIdDeviceTypeId.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ChannelTypeExcludingIdDeviceTypeId.

        ChannelType category  # noqa: E501

        :param category: The category of this ChannelTypeExcludingIdDeviceTypeId.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this ChannelTypeExcludingIdDeviceTypeId.

        ChannelType description  # noqa: E501

        :return: The description of this ChannelTypeExcludingIdDeviceTypeId.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChannelTypeExcludingIdDeviceTypeId.

        ChannelType description  # noqa: E501

        :param description: The description of this ChannelTypeExcludingIdDeviceTypeId.
        :type description: str
        """

        self._description = description

    @property
    def unit(self):
        """Gets the unit of this ChannelTypeExcludingIdDeviceTypeId.

        Unit of measurement  # noqa: E501

        :return: The unit of this ChannelTypeExcludingIdDeviceTypeId.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ChannelTypeExcludingIdDeviceTypeId.

        Unit of measurement  # noqa: E501

        :param unit: The unit of this ChannelTypeExcludingIdDeviceTypeId.
        :type unit: str
        """

        self._unit = unit

    @property
    def channel_type(self):
        """Gets the channel_type of this ChannelTypeExcludingIdDeviceTypeId.

        Type of data: UNDEFINED / SPOT_VALUE / COUNTER / TEXT  # noqa: E501

        :return: The channel_type of this ChannelTypeExcludingIdDeviceTypeId.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this ChannelTypeExcludingIdDeviceTypeId.

        Type of data: UNDEFINED / SPOT_VALUE / COUNTER / TEXT  # noqa: E501

        :param channel_type: The channel_type of this ChannelTypeExcludingIdDeviceTypeId.
        :type channel_type: str
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")  # noqa: E501

        self._channel_type = channel_type
