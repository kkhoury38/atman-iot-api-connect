# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class EventRelatedDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, device_id=None, event_id=None):  # noqa: E501
        """EventRelatedDevice - a model defined in OpenAPI

        :param id: The id of this EventRelatedDevice.  # noqa: E501
        :type id: float
        :param device_id: The device_id of this EventRelatedDevice.  # noqa: E501
        :type device_id: float
        :param event_id: The event_id of this EventRelatedDevice.  # noqa: E501
        :type event_id: float
        """
        self.openapi_types = {
            'id': float,
            'device_id': float,
            'event_id': float
        }

        self.attribute_map = {
            'id': 'id',
            'device_id': 'deviceId',
            'event_id': 'eventId'
        }

        self._id = id
        self._device_id = device_id
        self._event_id = event_id

    @classmethod
    def from_dict(cls, dikt) -> 'EventRelatedDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventRelatedDevice of this EventRelatedDevice.  # noqa: E501
        :rtype: EventRelatedDevice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EventRelatedDevice.

        Automatically generated ID  # noqa: E501

        :return: The id of this EventRelatedDevice.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventRelatedDevice.

        Automatically generated ID  # noqa: E501

        :param id: The id of this EventRelatedDevice.
        :type id: float
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this EventRelatedDevice.

        ID of Device associated with Event  # noqa: E501

        :return: The device_id of this EventRelatedDevice.
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this EventRelatedDevice.

        ID of Device associated with Event  # noqa: E501

        :param device_id: The device_id of this EventRelatedDevice.
        :type device_id: float
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def event_id(self):
        """Gets the event_id of this EventRelatedDevice.

        ID of Event  # noqa: E501

        :return: The event_id of this EventRelatedDevice.
        :rtype: float
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this EventRelatedDevice.

        ID of Event  # noqa: E501

        :param event_id: The event_id of this EventRelatedDevice.
        :type event_id: float
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id
