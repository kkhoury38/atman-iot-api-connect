<?php
/**
 * EventRuleWithRelations
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EventRuleWithRelations model.
 *
 * (Schema options: { includeRelations: true })
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class EventRuleWithRelations 
{
        /**
     * Automatically generated ID
     *
     * @var float|null
     * @SerializedName("id")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected $id;

    /**
     * Rule description
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $description;

    /**
     * Rule scope
     *
     * @var string
     * @SerializedName("scope")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $scope;

    /**
     * Event Detection Algorithm
     *
     * @var string|null
     * @SerializedName("algorithm")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $algorithm;

    /**
     * Rule action
     *
     * @var string
     * @SerializedName("action")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $action;

    /**
     * Rule action parameters
     *
     * @var string|null
     * @SerializedName("actionParameters")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $actionParameters;

    /**
     * JSON Rule
     *
     * @var string|null
     * @SerializedName("rule")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $rule;

    /**
     * EventRule execution period - seconds
     *
     * @var float|null
     * @SerializedName("executionPeriod")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected $executionPeriod;

    /**
     * Last execution timestamp
     *
     * @var \DateTime|null
     * @SerializedName("lastExecTimestamp")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $lastExecTimestamp;

    /**
     * Is set to true when EventRule has been activated
     *
     * @var bool|null
     * @SerializedName("activated")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $activated;

    /**
     * Is automaticaly set to true when EventRule is being processed
     *
     * @var bool|null
     * @SerializedName("inProgress")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $inProgress;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->description = isset($data['description']) ? $data['description'] : null;
        $this->scope = isset($data['scope']) ? $data['scope'] : null;
        $this->algorithm = isset($data['algorithm']) ? $data['algorithm'] : null;
        $this->action = isset($data['action']) ? $data['action'] : null;
        $this->actionParameters = isset($data['actionParameters']) ? $data['actionParameters'] : null;
        $this->rule = isset($data['rule']) ? $data['rule'] : null;
        $this->executionPeriod = isset($data['executionPeriod']) ? $data['executionPeriod'] : null;
        $this->lastExecTimestamp = isset($data['lastExecTimestamp']) ? $data['lastExecTimestamp'] : null;
        $this->activated = isset($data['activated']) ? $data['activated'] : null;
        $this->inProgress = isset($data['inProgress']) ? $data['inProgress'] : null;
    }

    /**
     * Gets id.
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param float|null $id  Automatically generated ID
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description  Rule description
     *
     * @return $this
     */
    public function setDescription($description = null)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets scope.
     *
     * @return string
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * Sets scope.
     *
     * @param string $scope  Rule scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->scope = $scope;

        return $this;
    }

    /**
     * Gets algorithm.
     *
     * @return string|null
     */
    public function getAlgorithm()
    {
        return $this->algorithm;
    }

    /**
     * Sets algorithm.
     *
     * @param string|null $algorithm  Event Detection Algorithm
     *
     * @return $this
     */
    public function setAlgorithm($algorithm = null)
    {
        $this->algorithm = $algorithm;

        return $this;
    }

    /**
     * Gets action.
     *
     * @return string
     */
    public function getAction()
    {
        return $this->action;
    }

    /**
     * Sets action.
     *
     * @param string $action  Rule action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->action = $action;

        return $this;
    }

    /**
     * Gets actionParameters.
     *
     * @return string|null
     */
    public function getActionParameters()
    {
        return $this->actionParameters;
    }

    /**
     * Sets actionParameters.
     *
     * @param string|null $actionParameters  Rule action parameters
     *
     * @return $this
     */
    public function setActionParameters($actionParameters = null)
    {
        $this->actionParameters = $actionParameters;

        return $this;
    }

    /**
     * Gets rule.
     *
     * @return string|null
     */
    public function getRule()
    {
        return $this->rule;
    }

    /**
     * Sets rule.
     *
     * @param string|null $rule  JSON Rule
     *
     * @return $this
     */
    public function setRule($rule = null)
    {
        $this->rule = $rule;

        return $this;
    }

    /**
     * Gets executionPeriod.
     *
     * @return float|null
     */
    public function getExecutionPeriod()
    {
        return $this->executionPeriod;
    }

    /**
     * Sets executionPeriod.
     *
     * @param float|null $executionPeriod  EventRule execution period - seconds
     *
     * @return $this
     */
    public function setExecutionPeriod($executionPeriod = null)
    {
        $this->executionPeriod = $executionPeriod;

        return $this;
    }

    /**
     * Gets lastExecTimestamp.
     *
     * @return \DateTime|null
     */
    public function getLastExecTimestamp(): ?\DateTime
    {
        return $this->lastExecTimestamp;
    }

    /**
     * Sets lastExecTimestamp.
     *
     * @param \DateTime|null $lastExecTimestamp  Last execution timestamp
     *
     * @return $this
     */
    public function setLastExecTimestamp(\DateTime $lastExecTimestamp = null)
    {
        $this->lastExecTimestamp = $lastExecTimestamp;

        return $this;
    }

    /**
     * Gets activated.
     *
     * @return bool|null
     */
    public function isActivated()
    {
        return $this->activated;
    }

    /**
     * Sets activated.
     *
     * @param bool|null $activated  Is set to true when EventRule has been activated
     *
     * @return $this
     */
    public function setActivated($activated = null)
    {
        $this->activated = $activated;

        return $this;
    }

    /**
     * Gets inProgress.
     *
     * @return bool|null
     */
    public function isInProgress()
    {
        return $this->inProgress;
    }

    /**
     * Sets inProgress.
     *
     * @param bool|null $inProgress  Is automaticaly set to true when EventRule is being processed
     *
     * @return $this
     */
    public function setInProgress($inProgress = null)
    {
        $this->inProgress = $inProgress;

        return $this;
    }
}


