<?php
/**
 * ResponseDataLoggerSetupStep2
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ResponseDataLoggerSetupStep2 model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class ResponseDataLoggerSetupStep2 
{
        /**
     * @var OpenAPI\Server\Model\DeviceTypeExtended[]
     * @SerializedName("deviceTypes")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\DeviceTypeExtended")
     * })
     * @Type("array<OpenAPI\Server\Model\DeviceTypeExtended>")
     */
    protected $deviceTypes;

    /**
     * @var OpenAPI\Server\Model\Device[]
     * @SerializedName("devices")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\Device")
     * })
     * @Type("array<OpenAPI\Server\Model\Device>")
     */
    protected $devices;

    /**
     * @var OpenAPI\Server\Model\MeasurementSample|null
     * @SerializedName("sample")
     * @Assert\Type("OpenAPI\Server\Model\MeasurementSample")
     * @Type("OpenAPI\Server\Model\MeasurementSample")
     */
    protected $sample;

    /**
     * Sample Value
     *
     * @var float
     * @SerializedName("errorCount")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    protected $errorCount;

    /**
     * @var string[]|null
     * @SerializedName("errors")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected $errors;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->deviceTypes = isset($data['deviceTypes']) ? $data['deviceTypes'] : null;
        $this->devices = isset($data['devices']) ? $data['devices'] : null;
        $this->sample = isset($data['sample']) ? $data['sample'] : null;
        $this->errorCount = isset($data['errorCount']) ? $data['errorCount'] : null;
        $this->errors = isset($data['errors']) ? $data['errors'] : null;
    }

    /**
     * Gets deviceTypes.
     *
     * @return OpenAPI\Server\Model\DeviceTypeExtended[]
     */
    public function getDeviceTypes(): array
    {
        return $this->deviceTypes;
    }

    /**
     * Sets deviceTypes.
     *
     * @param OpenAPI\Server\Model\DeviceTypeExtended[] $deviceTypes
     *
     * @return $this
     */
    public function setDeviceTypes(array $deviceTypes)
    {
        $this->deviceTypes = $deviceTypes;

        return $this;
    }

    /**
     * Gets devices.
     *
     * @return OpenAPI\Server\Model\Device[]
     */
    public function getDevices(): array
    {
        return $this->devices;
    }

    /**
     * Sets devices.
     *
     * @param OpenAPI\Server\Model\Device[] $devices
     *
     * @return $this
     */
    public function setDevices(array $devices)
    {
        $this->devices = $devices;

        return $this;
    }

    /**
     * Gets sample.
     *
     * @return OpenAPI\Server\Model\MeasurementSample|null
     */
    public function getSample(): ?MeasurementSample
    {
        return $this->sample;
    }

    /**
     * Sets sample.
     *
     * @param OpenAPI\Server\Model\MeasurementSample|null $sample
     *
     * @return $this
     */
    public function setSample(MeasurementSample $sample = null)
    {
        $this->sample = $sample;

        return $this;
    }

    /**
     * Gets errorCount.
     *
     * @return float
     */
    public function getErrorCount()
    {
        return $this->errorCount;
    }

    /**
     * Sets errorCount.
     *
     * @param float $errorCount  Sample Value
     *
     * @return $this
     */
    public function setErrorCount($errorCount)
    {
        $this->errorCount = $errorCount;

        return $this;
    }

    /**
     * Gets errors.
     *
     * @return string[]|null
     */
    public function getErrors(): ?array
    {
        return $this->errors;
    }

    /**
     * Sets errors.
     *
     * @param string[]|null $errors
     *
     * @return $this
     */
    public function setErrors(array $errors = null)
    {
        $this->errors = $errors;

        return $this;
    }
}


