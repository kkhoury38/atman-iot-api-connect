<?php
/**
 * DeviceEventWithRelations
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the DeviceEventWithRelations model.
 *
 * (Schema options: { includeRelations: true })
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class DeviceEventWithRelations 
{
        /**
     * Automatically generated ID
     *
     * @var float|null
     * @SerializedName("id")
     * @Assert\Type("float")
     * @Type("float")
     */
    protected $id;

    /**
     * ID of Device associated with Event
     *
     * @var float
     * @SerializedName("deviceId")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    protected $deviceId;

    /**
     * ID of Device associated with Event
     *
     * @var float
     * @SerializedName("channelId")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    protected $channelId;

    /**
     * ID of EventRule triggered
     *
     * @var float
     * @SerializedName("eventRuleId")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    protected $eventRuleId;

    /**
     * Event severity - Can be  LOW / MEDIUM / HIGH
     *
     * @var string
     * @SerializedName("severity")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $severity;

    /**
     * Event description
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $description;

    /**
     * Set to true if Event has been resolved
     *
     * @var bool
     * @SerializedName("resolved")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $resolved;

    /**
     * Set to true if Event has been resolved
     *
     * @var string
     * @SerializedName("viewedBy")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $viewedBy;

    /**
     * Event creation timestamp
     *
     * @var \DateTime
     * @SerializedName("timestamp")
     * @Assert\NotNull()
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $timestamp;

    /**
     * Event resolution timestamp
     *
     * @var \DateTime|null
     * @SerializedName("resolutionTimestamp")
     * @Assert\DateTime()
     * @Type("DateTime")
     */
    protected $resolutionTimestamp;

    /**
     * @var OpenAPI\Server\Model\DeviceWithRelations|null
     * @SerializedName("device")
     * @Assert\Type("OpenAPI\Server\Model\DeviceWithRelations")
     * @Type("OpenAPI\Server\Model\DeviceWithRelations")
     */
    protected $device;

    /**
     * @var OpenAPI\Server\Model\ChannelWithRelations|null
     * @SerializedName("channel")
     * @Assert\Type("OpenAPI\Server\Model\ChannelWithRelations")
     * @Type("OpenAPI\Server\Model\ChannelWithRelations")
     */
    protected $channel;

    /**
     * @var OpenAPI\Server\Model\EventRuleWithRelations|null
     * @SerializedName("eventRule")
     * @Assert\Type("OpenAPI\Server\Model\EventRuleWithRelations")
     * @Type("OpenAPI\Server\Model\EventRuleWithRelations")
     */
    protected $eventRule;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->deviceId = isset($data['deviceId']) ? $data['deviceId'] : null;
        $this->channelId = isset($data['channelId']) ? $data['channelId'] : null;
        $this->eventRuleId = isset($data['eventRuleId']) ? $data['eventRuleId'] : null;
        $this->severity = isset($data['severity']) ? $data['severity'] : null;
        $this->description = isset($data['description']) ? $data['description'] : null;
        $this->resolved = isset($data['resolved']) ? $data['resolved'] : null;
        $this->viewedBy = isset($data['viewedBy']) ? $data['viewedBy'] : null;
        $this->timestamp = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->resolutionTimestamp = isset($data['resolutionTimestamp']) ? $data['resolutionTimestamp'] : null;
        $this->device = isset($data['device']) ? $data['device'] : null;
        $this->channel = isset($data['channel']) ? $data['channel'] : null;
        $this->eventRule = isset($data['eventRule']) ? $data['eventRule'] : null;
    }

    /**
     * Gets id.
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param float|null $id  Automatically generated ID
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets deviceId.
     *
     * @return float
     */
    public function getDeviceId()
    {
        return $this->deviceId;
    }

    /**
     * Sets deviceId.
     *
     * @param float $deviceId  ID of Device associated with Event
     *
     * @return $this
     */
    public function setDeviceId($deviceId)
    {
        $this->deviceId = $deviceId;

        return $this;
    }

    /**
     * Gets channelId.
     *
     * @return float
     */
    public function getChannelId()
    {
        return $this->channelId;
    }

    /**
     * Sets channelId.
     *
     * @param float $channelId  ID of Device associated with Event
     *
     * @return $this
     */
    public function setChannelId($channelId)
    {
        $this->channelId = $channelId;

        return $this;
    }

    /**
     * Gets eventRuleId.
     *
     * @return float
     */
    public function getEventRuleId()
    {
        return $this->eventRuleId;
    }

    /**
     * Sets eventRuleId.
     *
     * @param float $eventRuleId  ID of EventRule triggered
     *
     * @return $this
     */
    public function setEventRuleId($eventRuleId)
    {
        $this->eventRuleId = $eventRuleId;

        return $this;
    }

    /**
     * Gets severity.
     *
     * @return string
     */
    public function getSeverity()
    {
        return $this->severity;
    }

    /**
     * Sets severity.
     *
     * @param string $severity  Event severity - Can be  LOW / MEDIUM / HIGH
     *
     * @return $this
     */
    public function setSeverity($severity)
    {
        $this->severity = $severity;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description  Event description
     *
     * @return $this
     */
    public function setDescription($description = null)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets resolved.
     *
     * @return bool
     */
    public function isResolved()
    {
        return $this->resolved;
    }

    /**
     * Sets resolved.
     *
     * @param bool $resolved  Set to true if Event has been resolved
     *
     * @return $this
     */
    public function setResolved($resolved)
    {
        $this->resolved = $resolved;

        return $this;
    }

    /**
     * Gets viewedBy.
     *
     * @return string
     */
    public function getViewedBy()
    {
        return $this->viewedBy;
    }

    /**
     * Sets viewedBy.
     *
     * @param string $viewedBy  Set to true if Event has been resolved
     *
     * @return $this
     */
    public function setViewedBy($viewedBy)
    {
        $this->viewedBy = $viewedBy;

        return $this;
    }

    /**
     * Gets timestamp.
     *
     * @return \DateTime
     */
    public function getTimestamp(): \DateTime
    {
        return $this->timestamp;
    }

    /**
     * Sets timestamp.
     *
     * @param \DateTime $timestamp  Event creation timestamp
     *
     * @return $this
     */
    public function setTimestamp(\DateTime $timestamp)
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    /**
     * Gets resolutionTimestamp.
     *
     * @return \DateTime|null
     */
    public function getResolutionTimestamp(): ?\DateTime
    {
        return $this->resolutionTimestamp;
    }

    /**
     * Sets resolutionTimestamp.
     *
     * @param \DateTime|null $resolutionTimestamp  Event resolution timestamp
     *
     * @return $this
     */
    public function setResolutionTimestamp(\DateTime $resolutionTimestamp = null)
    {
        $this->resolutionTimestamp = $resolutionTimestamp;

        return $this;
    }

    /**
     * Gets device.
     *
     * @return OpenAPI\Server\Model\DeviceWithRelations|null
     */
    public function getDevice(): ?DeviceWithRelations
    {
        return $this->device;
    }

    /**
     * Sets device.
     *
     * @param OpenAPI\Server\Model\DeviceWithRelations|null $device
     *
     * @return $this
     */
    public function setDevice(DeviceWithRelations $device = null)
    {
        $this->device = $device;

        return $this;
    }

    /**
     * Gets channel.
     *
     * @return OpenAPI\Server\Model\ChannelWithRelations|null
     */
    public function getChannel(): ?ChannelWithRelations
    {
        return $this->channel;
    }

    /**
     * Sets channel.
     *
     * @param OpenAPI\Server\Model\ChannelWithRelations|null $channel
     *
     * @return $this
     */
    public function setChannel(ChannelWithRelations $channel = null)
    {
        $this->channel = $channel;

        return $this;
    }

    /**
     * Gets eventRule.
     *
     * @return OpenAPI\Server\Model\EventRuleWithRelations|null
     */
    public function getEventRule(): ?EventRuleWithRelations
    {
        return $this->eventRule;
    }

    /**
     * Sets eventRule.
     *
     * @param OpenAPI\Server\Model\EventRuleWithRelations|null $eventRule
     *
     * @return $this
     */
    public function setEventRule(EventRuleWithRelations $eventRule = null)
    {
        $this->eventRule = $eventRule;

        return $this;
    }
}


