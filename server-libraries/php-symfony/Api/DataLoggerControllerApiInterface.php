<?php
/**
 * DataLoggerControllerApiInterface
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\DataLogger;
use OpenAPI\Server\Model\DataLoggerExcludingIdAuthTokenConfigUserId;
use OpenAPI\Server\Model\RequestDataLoggerSetupCsv2ExcludingFileFormat;
use OpenAPI\Server\Model\RequestDataLoggerSetupXml2ExcludingFileFormat;
use OpenAPI\Server\Model\ResponseDataLoggerSetupStep2;

/**
 * DataLoggerControllerApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface DataLoggerControllerApiInterface
{

    /**
     * Sets authentication method bearerAuth
     *
     * @param string $value Value of the bearerAuth authentication method.
     *
     * @return void
     */
    public function setbearerAuth($value);

    /**
     * Operation dataLoggerControllerCreate
     *
     * @param  OpenAPI\Server\Model\DataLoggerExcludingIdAuthTokenConfigUserId $dataLoggerExcludingIdAuthTokenConfigUserId   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\DataLogger
     *
     */
    public function dataLoggerControllerCreate(DataLoggerExcludingIdAuthTokenConfigUserId $dataLoggerExcludingIdAuthTokenConfigUserId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerDeleteById
     *
     * @param  float $id   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function dataLoggerControllerDeleteById($id, &$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerFind
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\DataLogger[]
     *
     */
    public function dataLoggerControllerFind(&$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerSetupFromFtp1
     *
     * @param  float $id   (required)
     * @param  string $dataLoggerToken   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function dataLoggerControllerSetupFromFtp1($id, $dataLoggerToken, &$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerSetupFromFtp3
     *
     * @param  float $id   (required)
     * @param  OpenAPI\Server\Model\ResponseDataLoggerSetupStep2 $responseDataLoggerSetupStep2   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function dataLoggerControllerSetupFromFtp3($id, ResponseDataLoggerSetupStep2 $responseDataLoggerSetupStep2 = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerSetupFromFtpCsv2
     *
     * @param  float $id   (required)
     * @param  OpenAPI\Server\Model\RequestDataLoggerSetupCsv2ExcludingFileFormat $requestDataLoggerSetupCsv2ExcludingFileFormat   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\ResponseDataLoggerSetupStep2
     *
     */
    public function dataLoggerControllerSetupFromFtpCsv2($id, RequestDataLoggerSetupCsv2ExcludingFileFormat $requestDataLoggerSetupCsv2ExcludingFileFormat = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerSetupFromFtpXml2
     *
     * @param  float $id   (required)
     * @param  OpenAPI\Server\Model\RequestDataLoggerSetupXml2ExcludingFileFormat $requestDataLoggerSetupXml2ExcludingFileFormat   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\ResponseDataLoggerSetupStep2
     *
     */
    public function dataLoggerControllerSetupFromFtpXml2($id, RequestDataLoggerSetupXml2ExcludingFileFormat $requestDataLoggerSetupXml2ExcludingFileFormat = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerUploadDataFromCsv
     *
     * @param  float $id   (required)
     * @param  string $dataLoggerToken   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function dataLoggerControllerUploadDataFromCsv($id, $dataLoggerToken, &$responseCode, array &$responseHeaders);

    /**
     * Operation dataLoggerControllerUploadDataFromXml
     *
     * @param  float $id   (required)
     * @param  string $dataLoggerToken   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function dataLoggerControllerUploadDataFromXml($id, $dataLoggerToken, &$responseCode, array &$responseHeaders);
}
