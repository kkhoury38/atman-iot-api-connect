<?php
/**
 * DeviceControllerApiInterface
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\Channel;
use OpenAPI\Server\Model\ChannelExcludingIdDeviceId;
use OpenAPI\Server\Model\ChannelType;
use OpenAPI\Server\Model\Device;
use OpenAPI\Server\Model\DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId;
use OpenAPI\Server\Model\DeviceExcludingIdDataLoggerId;
use OpenAPI\Server\Model\DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId;
use OpenAPI\Server\Model\DeviceWithType;

/**
 * DeviceControllerApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface DeviceControllerApiInterface
{

    /**
     * Sets authentication method bearerAuth
     *
     * @param string $value Value of the bearerAuth authentication method.
     *
     * @return void
     */
    public function setbearerAuth($value);

    /**
     * Operation deviceControllerCreate
     *
     * @param  float $dataLoggerId   (required)
     * @param  OpenAPI\Server\Model\DeviceExcludingIdDataLoggerId $deviceExcludingIdDataLoggerId   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\Device
     *
     */
    public function deviceControllerCreate($dataLoggerId, DeviceExcludingIdDataLoggerId $deviceExcludingIdDataLoggerId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerCreateChannel
     *
     * @param  float $deviceId   (required)
     * @param  OpenAPI\Server\Model\ChannelExcludingIdDeviceId $channelExcludingIdDeviceId   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\Channel
     *
     */
    public function deviceControllerCreateChannel($deviceId, ChannelExcludingIdDeviceId $channelExcludingIdDeviceId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerDisableChannelMonitoring
     *
     * @param  float $deviceId   (required)
     * @param  float $channelId   (required)
     * @param  bool $all   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function deviceControllerDisableChannelMonitoring($deviceId, $channelId, $all, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerEnableChannelMonitoring
     *
     * @param  float $deviceId   (required)
     * @param  float $channelId   (required)
     * @param  bool $all   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function deviceControllerEnableChannelMonitoring($deviceId, $channelId, $all, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerFind
     *
     * @param  float $dataLoggerId   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\Device[]
     *
     */
    public function deviceControllerFind($dataLoggerId, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerFindChannelTypes
     *
     * @param  float $deviceId   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\ChannelType[]
     *
     */
    public function deviceControllerFindChannelTypes($deviceId, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerFindChannels
     *
     * @param  float $deviceId   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\Channel[]
     *
     */
    public function deviceControllerFindChannels($deviceId, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerGetDevicesWithType
     *
     * @param  OpenAPI\Server\Model\DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId[] $deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\DeviceWithType[]
     *
     */
    public function deviceControllerGetDevicesWithType(array $deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation deviceControllerUpdateById
     *
     * @param  float $id   (required)
     * @param  OpenAPI\Server\Model\DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId $deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function deviceControllerUpdateById($id, DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId $deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId = null, &$responseCode, array &$responseHeaders);
}
