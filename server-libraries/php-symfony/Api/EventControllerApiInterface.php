<?php
/**
 * EventControllerApiInterface
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\Event;
use OpenAPI\Server\Model\EventExcludingIdResolvedTimestampResolutionTimestamp;
use OpenAPI\Server\Model\EventRelatedDevice;
use OpenAPI\Server\Model\EventRelatedDeviceExcludingId;
use OpenAPI\Server\Model\EventRule;
use OpenAPI\Server\Model\EventRuleSubscription;
use OpenAPI\Server\Model\EventRuleSubscriptionExcludingIdLastExecTimestamp;
use OpenAPI\Server\Model\RequestEventCreateRule;
use OpenAPI\Server\Model\ResponseEventAssetEvents;

/**
 * EventControllerApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface EventControllerApiInterface
{

    /**
     * Sets authentication method bearerAuth
     *
     * @param string $value Value of the bearerAuth authentication method.
     *
     * @return void
     */
    public function setbearerAuth($value);

    /**
     * Operation eventControllerCreateNow
     *
     * @param  OpenAPI\Server\Model\EventExcludingIdResolvedTimestampResolutionTimestamp $eventExcludingIdResolvedTimestampResolutionTimestamp   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\Event
     *
     */
    public function eventControllerCreateNow(EventExcludingIdResolvedTimestampResolutionTimestamp $eventExcludingIdResolvedTimestampResolutionTimestamp = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation eventControllerCreateRelatedDev
     *
     * @param  OpenAPI\Server\Model\EventRelatedDeviceExcludingId $eventRelatedDeviceExcludingId   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\EventRelatedDevice
     *
     */
    public function eventControllerCreateRelatedDev(EventRelatedDeviceExcludingId $eventRelatedDeviceExcludingId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation eventControllerCreateRule
     *
     * @param  OpenAPI\Server\Model\RequestEventCreateRule $requestEventCreateRule   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\EventRule
     *
     */
    public function eventControllerCreateRule(RequestEventCreateRule $requestEventCreateRule = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation eventControllerCreateRuleSubscription
     *
     * @param  OpenAPI\Server\Model\EventRuleSubscriptionExcludingIdLastExecTimestamp $eventRuleSubscriptionExcludingIdLastExecTimestamp   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\EventRuleSubscription
     *
     */
    public function eventControllerCreateRuleSubscription(EventRuleSubscriptionExcludingIdLastExecTimestamp $eventRuleSubscriptionExcludingIdLastExecTimestamp = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation eventControllerFind
     *
     * @param  float $assetId   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\ResponseEventAssetEvents[]
     *
     */
    public function eventControllerFind($assetId, &$responseCode, array &$responseHeaders);

    /**
     * Operation eventControllerFindUnresolved
     *
     * @param  float $assetId   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OpenAPI\Server\Model\ResponseEventAssetEvents[]
     *
     */
    public function eventControllerFindUnresolved($assetId, &$responseCode, array &$responseHeaders);

    /**
     * Operation eventControllerProcessSubscriptions
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function eventControllerProcessSubscriptions(&$responseCode, array &$responseHeaders);

    /**
     * Operation eventControllerUpdateById
     *
     * @param  float $id   (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return void
     *
     */
    public function eventControllerUpdateById($id, &$responseCode, array &$responseHeaders);
}
