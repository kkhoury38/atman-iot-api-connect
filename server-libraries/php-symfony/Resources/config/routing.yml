# NOTE: This file is auto generated by the openapi generator program.
# https://github.com/openapitools/openapi-generator
# Do not edit the class manually.

# assetController
open_api_server_assetController_assetcontrollercreate:
    path:     /asset
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.assetController:assetControllerCreateAction

open_api_server_assetController_assetcontrollerdeletebyid:
    path:     /asset/{id}
    methods:  [DELETE]
    defaults:
        _controller: open_api_server.controller.assetController:assetControllerDeleteByIdAction
    requirements:

open_api_server_assetController_assetcontrollerfind:
    path:     /assets/{assetGroupId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.assetController:assetControllerFindAction
    requirements:

open_api_server_assetController_assetcontrollerfindbyname:
    path:     /asset/by-name/{assetName}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.assetController:assetControllerFindByNameAction
    requirements:
        assetName: '[a-z0-9]+'

open_api_server_assetController_assetcontrollerfindbyuserid:
    path:     /assets/by-user/{userId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.assetController:assetControllerFindByUserIdAction
    requirements:

open_api_server_assetController_assetcontrollerupdatebyid:
    path:     /asset/{id}
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.assetController:assetControllerUpdateByIdAction
    requirements:

# assetGroupController
open_api_server_assetGroupController_assetgroupcontrollercreateassetgroup:
    path:     /asset-group/user
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.assetGroupController:assetGroupControllerCreateAssetGroupAction

open_api_server_assetGroupController_assetgroupcontrollerdeletebyid:
    path:     /asset-group/{id}
    methods:  [DELETE]
    defaults:
        _controller: open_api_server.controller.assetGroupController:assetGroupControllerDeleteByIdAction
    requirements:

open_api_server_assetGroupController_assetgroupcontrollerfinduserassetgroups:
    path:     /asset-groups/user
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.assetGroupController:assetGroupControllerFindUserAssetGroupsAction

open_api_server_assetGroupController_assetgroupcontrollerupdatebyid:
    path:     /asset-group/{id}
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.assetGroupController:assetGroupControllerUpdateByIdAction
    requirements:

# dashboardElementController
open_api_server_dashboardElementController_dashboardelementcontrollercreate:
    path:     /dashboard-element
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dashboardElementController:dashboardElementControllerCreateAction

open_api_server_dashboardElementController_dashboardelementcontrollerdeletebyid:
    path:     /dashboard-element/{id}
    methods:  [DELETE]
    defaults:
        _controller: open_api_server.controller.dashboardElementController:dashboardElementControllerDeleteByIdAction
    requirements:

open_api_server_dashboardElementController_dashboardelementcontrollerfindbyuseridassetidlocation:
    path:     /dashboard-elements/asset-id/{assetId}/user-id/{userId}/location/{location}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.dashboardElementController:dashboardElementControllerFindByUserIdAssetIdLocationAction
    requirements:
        location: '[a-z0-9]+'

open_api_server_dashboardElementController_dashboardelementcontrollermoveelementdown:
    path:     /dashboard-element/{id}/move-down
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.dashboardElementController:dashboardElementControllerMoveElementDownAction
    requirements:

open_api_server_dashboardElementController_dashboardelementcontrollermoveelementup:
    path:     /dashboard-element/{id}/move-up
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.dashboardElementController:dashboardElementControllerMoveElementUpAction
    requirements:

# dataLoggerController
open_api_server_dataLoggerController_dataloggercontrollercreate:
    path:     /data-logger
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerCreateAction

open_api_server_dataLoggerController_dataloggercontrollerdeletebyid:
    path:     /data-logger/{id}
    methods:  [DELETE]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerDeleteByIdAction
    requirements:

open_api_server_dataLoggerController_dataloggercontrollerfind:
    path:     /data-loggers
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerFindAction

open_api_server_dataLoggerController_dataloggercontrollersetupfromftp1:
    path:     /data-logger/setup-ftp/step1/{id}/{dataLoggerToken}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerSetupFromFtp1Action
    requirements:
        dataLoggerToken: '[a-z0-9]+'

open_api_server_dataLoggerController_dataloggercontrollersetupfromftp3:
    path:     /data-logger/setup-ftp/step3/{id}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerSetupFromFtp3Action
    requirements:

open_api_server_dataLoggerController_dataloggercontrollersetupfromftpcsv2:
    path:     /data-logger/setup-ftp/step2/csv/{id}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerSetupFromFtpCsv2Action
    requirements:

open_api_server_dataLoggerController_dataloggercontrollersetupfromftpxml2:
    path:     /data-logger/setup-ftp/step2/xml/{id}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerSetupFromFtpXml2Action
    requirements:

open_api_server_dataLoggerController_dataloggercontrolleruploaddatafromcsv:
    path:     /data-logger/data-from-csv/{id}/{dataLoggerToken}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerUploadDataFromCsvAction
    requirements:
        dataLoggerToken: '[a-z0-9]+'

open_api_server_dataLoggerController_dataloggercontrolleruploaddatafromxml:
    path:     /data-logger/data-from-xml/{id}/{dataLoggerToken}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.dataLoggerController:dataLoggerControllerUploadDataFromXmlAction
    requirements:
        dataLoggerToken: '[a-z0-9]+'

# deviceChannelController
open_api_server_deviceChannelController_devicechannelcontrollerfindbyperiod:
    path:     /device-channel/data-by-period/{deviceId}/{channelId}/from/{fromTS}/to/{toTs}/page/{page}/count/{count}/groupBy/{groupBy}/operation/{operation}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceChannelController:deviceChannelControllerFindByPeriodAction
    requirements:
        fromTS: '[a-z0-9]+'
        toTs: '[a-z0-9]+'
        groupBy: '[a-z0-9]+'
        operation: '[a-z0-9]+'

open_api_server_deviceChannelController_devicechannelcontrollerfinddevicealllastrecordedts:
    path:     /device-channel/last-timestamp-in-device/{deviceId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceChannelController:deviceChannelControllerFindDeviceAllLastRecordedTSAction
    requirements:

open_api_server_deviceChannelController_devicechannelcontrollerfinddevicealllastts:
    path:     /device-channel/data-last-timestamp/all-channels/{deviceId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceChannelController:deviceChannelControllerFindDeviceAllLastTSAction
    requirements:

open_api_server_deviceChannelController_devicechannelcontrollerfinddevicechannellastts:
    path:     /device-channel/data-last-timestamp/{deviceId}/{channelId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceChannelController:deviceChannelControllerFindDeviceChannelLastTSAction
    requirements:

open_api_server_deviceChannelController_devicechannelcontrollerfinddevicechannellasttssnchname:
    path:     /device-channel/data-last-timestamp-by-name/{serialNo}/{channelName}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.deviceChannelController:deviceChannelControllerFindDeviceChannelLastTSSnChNameAction
    requirements:
        serialNo: '[a-z0-9]+'
        channelName: '[a-z0-9]+'

# deviceController
open_api_server_deviceController_devicecontrollercreate:
    path:     /device/{dataLoggerId}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerCreateAction
    requirements:

open_api_server_deviceController_devicecontrollercreatechannel:
    path:     /device/{deviceId}/channel
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerCreateChannelAction
    requirements:

open_api_server_deviceController_devicecontrollerdisablechannelmonitoring:
    path:     /device/{deviceId}/channel/{channelId}/disable-monitoring/all/{all}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerDisableChannelMonitoringAction
    requirements:
        all: 'true|false'

open_api_server_deviceController_devicecontrollerenablechannelmonitoring:
    path:     /device/{deviceId}/channel/{channelId}/enable-monitoring/all/{all}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerEnableChannelMonitoringAction
    requirements:
        all: 'true|false'

open_api_server_deviceController_devicecontrollerfind:
    path:     /devices/{dataLoggerId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerFindAction
    requirements:

open_api_server_deviceController_devicecontrollerfindchanneltypes:
    path:     /device/{deviceId}/channelTypes
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerFindChannelTypesAction
    requirements:

open_api_server_deviceController_devicecontrollerfindchannels:
    path:     /device/{deviceId}/channels
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerFindChannelsAction
    requirements:

open_api_server_deviceController_devicecontrollergetdeviceswithtype:
    path:     /devices/with-device-type
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerGetDevicesWithTypeAction

open_api_server_deviceController_devicecontrollerupdatebyid:
    path:     /device/{id}
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.deviceController:deviceControllerUpdateByIdAction
    requirements:

# deviceEventController
open_api_server_deviceEventController_deviceeventcontrollercountnotviewed:
    path:     /device-events/by-asset/count-not-viewed/{assetId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceEventController:deviceEventControllerCountNotViewedAction
    requirements:

open_api_server_deviceEventController_deviceeventcontrollerfind:
    path:     /device-events/assetId/{assetId}/page/{page}/count/{count}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceEventController:deviceEventControllerFindAction
    requirements:

open_api_server_deviceEventController_deviceeventcontrollerupdateviewedby:
    path:     /device-events/mark-read/{eventId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceEventController:deviceEventControllerUpdateViewedByAction
    requirements:

# deviceGroupMembershipController
open_api_server_deviceGroupMembershipController_devicegroupmembershipcontrollercreate:
    path:     /device-group-memberships
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.deviceGroupMembershipController:deviceGroupMembershipControllerCreateAction

open_api_server_deviceGroupMembershipController_devicegroupmembershipcontrollerdeletebyid:
    path:     /device-group-memberships/{id}
    methods:  [DELETE]
    defaults:
        _controller: open_api_server.controller.deviceGroupMembershipController:deviceGroupMembershipControllerDeleteByIdAction
    requirements:

open_api_server_deviceGroupMembershipController_devicegroupmembershipcontrollerfindbyassetid:
    path:     /device-group-memberships/by-asset/{assetId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceGroupMembershipController:deviceGroupMembershipControllerFindByAssetIdAction
    requirements:

open_api_server_deviceGroupMembershipController_devicegroupmembershipcontrollerfindbydeviceid:
    path:     /device-group-memberships/by-device/{deviceId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceGroupMembershipController:deviceGroupMembershipControllerFindByDeviceIdAction
    requirements:

# deviceTypeChannelTypeController
open_api_server_deviceTypeChannelTypeController_devicetypechanneltypecontrollercount:
    path:     /device-type-channel-type/{deviceTypeId}/count
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceTypeChannelTypeController:deviceTypeChannelTypeControllerCountAction
    requirements:

open_api_server_deviceTypeChannelTypeController_devicetypechanneltypecontrollercreate:
    path:     /device-type-channel-type/{deviceTypeId}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.deviceTypeChannelTypeController:deviceTypeChannelTypeControllerCreateAction
    requirements:

open_api_server_deviceTypeChannelTypeController_devicetypechanneltypecontrollerdevicetypechannelcategories:
    path:     /device-type-channel-type/{deviceTypeId}/channel-categories
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceTypeChannelTypeController:deviceTypeChannelTypeControllerDeviceTypeChannelCategoriesAction
    requirements:

open_api_server_deviceTypeChannelTypeController_devicetypechanneltypecontrollerfind:
    path:     /device-type-channel-type/{deviceTypeId}/page/{page}/count/{count}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceTypeChannelTypeController:deviceTypeChannelTypeControllerFindAction
    requirements:

open_api_server_deviceTypeChannelTypeController_devicetypechanneltypecontrollerupdatebyid:
    path:     /device-type-channel-type/channel-type/{channelTypeId}
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.deviceTypeChannelTypeController:deviceTypeChannelTypeControllerUpdateByIdAction
    requirements:

# deviceTypeController
open_api_server_deviceTypeController_devicetypecontrollercount:
    path:     /device-type/count
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceTypeController:deviceTypeControllerCountAction

open_api_server_deviceTypeController_devicetypecontrollercreate:
    path:     /device-type
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.deviceTypeController:deviceTypeControllerCreateAction

open_api_server_deviceTypeController_devicetypecontrollerfind:
    path:     /device-type/get-all/page/{page}/count/{count}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceTypeController:deviceTypeControllerFindAction
    requirements:

open_api_server_deviceTypeController_devicetypecontrollergetassetdevicecategories:
    path:     /device-type/device-categories-in-asset/{assetId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.deviceTypeController:deviceTypeControllerGetAssetDeviceCategoriesAction
    requirements:

open_api_server_deviceTypeController_devicetypecontrollerupdatebyid:
    path:     /device-type/{id}
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.deviceTypeController:deviceTypeControllerUpdateByIdAction
    requirements:

# eventController
open_api_server_eventController_eventcontrollercreatenow:
    path:     /event
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerCreateNowAction

open_api_server_eventController_eventcontrollercreaterelateddev:
    path:     /event/related-device
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerCreateRelatedDevAction

open_api_server_eventController_eventcontrollercreaterule:
    path:     /event/rule
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerCreateRuleAction

open_api_server_eventController_eventcontrollercreaterulesubscription:
    path:     /event/rule/subscription
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerCreateRuleSubscriptionAction

open_api_server_eventController_eventcontrollerfind:
    path:     /events/all/{assetId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerFindAction
    requirements:

open_api_server_eventController_eventcontrollerfindunresolved:
    path:     /events/unresolved/{assetId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerFindUnresolvedAction
    requirements:

open_api_server_eventController_eventcontrollerprocesssubscriptions:
    path:     /event/process
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerProcessSubscriptionsAction

open_api_server_eventController_eventcontrollerupdatebyid:
    path:     /event/resolve/{id}
    methods:  [PATCH]
    defaults:
        _controller: open_api_server.controller.eventController:eventControllerUpdateByIdAction
    requirements:

# pingController
open_api_server_pingController_pingcontrollerping:
    path:     /ping
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.pingController:pingControllerPingAction

# schedulerController
open_api_server_schedulerController_schedulercontrollerprocessevents:
    path:     /scheduler/process/events/{attempt}/{serverKey}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.schedulerController:schedulerControllerProcessEventsAction
    requirements:
        serverKey: '[a-z0-9]+'

open_api_server_schedulerController_schedulercontrollerprocessftprejected:
    path:     /scheduler/process/ftp-rejected/{serverKey}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.schedulerController:schedulerControllerProcessFtpRejectedAction
    requirements:
        serverKey: '[a-z0-9]+'

# userController
open_api_server_userController_usercontrollercreate:
    path:     /user/register/{referenceCode}
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.userController:userControllerCreateAction
    requirements:
        referenceCode: '[a-z0-9]+'

open_api_server_userController_usercontrollercreatevirtual:
    path:     /user/register/virtual
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.userController:userControllerCreateVirtualAction

open_api_server_userController_usercontrollerdeletevirtualuserbyid:
    path:     /users/virtualUser/{id}
    methods:  [DELETE]
    defaults:
        _controller: open_api_server.controller.userController:userControllerDeleteVirtualUserByIdAction
    requirements:

open_api_server_userController_usercontrollergetvirtualusers:
    path:     /user/getVirtualUsers
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.userController:userControllerGetVirtualUsersAction

open_api_server_userController_usercontrollerlogin:
    path:     /user/login
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.userController:userControllerLoginAction

# userSubscriptionController
open_api_server_userSubscriptionController_usersubscriptioncontrollercreate:
    path:     /user-subscriptions/paypal/callback
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.userSubscriptionController:userSubscriptionControllerCreateAction

open_api_server_userSubscriptionController_usersubscriptioncontrollercreateusersubscriptionbysubid:
    path:     /user-subscription/get-new/{subscriptionId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.userSubscriptionController:userSubscriptionControllerCreateUserSubscriptionBySubIdAction
    requirements:

open_api_server_userSubscriptionController_usersubscriptioncontrollerfindsubscriptionsbycategory:
    path:     /user-subscription/subscriptions/{product}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.userSubscriptionController:userSubscriptionControllerFindSubscriptionsByCategoryAction
    requirements:
        product: '[a-z0-9]+'

open_api_server_userSubscriptionController_usersubscriptioncontrollergetbyrefferencecode:
    path:     /user-subscription/get-by-reference-code/{referenceCode}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.userSubscriptionController:userSubscriptionControllerGetByRefferenceCodeAction
    requirements:
        referenceCode: '[a-z0-9]+'

open_api_server_userSubscriptionController_usersubscriptioncontrollerverifycode:
    path:     /user-subscriptions/verify-reference-code
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.userSubscriptionController:userSubscriptionControllerVerifyCodeAction

# virtualAccessController
open_api_server_virtualAccessController_virtualaccesscontrollercreateaccessbygroup:
    path:     /virtual-access/by-asset-group
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.virtualAccessController:virtualAccessControllerCreateAccessByGroupAction

open_api_server_virtualAccessController_virtualaccesscontrollercreateaccessbyright:
    path:     /virtual-access/by-asset
    methods:  [POST]
    defaults:
        _controller: open_api_server.controller.virtualAccessController:virtualAccessControllerCreateAccessByRightAction

open_api_server_virtualAccessController_virtualaccesscontrollerdeletebyid:
    path:     /virtual-access/{id}
    methods:  [DELETE]
    defaults:
        _controller: open_api_server.controller.virtualAccessController:virtualAccessControllerDeleteByIdAction
    requirements:

open_api_server_virtualAccessController_virtualaccesscontrollerfindbyuserid:
    path:     /virtual-access/by-userId/{userId}
    methods:  [GET]
    defaults:
        _controller: open_api_server.controller.virtualAccessController:virtualAccessControllerFindByUserIdAction
    requirements:

