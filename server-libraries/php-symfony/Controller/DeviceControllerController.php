<?php

/**
 * DeviceControllerController
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\DeviceControllerApiInterface;
use OpenAPI\Server\Model\Channel;
use OpenAPI\Server\Model\ChannelExcludingIdDeviceId;
use OpenAPI\Server\Model\ChannelType;
use OpenAPI\Server\Model\Device;
use OpenAPI\Server\Model\DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId;
use OpenAPI\Server\Model\DeviceExcludingIdDataLoggerId;
use OpenAPI\Server\Model\DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId;
use OpenAPI\Server\Model\DeviceWithType;

/**
 * DeviceControllerController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class DeviceControllerController extends Controller
{

    /**
     * Operation deviceControllerCreate
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerCreateAction(Request $request, $dataLoggerId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $deviceExcludingIdDataLoggerId = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $dataLoggerId = $this->deserialize($dataLoggerId, 'float', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $deviceExcludingIdDataLoggerId = $this->deserialize($deviceExcludingIdDataLoggerId, 'OpenAPI\Server\Model\DeviceExcludingIdDataLoggerId', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($dataLoggerId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\DeviceExcludingIdDataLoggerId");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($deviceExcludingIdDataLoggerId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->deviceControllerCreate($dataLoggerId, $deviceExcludingIdDataLoggerId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns created Device model instance';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Returns created Device model instance';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerCreateChannel
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerCreateChannelAction(Request $request, $deviceId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $channelExcludingIdDeviceId = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $deviceId = $this->deserialize($deviceId, 'float', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $channelExcludingIdDeviceId = $this->deserialize($channelExcludingIdDeviceId, 'OpenAPI\Server\Model\ChannelExcludingIdDeviceId', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($deviceId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ChannelExcludingIdDeviceId");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($channelExcludingIdDeviceId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->deviceControllerCreateChannel($deviceId, $channelExcludingIdDeviceId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns created Channel model instance in Device with provided id';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Returns created Channel model instance in Device with provided id';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerDisableChannelMonitoring
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerDisableChannelMonitoringAction(Request $request, $deviceId, $channelId, $all)
    {
        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $deviceId = $this->deserialize($deviceId, 'float', 'string');
            $channelId = $this->deserialize($channelId, 'float', 'string');
            $all = $this->deserialize($all, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($deviceId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($channelId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($all, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->deviceControllerDisableChannelMonitoring($deviceId, $channelId, $all, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Monitoring disabled';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'Monitoring disabled';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerEnableChannelMonitoring
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerEnableChannelMonitoringAction(Request $request, $deviceId, $channelId, $all)
    {
        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $deviceId = $this->deserialize($deviceId, 'float', 'string');
            $channelId = $this->deserialize($channelId, 'float', 'string');
            $all = $this->deserialize($all, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($deviceId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($channelId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($all, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->deviceControllerEnableChannelMonitoring($deviceId, $channelId, $all, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Monitoring enabled';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'Monitoring enabled';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerFind
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerFindAction(Request $request, $dataLoggerId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $dataLoggerId = $this->deserialize($dataLoggerId, 'float', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($dataLoggerId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->deviceControllerFind($dataLoggerId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns Array of Device model in DataLogger with provided id';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Returns Array of Device model in DataLogger with provided id';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerFindChannelTypes
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerFindChannelTypesAction(Request $request, $deviceId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $deviceId = $this->deserialize($deviceId, 'float', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($deviceId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->deviceControllerFindChannelTypes($deviceId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns Array of ChannelType model instances in Device with provided id';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Returns Array of ChannelType model instances in Device with provided id';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerFindChannels
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerFindChannelsAction(Request $request, $deviceId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $deviceId = $this->deserialize($deviceId, 'float', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($deviceId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->deviceControllerFindChannels($deviceId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns Array of Channel model instances in Device with provided id';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Returns Array of Channel model instances in Device with provided id';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerGetDevicesWithType
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerGetDevicesWithTypeAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentType());
            $deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId = $this->deserialize($deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId, 'array<OpenAPI\Server\Model\DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId>', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId"),
            new Assert\Valid(),
        ]);
        $response = $this->validate($deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->deviceControllerGetDevicesWithType($deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'DeviceType belonging to Device';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'DeviceType belonging to Device';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 404:
                    $message = 'Device Not Found';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation deviceControllerUpdateById
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deviceControllerUpdateByIdAction(Request $request, $id)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId = $this->deserialize($deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId, 'OpenAPI\Server\Model\DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->deviceControllerUpdateById($id, $deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Device PATCH success';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'Device PATCH success';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return DeviceControllerApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('deviceController');
    }
}
