<?php

/**
 * DataLoggerControllerController
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\DataLoggerControllerApiInterface;
use OpenAPI\Server\Model\DataLogger;
use OpenAPI\Server\Model\DataLoggerExcludingIdAuthTokenConfigUserId;
use OpenAPI\Server\Model\RequestDataLoggerSetupCsv2ExcludingFileFormat;
use OpenAPI\Server\Model\RequestDataLoggerSetupXml2ExcludingFileFormat;
use OpenAPI\Server\Model\ResponseDataLoggerSetupStep2;

/**
 * DataLoggerControllerController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class DataLoggerControllerController extends Controller
{

    /**
     * Operation dataLoggerControllerCreate
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerCreateAction(Request $request)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $dataLoggerExcludingIdAuthTokenConfigUserId = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $inputFormat = $request->getMimeType($request->getContentType());
            $dataLoggerExcludingIdAuthTokenConfigUserId = $this->deserialize($dataLoggerExcludingIdAuthTokenConfigUserId, 'OpenAPI\Server\Model\DataLoggerExcludingIdAuthTokenConfigUserId', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\DataLoggerExcludingIdAuthTokenConfigUserId");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($dataLoggerExcludingIdAuthTokenConfigUserId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerCreate($dataLoggerExcludingIdAuthTokenConfigUserId, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns created DataLogger model instance';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Returns created DataLogger model instance';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerDeleteById
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerDeleteByIdAction(Request $request, $id)
    {
        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerDeleteById($id, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'DataLogger model instance deletion verification';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'DataLogger model instance deletion verification';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerFind
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerFindAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Validate the input values


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerFind($responseCode, $responseHeaders);

            // Find default response message
            $message = 'Returns Array of DataLogger model instances';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Returns Array of DataLogger model instances';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerSetupFromFtp1
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerSetupFromFtp1Action(Request $request, $id, $dataLoggerToken)
    {
        // Handle authentication

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
            $dataLoggerToken = $this->deserialize($dataLoggerToken, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($dataLoggerToken, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerSetupFromFtp1($id, $dataLoggerToken, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'File upload verification';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'File upload verification';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerSetupFromFtp3
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerSetupFromFtp3Action(Request $request, $id)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $responseDataLoggerSetupStep2 = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $responseDataLoggerSetupStep2 = $this->deserialize($responseDataLoggerSetupStep2, 'OpenAPI\Server\Model\ResponseDataLoggerSetupStep2', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ResponseDataLoggerSetupStep2");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($responseDataLoggerSetupStep2, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerSetupFromFtp3($id, $responseDataLoggerSetupStep2, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Data logger devices initiation verification';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'Data logger devices initiation verification';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerSetupFromFtpCsv2
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerSetupFromFtpCsv2Action(Request $request, $id)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $requestDataLoggerSetupCsv2ExcludingFileFormat = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestDataLoggerSetupCsv2ExcludingFileFormat = $this->deserialize($requestDataLoggerSetupCsv2ExcludingFileFormat, 'OpenAPI\Server\Model\RequestDataLoggerSetupCsv2ExcludingFileFormat', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\RequestDataLoggerSetupCsv2ExcludingFileFormat");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestDataLoggerSetupCsv2ExcludingFileFormat, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerSetupFromFtpCsv2($id, $requestDataLoggerSetupCsv2ExcludingFileFormat, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Data logger configuration file';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Data logger configuration file';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerSetupFromFtpXml2
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerSetupFromFtpXml2Action(Request $request, $id)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'bearerAuth' required
        // HTTP basic authentication required
        $securitybearerAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $requestDataLoggerSetupXml2ExcludingFileFormat = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
            $inputFormat = $request->getMimeType($request->getContentType());
            $requestDataLoggerSetupXml2ExcludingFileFormat = $this->deserialize($requestDataLoggerSetupXml2ExcludingFileFormat, 'OpenAPI\Server\Model\RequestDataLoggerSetupXml2ExcludingFileFormat', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\RequestDataLoggerSetupXml2ExcludingFileFormat");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($requestDataLoggerSetupXml2ExcludingFileFormat, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'bearerAuth'
            $handler->setbearerAuth($securitybearerAuth);
            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerSetupFromFtpXml2($id, $requestDataLoggerSetupXml2ExcludingFileFormat, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'Data logger configuration JSON';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Data logger configuration JSON';
                    break;
                case 401:
                    $message = 'User is not authorized';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerUploadDataFromCsv
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerUploadDataFromCsvAction(Request $request, $id, $dataLoggerToken)
    {
        // Handle authentication

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
            $dataLoggerToken = $this->deserialize($dataLoggerToken, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($dataLoggerToken, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerUploadDataFromCsv($id, $dataLoggerToken, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'File upload verification';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'File upload verification';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation dataLoggerControllerUploadDataFromXml
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function dataLoggerControllerUploadDataFromXmlAction(Request $request, $id, $dataLoggerToken)
    {
        // Handle authentication

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $id = $this->deserialize($id, 'float', 'string');
            $dataLoggerToken = $this->deserialize($dataLoggerToken, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("float");
        $response = $this->validate($id, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($dataLoggerToken, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->dataLoggerControllerUploadDataFromXml($id, $dataLoggerToken, $responseCode, $responseHeaders);

            // Find default response message
            $message = 'File upload verification';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 204:
                    $message = 'File upload verification';
                    break;
                case 406:
                    $message = 'Request is not acceptable. Check response for help';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return DataLoggerControllerApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('dataLoggerController');
    }
}
