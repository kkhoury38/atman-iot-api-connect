<?php
/**
 * DeviceTypeChannelTypeControllerApiInterfaceTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * DeviceTypeChannelTypeControllerApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class DeviceTypeChannelTypeControllerApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deviceTypeChannelTypeControllerCount
     *
     * .
     *
     */
    public function testDeviceTypeChannelTypeControllerCount()
    {
        $client = static::createClient();

        $path = '/device-type-channel-type/{deviceTypeId}/count';
        $pattern = '{deviceTypeId}';
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for deviceTypeChannelTypeControllerCreate
     *
     * .
     *
     */
    public function testDeviceTypeChannelTypeControllerCreate()
    {
        $client = static::createClient();

        $path = '/device-type-channel-type/{deviceTypeId}';
        $pattern = '{deviceTypeId}';
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    /**
     * Test case for deviceTypeChannelTypeControllerDeviceTypeChannelCategories
     *
     * .
     *
     */
    public function testDeviceTypeChannelTypeControllerDeviceTypeChannelCategories()
    {
        $client = static::createClient();

        $path = '/device-type-channel-type/{deviceTypeId}/channel-categories';
        $pattern = '{deviceTypeId}';
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for deviceTypeChannelTypeControllerFind
     *
     * .
     *
     */
    public function testDeviceTypeChannelTypeControllerFind()
    {
        $client = static::createClient();

        $path = '/device-type-channel-type/{deviceTypeId}/page/{page}/count/{count}';
        $pattern = '{deviceTypeId}';
        $path = str_replace($pattern, $data, $path);
        $pattern = '{page}';
        $path = str_replace($pattern, $data, $path);
        $pattern = '{count}';
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for deviceTypeChannelTypeControllerUpdateById
     *
     * .
     *
     */
    public function testDeviceTypeChannelTypeControllerUpdateById()
    {
        $client = static::createClient();

        $path = '/device-type-channel-type/channel-type/{channelTypeId}';
        $pattern = '{channelTypeId}';
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
