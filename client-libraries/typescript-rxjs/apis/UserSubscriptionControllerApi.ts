// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    CodeVerificationRequest,
    Subscription,
    UserSubscription,
    UserSubscriptionWithRelations,
} from '../models';

export interface UserSubscriptionControllerCreateRequest {
    body?: object;
}

export interface UserSubscriptionControllerCreateUserSubscriptionBySubIdRequest {
    subscriptionId: number;
}

export interface UserSubscriptionControllerFindSubscriptionsByCategoryRequest {
    product: string;
}

export interface UserSubscriptionControllerGetByRefferenceCodeRequest {
    referenceCode: string;
}

export interface UserSubscriptionControllerVerifyCodeRequest {
    codeVerificationRequest?: CodeVerificationRequest;
}

/**
 * no description
 */
export class UserSubscriptionControllerApi extends BaseAPI {

    /**
     */
    userSubscriptionControllerCreate = ({ body }: UserSubscriptionControllerCreateRequest): Observable<void> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            path: '/user-subscriptions/paypal/callback',
            method: 'POST',
            headers,
            body: body as any,
        });
    };

    /**
     */
    userSubscriptionControllerCreateUserSubscriptionBySubId = ({ subscriptionId }: UserSubscriptionControllerCreateUserSubscriptionBySubIdRequest): Observable<UserSubscription> => {
        throwIfNullOrUndefined(subscriptionId, 'userSubscriptionControllerCreateUserSubscriptionBySubId');

        return this.request<UserSubscription>({
            path: '/user-subscription/get-new/{subscriptionId}'.replace('{subscriptionId}', encodeURI(subscriptionId)),
            method: 'GET',
        });
    };

    /**
     */
    userSubscriptionControllerFindSubscriptionsByCategory = ({ product }: UserSubscriptionControllerFindSubscriptionsByCategoryRequest): Observable<Array<Subscription>> => {
        throwIfNullOrUndefined(product, 'userSubscriptionControllerFindSubscriptionsByCategory');

        return this.request<Array<Subscription>>({
            path: '/user-subscription/subscriptions/{product}'.replace('{product}', encodeURI(product)),
            method: 'GET',
        });
    };

    /**
     */
    userSubscriptionControllerGetByRefferenceCode = ({ referenceCode }: UserSubscriptionControllerGetByRefferenceCodeRequest): Observable<UserSubscriptionWithRelations> => {
        throwIfNullOrUndefined(referenceCode, 'userSubscriptionControllerGetByRefferenceCode');

        return this.request<UserSubscriptionWithRelations>({
            path: '/user-subscription/get-by-reference-code/{referenceCode}'.replace('{referenceCode}', encodeURI(referenceCode)),
            method: 'GET',
        });
    };

    /**
     */
    userSubscriptionControllerVerifyCode = ({ codeVerificationRequest }: UserSubscriptionControllerVerifyCodeRequest): Observable<UserSubscription> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<UserSubscription>({
            path: '/user-subscriptions/verify-reference-code',
            method: 'POST',
            headers,
            body: codeVerificationRequest,
        });
    };

}
