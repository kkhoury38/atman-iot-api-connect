// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    DashboardElement,
    DashboardElementWithScope,
    NewDashboardElement,
} from '../models';

export interface DashboardElementControllerCreateRequest {
    newDashboardElement?: NewDashboardElement;
}

export interface DashboardElementControllerDeleteByIdRequest {
    id: number;
}

export interface DashboardElementControllerFindByUserIdAssetIdLocationRequest {
    assetId: number;
    userId: number;
    location: string;
}

export interface DashboardElementControllerMoveElementDownRequest {
    id: number;
}

export interface DashboardElementControllerMoveElementUpRequest {
    id: number;
}

/**
 * no description
 */
export class DashboardElementControllerApi extends BaseAPI {

    /**
     */
    dashboardElementControllerCreate = ({ newDashboardElement }: DashboardElementControllerCreateRequest): Observable<DashboardElement> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<DashboardElement>({
            path: '/dashboard-element',
            method: 'POST',
            headers,
            body: newDashboardElement,
        });
    };

    /**
     */
    dashboardElementControllerDeleteById = ({ id }: DashboardElementControllerDeleteByIdRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'dashboardElementControllerDeleteById');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/dashboard-element/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     */
    dashboardElementControllerFindByUserIdAssetIdLocation = ({ assetId, userId, location }: DashboardElementControllerFindByUserIdAssetIdLocationRequest): Observable<Array<DashboardElementWithScope>> => {
        throwIfNullOrUndefined(assetId, 'dashboardElementControllerFindByUserIdAssetIdLocation');
        throwIfNullOrUndefined(userId, 'dashboardElementControllerFindByUserIdAssetIdLocation');
        throwIfNullOrUndefined(location, 'dashboardElementControllerFindByUserIdAssetIdLocation');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<DashboardElementWithScope>>({
            path: '/dashboard-elements/asset-id/{assetId}/user-id/{userId}/location/{location}'.replace('{assetId}', encodeURI(assetId)).replace('{userId}', encodeURI(userId)).replace('{location}', encodeURI(location)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    dashboardElementControllerMoveElementDown = ({ id }: DashboardElementControllerMoveElementDownRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'dashboardElementControllerMoveElementDown');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/dashboard-element/{id}/move-down'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
        });
    };

    /**
     */
    dashboardElementControllerMoveElementUp = ({ id }: DashboardElementControllerMoveElementUpRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'dashboardElementControllerMoveElementUp');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/dashboard-element/{id}/move-up'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
        });
    };

}
