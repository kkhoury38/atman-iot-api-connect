// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    DeviceType,
    DeviceTypeExcludingIdModelManufacturer,
    DeviceTypeExcludingModelDescriptionManufacturer,
    LoopbackCount,
} from '../models';

export interface DeviceTypeControllerCreateRequest {
    deviceType?: DeviceType;
}

export interface DeviceTypeControllerFindRequest {
    page: number;
    count: number;
}

export interface DeviceTypeControllerGetAssetDeviceCategoriesRequest {
    assetId: number;
}

export interface DeviceTypeControllerUpdateByIdRequest {
    id: number;
    deviceTypeExcludingIdModelManufacturer?: DeviceTypeExcludingIdModelManufacturer;
}

/**
 * no description
 */
export class DeviceTypeControllerApi extends BaseAPI {

    /**
     */
    deviceTypeControllerCount = (): Observable<LoopbackCount> => {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<LoopbackCount>({
            path: '/device-type/count',
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceTypeControllerCreate = ({ deviceType }: DeviceTypeControllerCreateRequest): Observable<DeviceType> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<DeviceType>({
            path: '/device-type',
            method: 'POST',
            headers,
            body: deviceType,
        });
    };

    /**
     */
    deviceTypeControllerFind = ({ page, count }: DeviceTypeControllerFindRequest): Observable<Array<DeviceType>> => {
        throwIfNullOrUndefined(page, 'deviceTypeControllerFind');
        throwIfNullOrUndefined(count, 'deviceTypeControllerFind');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<DeviceType>>({
            path: '/device-type/get-all/page/{page}/count/{count}'.replace('{page}', encodeURI(page)).replace('{count}', encodeURI(count)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceTypeControllerGetAssetDeviceCategories = ({ assetId }: DeviceTypeControllerGetAssetDeviceCategoriesRequest): Observable<Array<DeviceTypeExcludingModelDescriptionManufacturer>> => {
        throwIfNullOrUndefined(assetId, 'deviceTypeControllerGetAssetDeviceCategories');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<DeviceTypeExcludingModelDescriptionManufacturer>>({
            path: '/device-type/device-categories-in-asset/{assetId}'.replace('{assetId}', encodeURI(assetId)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceTypeControllerUpdateById = ({ id, deviceTypeExcludingIdModelManufacturer }: DeviceTypeControllerUpdateByIdRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'deviceTypeControllerUpdateById');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/device-type/{id}'.replace('{id}', encodeURI(id)),
            method: 'PATCH',
            headers,
            body: deviceTypeExcludingIdModelManufacturer,
        });
    };

}
