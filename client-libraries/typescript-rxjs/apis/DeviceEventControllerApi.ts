// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    DeviceEventWithRelations,
    LoopbackCount,
} from '../models';

export interface DeviceEventControllerCountNotViewedRequest {
    assetId: number;
}

export interface DeviceEventControllerFindRequest {
    assetId: number;
    page: number;
    count: number;
}

export interface DeviceEventControllerUpdateViewedByRequest {
    eventId: number;
}

/**
 * no description
 */
export class DeviceEventControllerApi extends BaseAPI {

    /**
     */
    deviceEventControllerCountNotViewed = ({ assetId }: DeviceEventControllerCountNotViewedRequest): Observable<LoopbackCount> => {
        throwIfNullOrUndefined(assetId, 'deviceEventControllerCountNotViewed');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<LoopbackCount>({
            path: '/device-events/by-asset/count-not-viewed/{assetId}'.replace('{assetId}', encodeURI(assetId)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceEventControllerFind = ({ assetId, page, count }: DeviceEventControllerFindRequest): Observable<Array<DeviceEventWithRelations>> => {
        throwIfNullOrUndefined(assetId, 'deviceEventControllerFind');
        throwIfNullOrUndefined(page, 'deviceEventControllerFind');
        throwIfNullOrUndefined(count, 'deviceEventControllerFind');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<DeviceEventWithRelations>>({
            path: '/device-events/assetId/{assetId}/page/{page}/count/{count}'.replace('{assetId}', encodeURI(assetId)).replace('{page}', encodeURI(page)).replace('{count}', encodeURI(count)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceEventControllerUpdateViewedBy = ({ eventId }: DeviceEventControllerUpdateViewedByRequest): Observable<void> => {
        throwIfNullOrUndefined(eventId, 'deviceEventControllerUpdateViewedBy');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/device-events/mark-read/{eventId}'.replace('{eventId}', encodeURI(eventId)),
            method: 'GET',
            headers,
        });
    };

}
