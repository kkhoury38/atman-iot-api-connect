/*
 * Atman IoT
 *
 * Atman IoT Server
 *
 * API version: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// UserControllerApiService UserControllerApi service
type UserControllerApiService service

// UserControllerCreateOpts Optional parameters for the method 'UserControllerCreate'
type UserControllerCreateOpts struct {
    UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode optional.Interface
}

/*
UserControllerCreate Method for UserControllerCreate
Used for registering a new &lt;b&gt;User&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsuser\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserModel&lt;/a&gt;&lt;/i&gt;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param referenceCode
 * @param optional nil or *UserControllerCreateOpts - Optional Parameters:
 * @param "UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode" (optional.Interface of UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode) - 
@return User
*/
func (a *UserControllerApiService) UserControllerCreate(ctx _context.Context, referenceCode string, localVarOptionals *UserControllerCreateOpts) (User, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  User
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/user/register/{referenceCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"referenceCode"+"}", _neturl.QueryEscape(parameterToString(referenceCode, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode.IsSet() {
		localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode, localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCodeok := localVarOptionals.UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode.Value().(UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode)
		if !localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCodeok {
			return localVarReturnValue, nil, reportError("userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode should be UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode")
		}
		localVarPostBody = &localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// UserControllerCreateVirtualOpts Optional parameters for the method 'UserControllerCreateVirtual'
type UserControllerCreateVirtualOpts struct {
    UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode optional.Interface
}

/*
UserControllerCreateVirtual Method for UserControllerCreateVirtual
Used for registering a new &lt;b&gt;Virtual User&lt;/b&gt; by a &lt;b&gt;User&lt;/b&gt;, identified by the provided &lt;i&gt;token.&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsuser\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserModel&lt;/a&gt;&lt;/i&gt;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *UserControllerCreateVirtualOpts - Optional Parameters:
 * @param "UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode" (optional.Interface of UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode) - 
@return User
*/
func (a *UserControllerApiService) UserControllerCreateVirtual(ctx _context.Context, localVarOptionals *UserControllerCreateVirtualOpts) (User, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  User
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/user/register/virtual"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode.IsSet() {
		localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode, localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCodeok := localVarOptionals.UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode.Value().(UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode)
		if !localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCodeok {
			return localVarReturnValue, nil, reportError("userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode should be UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode")
		}
		localVarPostBody = &localVarOptionalUserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
UserControllerDeleteVirtualUserById Method for UserControllerDeleteVirtualUserById
Deletes Virtual User by Id
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
*/
func (a *UserControllerApiService) UserControllerDeleteVirtualUserById(ctx _context.Context, id float32) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/users/virtualUser/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.QueryEscape(parameterToString(id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
UserControllerGetVirtualUsers Method for UserControllerGetVirtualUsers
Returns users under administrator account
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return []UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode
*/
func (a *UserControllerApiService) UserControllerGetVirtualUsers(ctx _context.Context) ([]UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/user/getVirtualUsers"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// UserControllerLoginOpts Optional parameters for the method 'UserControllerLogin'
type UserControllerLoginOpts struct {
    UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode optional.Interface
}

/*
UserControllerLogin Method for UserControllerLogin
Used for &lt;b&gt;User&lt;/b&gt; and &lt;b&gt;Virtual User&lt;/b&gt; login. Exchanges &lt;i&gt;username/password&lt;/i&gt; with an authorization &lt;i&gt;token&lt;/i&gt;. Please enter the email provided durring registration in the username field.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsuser\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserModel&lt;/a&gt;&lt;/i&gt;
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *UserControllerLoginOpts - Optional Parameters:
 * @param "UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode" (optional.Interface of UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode) - 
@return Token
*/
func (a *UserControllerApiService) UserControllerLogin(ctx _context.Context, localVarOptionals *UserControllerLoginOpts) (Token, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Token
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/user/login"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode.IsSet() {
		localVarOptionalUserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode, localVarOptionalUserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCodeok := localVarOptionals.UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode.Value().(UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode)
		if !localVarOptionalUserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCodeok {
			return localVarReturnValue, nil, reportError("userExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode should be UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode")
		}
		localVarPostBody = &localVarOptionalUserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
