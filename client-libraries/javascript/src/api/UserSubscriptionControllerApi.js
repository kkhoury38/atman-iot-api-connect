/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CodeVerificationRequest from '../model/CodeVerificationRequest';
import Subscription from '../model/Subscription';
import UserSubscription from '../model/UserSubscription';
import UserSubscriptionWithRelations from '../model/UserSubscriptionWithRelations';

/**
* UserSubscriptionController service.
* @module api/UserSubscriptionControllerApi
* @version 3.0.1
*/
export default class UserSubscriptionControllerApi {

    /**
    * Constructs a new UserSubscriptionControllerApi. 
    * @alias module:api/UserSubscriptionControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userSubscriptionControllerCreate operation.
     * @callback module:api/UserSubscriptionControllerApi~userSubscriptionControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/UserSubscriptionControllerApi~userSubscriptionControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userSubscriptionControllerCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-subscriptions/paypal/callback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSubscriptionControllerCreateUserSubscriptionBySubId operation.
     * @callback module:api/UserSubscriptionControllerApi~userSubscriptionControllerCreateUserSubscriptionBySubIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} subscriptionId 
     * @param {module:api/UserSubscriptionControllerApi~userSubscriptionControllerCreateUserSubscriptionBySubIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSubscription}
     */
    userSubscriptionControllerCreateUserSubscriptionBySubId(subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling userSubscriptionControllerCreateUserSubscriptionBySubId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserSubscription;
      return this.apiClient.callApi(
        '/user-subscription/get-new/{subscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSubscriptionControllerFindSubscriptionsByCategory operation.
     * @callback module:api/UserSubscriptionControllerApi~userSubscriptionControllerFindSubscriptionsByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Subscription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} product 
     * @param {module:api/UserSubscriptionControllerApi~userSubscriptionControllerFindSubscriptionsByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Subscription>}
     */
    userSubscriptionControllerFindSubscriptionsByCategory(product, callback) {
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling userSubscriptionControllerFindSubscriptionsByCategory");
      }

      let pathParams = {
        'product': product
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Subscription];
      return this.apiClient.callApi(
        '/user-subscription/subscriptions/{product}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSubscriptionControllerGetByRefferenceCode operation.
     * @callback module:api/UserSubscriptionControllerApi~userSubscriptionControllerGetByRefferenceCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSubscriptionWithRelations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} referenceCode 
     * @param {module:api/UserSubscriptionControllerApi~userSubscriptionControllerGetByRefferenceCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSubscriptionWithRelations}
     */
    userSubscriptionControllerGetByRefferenceCode(referenceCode, callback) {
      let postBody = null;
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling userSubscriptionControllerGetByRefferenceCode");
      }

      let pathParams = {
        'referenceCode': referenceCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserSubscriptionWithRelations;
      return this.apiClient.callApi(
        '/user-subscription/get-by-reference-code/{referenceCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSubscriptionControllerVerifyCode operation.
     * @callback module:api/UserSubscriptionControllerApi~userSubscriptionControllerVerifyCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/CodeVerificationRequest} opts.codeVerificationRequest 
     * @param {module:api/UserSubscriptionControllerApi~userSubscriptionControllerVerifyCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSubscription}
     */
    userSubscriptionControllerVerifyCode(opts, callback) {
      opts = opts || {};
      let postBody = opts['codeVerificationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserSubscription;
      return this.apiClient.callApi(
        '/user-subscriptions/verify-reference-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
