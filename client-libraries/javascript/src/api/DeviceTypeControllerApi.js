/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceType from '../model/DeviceType';
import DeviceTypeExcludingIdModelManufacturer from '../model/DeviceTypeExcludingIdModelManufacturer';
import DeviceTypeExcludingModelDescriptionManufacturer from '../model/DeviceTypeExcludingModelDescriptionManufacturer';
import LoopbackCount from '../model/LoopbackCount';

/**
* DeviceTypeController service.
* @module api/DeviceTypeControllerApi
* @version 3.0.1
*/
export default class DeviceTypeControllerApi {

    /**
    * Constructs a new DeviceTypeControllerApi. 
    * @alias module:api/DeviceTypeControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceTypeControllerCount operation.
     * @callback module:api/DeviceTypeControllerApi~deviceTypeControllerCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoopbackCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DeviceTypeControllerApi~deviceTypeControllerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoopbackCount}
     */
    deviceTypeControllerCount(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoopbackCount;
      return this.apiClient.callApi(
        '/device-type/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeControllerCreate operation.
     * @callback module:api/DeviceTypeControllerApi~deviceTypeControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceType} opts.deviceType 
     * @param {module:api/DeviceTypeControllerApi~deviceTypeControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceType}
     */
    deviceTypeControllerCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceType'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceType;
      return this.apiClient.callApi(
        '/device-type', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeControllerFind operation.
     * @callback module:api/DeviceTypeControllerApi~deviceTypeControllerFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} page 
     * @param {Number} count 
     * @param {module:api/DeviceTypeControllerApi~deviceTypeControllerFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceType>}
     */
    deviceTypeControllerFind(page, count, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling deviceTypeControllerFind");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling deviceTypeControllerFind");
      }

      let pathParams = {
        'page': page,
        'count': count
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeviceType];
      return this.apiClient.callApi(
        '/device-type/get-all/page/{page}/count/{count}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeControllerGetAssetDeviceCategories operation.
     * @callback module:api/DeviceTypeControllerApi~deviceTypeControllerGetAssetDeviceCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceTypeExcludingModelDescriptionManufacturer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} assetId 
     * @param {module:api/DeviceTypeControllerApi~deviceTypeControllerGetAssetDeviceCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceTypeExcludingModelDescriptionManufacturer>}
     */
    deviceTypeControllerGetAssetDeviceCategories(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deviceTypeControllerGetAssetDeviceCategories");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeviceTypeExcludingModelDescriptionManufacturer];
      return this.apiClient.callApi(
        '/device-type/device-categories-in-asset/{assetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeControllerUpdateById operation.
     * @callback module:api/DeviceTypeControllerApi~deviceTypeControllerUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceTypeExcludingIdModelManufacturer} opts.deviceTypeExcludingIdModelManufacturer 
     * @param {module:api/DeviceTypeControllerApi~deviceTypeControllerUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceTypeControllerUpdateById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceTypeExcludingIdModelManufacturer'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceTypeControllerUpdateById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device-type/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
