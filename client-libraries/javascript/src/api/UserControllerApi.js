/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Token from '../model/Token';
import User from '../model/User';
import UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode from '../model/UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode';
import UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode from '../model/UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode';
import UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode from '../model/UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode';

/**
* UserController service.
* @module api/UserControllerApi
* @version 3.0.1
*/
export default class UserControllerApi {

    /**
    * Constructs a new UserControllerApi. 
    * @alias module:api/UserControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userControllerCreate operation.
     * @callback module:api/UserControllerApi~userControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for registering a new <b>User</b>.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
     * @param {String} referenceCode 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode} opts.userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode 
     * @param {module:api/UserControllerApi~userControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userControllerCreate(referenceCode, opts, callback) {
      opts = opts || {};
      let postBody = opts['userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode'];
      // verify the required parameter 'referenceCode' is set
      if (referenceCode === undefined || referenceCode === null) {
        throw new Error("Missing the required parameter 'referenceCode' when calling userControllerCreate");
      }

      let pathParams = {
        'referenceCode': referenceCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/register/{referenceCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerCreateVirtual operation.
     * @callback module:api/UserControllerApi~userControllerCreateVirtualCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for registering a new <b>Virtual User</b> by a <b>User</b>, identified by the provided <i>token.</i><br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
     * @param {Object} opts Optional parameters
     * @param {module:model/UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode} opts.userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode 
     * @param {module:api/UserControllerApi~userControllerCreateVirtualCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    userControllerCreateVirtual(opts, callback) {
      opts = opts || {};
      let postBody = opts['userExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/register/virtual', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerDeleteVirtualUserById operation.
     * @callback module:api/UserControllerApi~userControllerDeleteVirtualUserByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes Virtual User by Id
     * @param {Number} id 
     * @param {module:api/UserControllerApi~userControllerDeleteVirtualUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userControllerDeleteVirtualUserById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userControllerDeleteVirtualUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/virtualUser/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerGetVirtualUsers operation.
     * @callback module:api/UserControllerApi~userControllerGetVirtualUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns users under administrator account
     * @param {module:api/UserControllerApi~userControllerGetVirtualUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode>}
     */
    userControllerGetVirtualUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode];
      return this.apiClient.callApi(
        '/user/getVirtualUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userControllerLogin operation.
     * @callback module:api/UserControllerApi~userControllerLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for <b>User</b> and <b>Virtual User</b> login. Exchanges <i>username/password</i> with an authorization <i>token</i>. Please enter the email provided durring registration in the username field.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
     * @param {Object} opts Optional parameters
     * @param {module:model/UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode} opts.userExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode 
     * @param {module:api/UserControllerApi~userControllerLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    userControllerLogin(opts, callback) {
      opts = opts || {};
      let postBody = opts['userExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/user/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
