/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChannelType from '../model/ChannelType';
import ChannelTypeExcludingIdDeviceTypeId from '../model/ChannelTypeExcludingIdDeviceTypeId';
import ChannelTypeExcludingIdNameDeviceTypeId from '../model/ChannelTypeExcludingIdNameDeviceTypeId';
import ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId from '../model/ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId';
import LoopbackCount from '../model/LoopbackCount';

/**
* DeviceTypeChannelTypeController service.
* @module api/DeviceTypeChannelTypeControllerApi
* @version 3.0.1
*/
export default class DeviceTypeChannelTypeControllerApi {

    /**
    * Constructs a new DeviceTypeChannelTypeControllerApi. 
    * @alias module:api/DeviceTypeChannelTypeControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceTypeChannelTypeControllerCount operation.
     * @callback module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoopbackCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceTypeId 
     * @param {module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoopbackCount}
     */
    deviceTypeChannelTypeControllerCount(deviceTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceTypeId' is set
      if (deviceTypeId === undefined || deviceTypeId === null) {
        throw new Error("Missing the required parameter 'deviceTypeId' when calling deviceTypeChannelTypeControllerCount");
      }

      let pathParams = {
        'deviceTypeId': deviceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoopbackCount;
      return this.apiClient.callApi(
        '/device-type-channel-type/{deviceTypeId}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeChannelTypeControllerCreate operation.
     * @callback module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceTypeId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelTypeExcludingIdDeviceTypeId} opts.channelTypeExcludingIdDeviceTypeId 
     * @param {module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelType}
     */
    deviceTypeChannelTypeControllerCreate(deviceTypeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['channelTypeExcludingIdDeviceTypeId'];
      // verify the required parameter 'deviceTypeId' is set
      if (deviceTypeId === undefined || deviceTypeId === null) {
        throw new Error("Missing the required parameter 'deviceTypeId' when calling deviceTypeChannelTypeControllerCreate");
      }

      let pathParams = {
        'deviceTypeId': deviceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelType;
      return this.apiClient.callApi(
        '/device-type-channel-type/{deviceTypeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeChannelTypeControllerDeviceTypeChannelCategories operation.
     * @callback module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerDeviceTypeChannelCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceTypeId 
     * @param {module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerDeviceTypeChannelCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId>}
     */
    deviceTypeChannelTypeControllerDeviceTypeChannelCategories(deviceTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceTypeId' is set
      if (deviceTypeId === undefined || deviceTypeId === null) {
        throw new Error("Missing the required parameter 'deviceTypeId' when calling deviceTypeChannelTypeControllerDeviceTypeChannelCategories");
      }

      let pathParams = {
        'deviceTypeId': deviceTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId];
      return this.apiClient.callApi(
        '/device-type-channel-type/{deviceTypeId}/channel-categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeChannelTypeControllerFind operation.
     * @callback module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceTypeId 
     * @param {Number} page 
     * @param {Number} count 
     * @param {module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelType>}
     */
    deviceTypeChannelTypeControllerFind(deviceTypeId, page, count, callback) {
      let postBody = null;
      // verify the required parameter 'deviceTypeId' is set
      if (deviceTypeId === undefined || deviceTypeId === null) {
        throw new Error("Missing the required parameter 'deviceTypeId' when calling deviceTypeChannelTypeControllerFind");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling deviceTypeChannelTypeControllerFind");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling deviceTypeChannelTypeControllerFind");
      }

      let pathParams = {
        'deviceTypeId': deviceTypeId,
        'page': page,
        'count': count
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelType];
      return this.apiClient.callApi(
        '/device-type-channel-type/{deviceTypeId}/page/{page}/count/{count}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceTypeChannelTypeControllerUpdateById operation.
     * @callback module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} channelTypeId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelTypeExcludingIdNameDeviceTypeId} opts.channelTypeExcludingIdNameDeviceTypeId 
     * @param {module:api/DeviceTypeChannelTypeControllerApi~deviceTypeChannelTypeControllerUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceTypeChannelTypeControllerUpdateById(channelTypeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['channelTypeExcludingIdNameDeviceTypeId'];
      // verify the required parameter 'channelTypeId' is set
      if (channelTypeId === undefined || channelTypeId === null) {
        throw new Error("Missing the required parameter 'channelTypeId' when calling deviceTypeChannelTypeControllerUpdateById");
      }

      let pathParams = {
        'channelTypeId': channelTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device-type-channel-type/channel-type/{channelTypeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
