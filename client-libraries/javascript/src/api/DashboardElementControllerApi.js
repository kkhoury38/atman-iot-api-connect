/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DashboardElement from '../model/DashboardElement';
import DashboardElementWithScope from '../model/DashboardElementWithScope';
import NewDashboardElement from '../model/NewDashboardElement';

/**
* DashboardElementController service.
* @module api/DashboardElementControllerApi
* @version 3.0.1
*/
export default class DashboardElementControllerApi {

    /**
    * Constructs a new DashboardElementControllerApi. 
    * @alias module:api/DashboardElementControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dashboardElementControllerCreate operation.
     * @callback module:api/DashboardElementControllerApi~dashboardElementControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardElement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/NewDashboardElement} opts.newDashboardElement 
     * @param {module:api/DashboardElementControllerApi~dashboardElementControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardElement}
     */
    dashboardElementControllerCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['newDashboardElement'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DashboardElement;
      return this.apiClient.callApi(
        '/dashboard-element', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardElementControllerDeleteById operation.
     * @callback module:api/DashboardElementControllerApi~dashboardElementControllerDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DashboardElementControllerApi~dashboardElementControllerDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dashboardElementControllerDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dashboardElementControllerDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboard-element/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardElementControllerFindByUserIdAssetIdLocation operation.
     * @callback module:api/DashboardElementControllerApi~dashboardElementControllerFindByUserIdAssetIdLocationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DashboardElementWithScope>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} assetId 
     * @param {Number} userId 
     * @param {String} location 
     * @param {module:api/DashboardElementControllerApi~dashboardElementControllerFindByUserIdAssetIdLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DashboardElementWithScope>}
     */
    dashboardElementControllerFindByUserIdAssetIdLocation(assetId, userId, location, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling dashboardElementControllerFindByUserIdAssetIdLocation");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling dashboardElementControllerFindByUserIdAssetIdLocation");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling dashboardElementControllerFindByUserIdAssetIdLocation");
      }

      let pathParams = {
        'assetId': assetId,
        'userId': userId,
        'location': location
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DashboardElementWithScope];
      return this.apiClient.callApi(
        '/dashboard-elements/asset-id/{assetId}/user-id/{userId}/location/{location}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardElementControllerMoveElementDown operation.
     * @callback module:api/DashboardElementControllerApi~dashboardElementControllerMoveElementDownCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DashboardElementControllerApi~dashboardElementControllerMoveElementDownCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dashboardElementControllerMoveElementDown(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dashboardElementControllerMoveElementDown");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboard-element/{id}/move-down', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dashboardElementControllerMoveElementUp operation.
     * @callback module:api/DashboardElementControllerApi~dashboardElementControllerMoveElementUpCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/DashboardElementControllerApi~dashboardElementControllerMoveElementUpCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dashboardElementControllerMoveElementUp(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dashboardElementControllerMoveElementUp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/dashboard-element/{id}/move-up', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
