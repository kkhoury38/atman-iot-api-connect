/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RequestVirtualAccessRightExcludingAssetGroupId from '../model/RequestVirtualAccessRightExcludingAssetGroupId';
import RequestVirtualAccessRightExcludingAssetId from '../model/RequestVirtualAccessRightExcludingAssetId';
import VirtualAccess from '../model/VirtualAccess';

/**
* VirtualAccessController service.
* @module api/VirtualAccessControllerApi
* @version 3.0.1
*/
export default class VirtualAccessControllerApi {

    /**
    * Constructs a new VirtualAccessControllerApi. 
    * @alias module:api/VirtualAccessControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the virtualAccessControllerCreateAccessByGroup operation.
     * @callback module:api/VirtualAccessControllerApi~virtualAccessControllerCreateAccessByGroupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VirtualAccess>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestVirtualAccessRightExcludingAssetId} opts.requestVirtualAccessRightExcludingAssetId 
     * @param {module:api/VirtualAccessControllerApi~virtualAccessControllerCreateAccessByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VirtualAccess>}
     */
    virtualAccessControllerCreateAccessByGroup(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestVirtualAccessRightExcludingAssetId'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [VirtualAccess];
      return this.apiClient.callApi(
        '/virtual-access/by-asset-group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualAccessControllerCreateAccessByRight operation.
     * @callback module:api/VirtualAccessControllerApi~virtualAccessControllerCreateAccessByRightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestVirtualAccessRightExcludingAssetGroupId} opts.requestVirtualAccessRightExcludingAssetGroupId 
     * @param {module:api/VirtualAccessControllerApi~virtualAccessControllerCreateAccessByRightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualAccess}
     */
    virtualAccessControllerCreateAccessByRight(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestVirtualAccessRightExcludingAssetGroupId'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualAccess;
      return this.apiClient.callApi(
        '/virtual-access/by-asset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualAccessControllerDeleteById operation.
     * @callback module:api/VirtualAccessControllerApi~virtualAccessControllerDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/VirtualAccessControllerApi~virtualAccessControllerDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualAccessControllerDeleteById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling virtualAccessControllerDeleteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/virtual-access/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualAccessControllerFindByUserId operation.
     * @callback module:api/VirtualAccessControllerApi~virtualAccessControllerFindByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VirtualAccess>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} userId 
     * @param {module:api/VirtualAccessControllerApi~virtualAccessControllerFindByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VirtualAccess>}
     */
    virtualAccessControllerFindByUserId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling virtualAccessControllerFindByUserId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VirtualAccess];
      return this.apiClient.callApi(
        '/virtual-access/by-userId/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
