/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* SchedulerController service.
* @module api/SchedulerControllerApi
* @version 3.0.1
*/
export default class SchedulerControllerApi {

    /**
    * Constructs a new SchedulerControllerApi. 
    * @alias module:api/SchedulerControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schedulerControllerProcessEvents operation.
     * @callback module:api/SchedulerControllerApi~schedulerControllerProcessEventsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} attempt 
     * @param {String} serverKey 
     * @param {module:api/SchedulerControllerApi~schedulerControllerProcessEventsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulerControllerProcessEvents(attempt, serverKey, callback) {
      let postBody = null;
      // verify the required parameter 'attempt' is set
      if (attempt === undefined || attempt === null) {
        throw new Error("Missing the required parameter 'attempt' when calling schedulerControllerProcessEvents");
      }
      // verify the required parameter 'serverKey' is set
      if (serverKey === undefined || serverKey === null) {
        throw new Error("Missing the required parameter 'serverKey' when calling schedulerControllerProcessEvents");
      }

      let pathParams = {
        'attempt': attempt,
        'serverKey': serverKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduler/process/events/{attempt}/{serverKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schedulerControllerProcessFtpRejected operation.
     * @callback module:api/SchedulerControllerApi~schedulerControllerProcessFtpRejectedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} serverKey 
     * @param {module:api/SchedulerControllerApi~schedulerControllerProcessFtpRejectedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schedulerControllerProcessFtpRejected(serverKey, callback) {
      let postBody = null;
      // verify the required parameter 'serverKey' is set
      if (serverKey === undefined || serverKey === null) {
        throw new Error("Missing the required parameter 'serverKey' when calling schedulerControllerProcessFtpRejected");
      }

      let pathParams = {
        'serverKey': serverKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scheduler/process/ftp-rejected/{serverKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
