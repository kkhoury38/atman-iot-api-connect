/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceEventWithRelations from '../model/DeviceEventWithRelations';
import LoopbackCount from '../model/LoopbackCount';

/**
* DeviceEventController service.
* @module api/DeviceEventControllerApi
* @version 3.0.1
*/
export default class DeviceEventControllerApi {

    /**
    * Constructs a new DeviceEventControllerApi. 
    * @alias module:api/DeviceEventControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceEventControllerCountNotViewed operation.
     * @callback module:api/DeviceEventControllerApi~deviceEventControllerCountNotViewedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoopbackCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} assetId 
     * @param {module:api/DeviceEventControllerApi~deviceEventControllerCountNotViewedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoopbackCount}
     */
    deviceEventControllerCountNotViewed(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deviceEventControllerCountNotViewed");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoopbackCount;
      return this.apiClient.callApi(
        '/device-events/by-asset/count-not-viewed/{assetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceEventControllerFind operation.
     * @callback module:api/DeviceEventControllerApi~deviceEventControllerFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceEventWithRelations>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} assetId 
     * @param {Number} page 
     * @param {Number} count 
     * @param {module:api/DeviceEventControllerApi~deviceEventControllerFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceEventWithRelations>}
     */
    deviceEventControllerFind(assetId, page, count, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deviceEventControllerFind");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling deviceEventControllerFind");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling deviceEventControllerFind");
      }

      let pathParams = {
        'assetId': assetId,
        'page': page,
        'count': count
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DeviceEventWithRelations];
      return this.apiClient.callApi(
        '/device-events/assetId/{assetId}/page/{page}/count/{count}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceEventControllerUpdateViewedBy operation.
     * @callback module:api/DeviceEventControllerApi~deviceEventControllerUpdateViewedByCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} eventId 
     * @param {module:api/DeviceEventControllerApi~deviceEventControllerUpdateViewedByCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceEventControllerUpdateViewedBy(eventId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling deviceEventControllerUpdateViewedBy");
      }

      let pathParams = {
        'eventId': eventId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device-events/mark-read/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
