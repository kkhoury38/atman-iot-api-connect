/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Channel from '../model/Channel';
import ChannelExcludingIdDeviceId from '../model/ChannelExcludingIdDeviceId';
import ChannelType from '../model/ChannelType';
import Device from '../model/Device';
import DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId from '../model/DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId';
import DeviceExcludingIdDataLoggerId from '../model/DeviceExcludingIdDataLoggerId';
import DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId from '../model/DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId';
import DeviceWithType from '../model/DeviceWithType';

/**
* DeviceController service.
* @module api/DeviceControllerApi
* @version 3.0.1
*/
export default class DeviceControllerApi {

    /**
    * Constructs a new DeviceControllerApi. 
    * @alias module:api/DeviceControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceControllerCreate operation.
     * @callback module:api/DeviceControllerApi~deviceControllerCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Device} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for creating a new <b>Device</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     * @param {Number} dataLoggerId 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceExcludingIdDataLoggerId} opts.deviceExcludingIdDataLoggerId 
     * @param {module:api/DeviceControllerApi~deviceControllerCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Device}
     */
    deviceControllerCreate(dataLoggerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceExcludingIdDataLoggerId'];
      // verify the required parameter 'dataLoggerId' is set
      if (dataLoggerId === undefined || dataLoggerId === null) {
        throw new Error("Missing the required parameter 'dataLoggerId' when calling deviceControllerCreate");
      }

      let pathParams = {
        'dataLoggerId': dataLoggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Device;
      return this.apiClient.callApi(
        '/device/{dataLoggerId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerCreateChannel operation.
     * @callback module:api/DeviceControllerApi~deviceControllerCreateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for creating a new <b>Channel</b>, belonging to a <b>Device</b> with id <i>deviceId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     * @param {Number} deviceId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ChannelExcludingIdDeviceId} opts.channelExcludingIdDeviceId 
     * @param {module:api/DeviceControllerApi~deviceControllerCreateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    deviceControllerCreateChannel(deviceId, opts, callback) {
      opts = opts || {};
      let postBody = opts['channelExcludingIdDeviceId'];
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceControllerCreateChannel");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Channel;
      return this.apiClient.callApi(
        '/device/{deviceId}/channel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerDisableChannelMonitoring operation.
     * @callback module:api/DeviceControllerApi~deviceControllerDisableChannelMonitoringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     * @param {Number} deviceId 
     * @param {Number} channelId 
     * @param {Boolean} all 
     * @param {module:api/DeviceControllerApi~deviceControllerDisableChannelMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceControllerDisableChannelMonitoring(deviceId, channelId, all, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceControllerDisableChannelMonitoring");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deviceControllerDisableChannelMonitoring");
      }
      // verify the required parameter 'all' is set
      if (all === undefined || all === null) {
        throw new Error("Missing the required parameter 'all' when calling deviceControllerDisableChannelMonitoring");
      }

      let pathParams = {
        'deviceId': deviceId,
        'channelId': channelId,
        'all': all
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/{deviceId}/channel/{channelId}/disable-monitoring/all/{all}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerEnableChannelMonitoring operation.
     * @callback module:api/DeviceControllerApi~deviceControllerEnableChannelMonitoringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     * @param {Number} deviceId 
     * @param {Number} channelId 
     * @param {Boolean} all 
     * @param {module:api/DeviceControllerApi~deviceControllerEnableChannelMonitoringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceControllerEnableChannelMonitoring(deviceId, channelId, all, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceControllerEnableChannelMonitoring");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deviceControllerEnableChannelMonitoring");
      }
      // verify the required parameter 'all' is set
      if (all === undefined || all === null) {
        throw new Error("Missing the required parameter 'all' when calling deviceControllerEnableChannelMonitoring");
      }

      let pathParams = {
        'deviceId': deviceId,
        'channelId': channelId,
        'all': all
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/{deviceId}/channel/{channelId}/enable-monitoring/all/{all}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerFind operation.
     * @callback module:api/DeviceControllerApi~deviceControllerFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Device>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for getting the <b>Devices</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     * @param {Number} dataLoggerId 
     * @param {module:api/DeviceControllerApi~deviceControllerFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Device>}
     */
    deviceControllerFind(dataLoggerId, callback) {
      let postBody = null;
      // verify the required parameter 'dataLoggerId' is set
      if (dataLoggerId === undefined || dataLoggerId === null) {
        throw new Error("Missing the required parameter 'dataLoggerId' when calling deviceControllerFind");
      }

      let pathParams = {
        'dataLoggerId': dataLoggerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Device];
      return this.apiClient.callApi(
        '/devices/{dataLoggerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerFindChannelTypes operation.
     * @callback module:api/DeviceControllerApi~deviceControllerFindChannelTypesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for getting the  <b>Channel</b><b>Types</b> of <b>Channels</b> belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocschanneltype\" target=\"_blank\">ChannelTypeModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     * @param {Number} deviceId 
     * @param {module:api/DeviceControllerApi~deviceControllerFindChannelTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelType>}
     */
    deviceControllerFindChannelTypes(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceControllerFindChannelTypes");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChannelType];
      return this.apiClient.callApi(
        '/device/{deviceId}/channelTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerFindChannels operation.
     * @callback module:api/DeviceControllerApi~deviceControllerFindChannelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Channel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used for getting <b>Channel</b><b>s</b>, belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     * @param {Number} deviceId 
     * @param {module:api/DeviceControllerApi~deviceControllerFindChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Channel>}
     */
    deviceControllerFindChannels(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceControllerFindChannels");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Channel];
      return this.apiClient.callApi(
        '/device/{deviceId}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerGetDevicesWithType operation.
     * @callback module:api/DeviceControllerApi~deviceControllerGetDevicesWithTypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceWithType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns array of devices with their device types
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId>} opts.deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId 
     * @param {module:api/DeviceControllerApi~deviceControllerGetDevicesWithTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceWithType>}
     */
    deviceControllerGetDevicesWithType(opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [DeviceWithType];
      return this.apiClient.callApi(
        '/devices/with-device-type', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceControllerUpdateById operation.
     * @callback module:api/DeviceControllerApi~deviceControllerUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId} opts.deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId 
     * @param {module:api/DeviceControllerApi~deviceControllerUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deviceControllerUpdateById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['deviceExcludingIdSerialNoDataLoggerIdDeviceTypeId'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceControllerUpdateById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/device/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
