/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import EventExcludingIdResolvedTimestampResolutionTimestamp from '../model/EventExcludingIdResolvedTimestampResolutionTimestamp';
import EventRelatedDevice from '../model/EventRelatedDevice';
import EventRelatedDeviceExcludingId from '../model/EventRelatedDeviceExcludingId';
import EventRule from '../model/EventRule';
import EventRuleSubscription from '../model/EventRuleSubscription';
import EventRuleSubscriptionExcludingIdLastExecTimestamp from '../model/EventRuleSubscriptionExcludingIdLastExecTimestamp';
import RequestEventCreateRule from '../model/RequestEventCreateRule';
import ResponseEventAssetEvents from '../model/ResponseEventAssetEvents';

/**
* EventController service.
* @module api/EventControllerApi
* @version 3.0.1
*/
export default class EventControllerApi {

    /**
    * Constructs a new EventControllerApi. 
    * @alias module:api/EventControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventControllerCreateNow operation.
     * @callback module:api/EventControllerApi~eventControllerCreateNowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/EventExcludingIdResolvedTimestampResolutionTimestamp} opts.eventExcludingIdResolvedTimestampResolutionTimestamp 
     * @param {module:api/EventControllerApi~eventControllerCreateNowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    eventControllerCreateNow(opts, callback) {
      opts = opts || {};
      let postBody = opts['eventExcludingIdResolvedTimestampResolutionTimestamp'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventControllerCreateRelatedDev operation.
     * @callback module:api/EventControllerApi~eventControllerCreateRelatedDevCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventRelatedDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/EventRelatedDeviceExcludingId} opts.eventRelatedDeviceExcludingId 
     * @param {module:api/EventControllerApi~eventControllerCreateRelatedDevCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventRelatedDevice}
     */
    eventControllerCreateRelatedDev(opts, callback) {
      opts = opts || {};
      let postBody = opts['eventRelatedDeviceExcludingId'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventRelatedDevice;
      return this.apiClient.callApi(
        '/event/related-device', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventControllerCreateRule operation.
     * @callback module:api/EventControllerApi~eventControllerCreateRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestEventCreateRule} opts.requestEventCreateRule 
     * @param {module:api/EventControllerApi~eventControllerCreateRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventRule}
     */
    eventControllerCreateRule(opts, callback) {
      opts = opts || {};
      let postBody = opts['requestEventCreateRule'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventRule;
      return this.apiClient.callApi(
        '/event/rule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventControllerCreateRuleSubscription operation.
     * @callback module:api/EventControllerApi~eventControllerCreateRuleSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventRuleSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/EventRuleSubscriptionExcludingIdLastExecTimestamp} opts.eventRuleSubscriptionExcludingIdLastExecTimestamp 
     * @param {module:api/EventControllerApi~eventControllerCreateRuleSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventRuleSubscription}
     */
    eventControllerCreateRuleSubscription(opts, callback) {
      opts = opts || {};
      let postBody = opts['eventRuleSubscriptionExcludingIdLastExecTimestamp'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventRuleSubscription;
      return this.apiClient.callApi(
        '/event/rule/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventControllerFind operation.
     * @callback module:api/EventControllerApi~eventControllerFindCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResponseEventAssetEvents>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} assetId 
     * @param {module:api/EventControllerApi~eventControllerFindCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResponseEventAssetEvents>}
     */
    eventControllerFind(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling eventControllerFind");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ResponseEventAssetEvents];
      return this.apiClient.callApi(
        '/events/all/{assetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventControllerFindUnresolved operation.
     * @callback module:api/EventControllerApi~eventControllerFindUnresolvedCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResponseEventAssetEvents>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} assetId 
     * @param {module:api/EventControllerApi~eventControllerFindUnresolvedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResponseEventAssetEvents>}
     */
    eventControllerFindUnresolved(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling eventControllerFindUnresolved");
      }

      let pathParams = {
        'assetId': assetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ResponseEventAssetEvents];
      return this.apiClient.callApi(
        '/events/unresolved/{assetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventControllerProcessSubscriptions operation.
     * @callback module:api/EventControllerApi~eventControllerProcessSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/EventControllerApi~eventControllerProcessSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventControllerProcessSubscriptions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/process', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventControllerUpdateById operation.
     * @callback module:api/EventControllerApi~eventControllerUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/EventControllerApi~eventControllerUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventControllerUpdateById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling eventControllerUpdateById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/event/resolve/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
