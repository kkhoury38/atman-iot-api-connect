/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ResponseDeviceChannelData from '../model/ResponseDeviceChannelData';
import Timestamp from '../model/Timestamp';

/**
* DeviceChannelController service.
* @module api/DeviceChannelControllerApi
* @version 3.0.1
*/
export default class DeviceChannelControllerApi {

    /**
    * Constructs a new DeviceChannelControllerApi. 
    * @alias module:api/DeviceChannelControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deviceChannelControllerFindByPeriod operation.
     * @callback module:api/DeviceChannelControllerApi~deviceChannelControllerFindByPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDeviceChannelData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceId 
     * @param {Number} channelId 
     * @param {String} fromTS 
     * @param {String} toTs 
     * @param {Number} page 
     * @param {Number} count 
     * @param {String} groupBy 
     * @param {String} operation 
     * @param {module:api/DeviceChannelControllerApi~deviceChannelControllerFindByPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDeviceChannelData}
     */
    deviceChannelControllerFindByPeriod(deviceId, channelId, fromTS, toTs, page, count, groupBy, operation, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceChannelControllerFindByPeriod");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deviceChannelControllerFindByPeriod");
      }
      // verify the required parameter 'fromTS' is set
      if (fromTS === undefined || fromTS === null) {
        throw new Error("Missing the required parameter 'fromTS' when calling deviceChannelControllerFindByPeriod");
      }
      // verify the required parameter 'toTs' is set
      if (toTs === undefined || toTs === null) {
        throw new Error("Missing the required parameter 'toTs' when calling deviceChannelControllerFindByPeriod");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling deviceChannelControllerFindByPeriod");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling deviceChannelControllerFindByPeriod");
      }
      // verify the required parameter 'groupBy' is set
      if (groupBy === undefined || groupBy === null) {
        throw new Error("Missing the required parameter 'groupBy' when calling deviceChannelControllerFindByPeriod");
      }
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling deviceChannelControllerFindByPeriod");
      }

      let pathParams = {
        'deviceId': deviceId,
        'channelId': channelId,
        'fromTS': fromTS,
        'toTs': toTs,
        'page': page,
        'count': count,
        'groupBy': groupBy,
        'operation': operation
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseDeviceChannelData;
      return this.apiClient.callApi(
        '/device-channel/data-by-period/{deviceId}/{channelId}/from/{fromTS}/to/{toTs}/page/{page}/count/{count}/groupBy/{groupBy}/operation/{operation}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceChannelControllerFindDeviceAllLastRecordedTS operation.
     * @callback module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceAllLastRecordedTSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Timestamp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceId 
     * @param {module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceAllLastRecordedTSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Timestamp}
     */
    deviceChannelControllerFindDeviceAllLastRecordedTS(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceChannelControllerFindDeviceAllLastRecordedTS");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Timestamp;
      return this.apiClient.callApi(
        '/device-channel/last-timestamp-in-device/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceChannelControllerFindDeviceAllLastTS operation.
     * @callback module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceAllLastTSCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResponseDeviceChannelData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceId 
     * @param {module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceAllLastTSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResponseDeviceChannelData>}
     */
    deviceChannelControllerFindDeviceAllLastTS(deviceId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceChannelControllerFindDeviceAllLastTS");
      }

      let pathParams = {
        'deviceId': deviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ResponseDeviceChannelData];
      return this.apiClient.callApi(
        '/device-channel/data-last-timestamp/all-channels/{deviceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceChannelControllerFindDeviceChannelLastTS operation.
     * @callback module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceChannelLastTSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDeviceChannelData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} deviceId 
     * @param {Number} channelId 
     * @param {module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceChannelLastTSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDeviceChannelData}
     */
    deviceChannelControllerFindDeviceChannelLastTS(deviceId, channelId, callback) {
      let postBody = null;
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deviceChannelControllerFindDeviceChannelLastTS");
      }
      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deviceChannelControllerFindDeviceChannelLastTS");
      }

      let pathParams = {
        'deviceId': deviceId,
        'channelId': channelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseDeviceChannelData;
      return this.apiClient.callApi(
        '/device-channel/data-last-timestamp/{deviceId}/{channelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceChannelControllerFindDeviceChannelLastTSSnChName operation.
     * @callback module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceChannelLastTSSnChNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseDeviceChannelData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} serialNo 
     * @param {String} channelName 
     * @param {module:api/DeviceChannelControllerApi~deviceChannelControllerFindDeviceChannelLastTSSnChNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseDeviceChannelData}
     */
    deviceChannelControllerFindDeviceChannelLastTSSnChName(serialNo, channelName, callback) {
      let postBody = null;
      // verify the required parameter 'serialNo' is set
      if (serialNo === undefined || serialNo === null) {
        throw new Error("Missing the required parameter 'serialNo' when calling deviceChannelControllerFindDeviceChannelLastTSSnChName");
      }
      // verify the required parameter 'channelName' is set
      if (channelName === undefined || channelName === null) {
        throw new Error("Missing the required parameter 'channelName' when calling deviceChannelControllerFindDeviceChannelLastTSSnChName");
      }

      let pathParams = {
        'serialNo': serialNo,
        'channelName': channelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponseDeviceChannelData;
      return this.apiClient.callApi(
        '/device-channel/data-last-timestamp-by-name/{serialNo}/{channelName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
