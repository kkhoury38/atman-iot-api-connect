/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DashboardElement model module.
 * @module model/DashboardElement
 * @version 3.0.1
 */
class DashboardElement {
    /**
     * Constructs a new <code>DashboardElement</code>.
     * @alias module:model/DashboardElement
     * @param assetId {Number} ID of Asset that Dashboard Element belongs to
     * @param userId {Number} ID of User that Dashboard Element belongs to
     * @param deviceCategory {String} Device Category
     * @param channelCategory {String} Channel Category
     * @param elementType {String} Element Type
     * @param position {Number} Element Position
     * @param location {String} Element Location: mainDashboard / assetDashboard
     * @param timeWindow {Number} Time Window
     * @param operation {String} Data Operation
     * @param groupBy {String} Data group by
     */
    constructor(assetId, userId, deviceCategory, channelCategory, elementType, position, location, timeWindow, operation, groupBy) { 
        
        DashboardElement.initialize(this, assetId, userId, deviceCategory, channelCategory, elementType, position, location, timeWindow, operation, groupBy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, assetId, userId, deviceCategory, channelCategory, elementType, position, location, timeWindow, operation, groupBy) { 
        obj['assetId'] = assetId;
        obj['userId'] = userId;
        obj['deviceCategory'] = deviceCategory;
        obj['channelCategory'] = channelCategory;
        obj['elementType'] = elementType;
        obj['position'] = position;
        obj['location'] = location;
        obj['timeWindow'] = timeWindow;
        obj['operation'] = operation;
        obj['groupBy'] = groupBy;
    }

    /**
     * Constructs a <code>DashboardElement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DashboardElement} obj Optional instance to populate.
     * @return {module:model/DashboardElement} The populated <code>DashboardElement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DashboardElement();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('deviceCategory')) {
                obj['deviceCategory'] = ApiClient.convertToType(data['deviceCategory'], 'String');
            }
            if (data.hasOwnProperty('channelCategory')) {
                obj['channelCategory'] = ApiClient.convertToType(data['channelCategory'], 'String');
            }
            if (data.hasOwnProperty('elementType')) {
                obj['elementType'] = ApiClient.convertToType(data['elementType'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'Number');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('timeWindow')) {
                obj['timeWindow'] = ApiClient.convertToType(data['timeWindow'], 'Number');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('groupBy')) {
                obj['groupBy'] = ApiClient.convertToType(data['groupBy'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('xLabel')) {
                obj['xLabel'] = ApiClient.convertToType(data['xLabel'], 'String');
            }
            if (data.hasOwnProperty('yLabel')) {
                obj['yLabel'] = ApiClient.convertToType(data['yLabel'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Automatically generated ID
 * @member {Number} id
 */
DashboardElement.prototype['id'] = undefined;

/**
 * ID of Asset that Dashboard Element belongs to
 * @member {Number} assetId
 */
DashboardElement.prototype['assetId'] = undefined;

/**
 * ID of User that Dashboard Element belongs to
 * @member {Number} userId
 */
DashboardElement.prototype['userId'] = undefined;

/**
 * Device Category
 * @member {String} deviceCategory
 */
DashboardElement.prototype['deviceCategory'] = undefined;

/**
 * Channel Category
 * @member {String} channelCategory
 */
DashboardElement.prototype['channelCategory'] = undefined;

/**
 * Element Type
 * @member {String} elementType
 */
DashboardElement.prototype['elementType'] = undefined;

/**
 * Element Position
 * @member {Number} position
 */
DashboardElement.prototype['position'] = undefined;

/**
 * Element Location: mainDashboard / assetDashboard
 * @member {String} location
 */
DashboardElement.prototype['location'] = undefined;

/**
 * Time Window
 * @member {Number} timeWindow
 */
DashboardElement.prototype['timeWindow'] = undefined;

/**
 * Data Operation
 * @member {String} operation
 */
DashboardElement.prototype['operation'] = undefined;

/**
 * Data group by
 * @member {String} groupBy
 */
DashboardElement.prototype['groupBy'] = undefined;

/**
 * Element Title
 * @member {String} title
 */
DashboardElement.prototype['title'] = undefined;

/**
 * Element X Label
 * @member {String} xLabel
 */
DashboardElement.prototype['xLabel'] = undefined;

/**
 * Element Y Label
 * @member {String} yLabel
 */
DashboardElement.prototype['yLabel'] = undefined;






export default DashboardElement;

