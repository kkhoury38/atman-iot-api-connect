/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventRule model module.
 * @module model/EventRule
 * @version 3.0.1
 */
class EventRule {
    /**
     * Constructs a new <code>EventRule</code>.
     * @alias module:model/EventRule
     * @param scope {String} Rule scope
     * @param action {String} Rule action
     */
    constructor(scope, action) { 
        
        EventRule.initialize(this, scope, action);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scope, action) { 
        obj['scope'] = scope;
        obj['action'] = action;
    }

    /**
     * Constructs a <code>EventRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventRule} obj Optional instance to populate.
     * @return {module:model/EventRule} The populated <code>EventRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventRule();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('actionParameters')) {
                obj['actionParameters'] = ApiClient.convertToType(data['actionParameters'], 'String');
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = ApiClient.convertToType(data['rule'], 'String');
            }
            if (data.hasOwnProperty('executionPeriod')) {
                obj['executionPeriod'] = ApiClient.convertToType(data['executionPeriod'], 'Number');
            }
            if (data.hasOwnProperty('lastExecTimestamp')) {
                obj['lastExecTimestamp'] = ApiClient.convertToType(data['lastExecTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('activated')) {
                obj['activated'] = ApiClient.convertToType(data['activated'], 'Boolean');
            }
            if (data.hasOwnProperty('inProgress')) {
                obj['inProgress'] = ApiClient.convertToType(data['inProgress'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Automatically generated ID
 * @member {Number} id
 */
EventRule.prototype['id'] = undefined;

/**
 * Rule description
 * @member {String} description
 */
EventRule.prototype['description'] = undefined;

/**
 * Rule scope
 * @member {String} scope
 */
EventRule.prototype['scope'] = undefined;

/**
 * Event Detection Algorithm
 * @member {String} algorithm
 */
EventRule.prototype['algorithm'] = undefined;

/**
 * Rule action
 * @member {String} action
 */
EventRule.prototype['action'] = undefined;

/**
 * Rule action parameters
 * @member {String} actionParameters
 */
EventRule.prototype['actionParameters'] = undefined;

/**
 * JSON Rule
 * @member {String} rule
 */
EventRule.prototype['rule'] = undefined;

/**
 * EventRule execution period - seconds
 * @member {Number} executionPeriod
 */
EventRule.prototype['executionPeriod'] = undefined;

/**
 * Last execution timestamp
 * @member {Date} lastExecTimestamp
 */
EventRule.prototype['lastExecTimestamp'] = undefined;

/**
 * Is set to true when EventRule has been activated
 * @member {Boolean} activated
 */
EventRule.prototype['activated'] = undefined;

/**
 * Is automaticaly set to true when EventRule is being processed
 * @member {Boolean} inProgress
 */
EventRule.prototype['inProgress'] = undefined;






export default EventRule;

