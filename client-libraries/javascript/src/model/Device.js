/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module model/Device
 * @version 3.0.1
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * @alias module:model/Device
     * @param serialNo {String} Device serial number
     * @param dataLoggerId {Number} ID of DataLogger that Device belongs to
     */
    constructor(serialNo, dataLoggerId) { 
        
        Device.initialize(this, serialNo, dataLoggerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serialNo, dataLoggerId) { 
        obj['serialNo'] = serialNo;
        obj['dataLoggerId'] = dataLoggerId;
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('serialNo')) {
                obj['serialNo'] = ApiClient.convertToType(data['serialNo'], 'String');
            }
            if (data.hasOwnProperty('dataLoggerId')) {
                obj['dataLoggerId'] = ApiClient.convertToType(data['dataLoggerId'], 'Number');
            }
            if (data.hasOwnProperty('deviceTypeId')) {
                obj['deviceTypeId'] = ApiClient.convertToType(data['deviceTypeId'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Automatically generated ID
 * @member {Number} id
 */
Device.prototype['id'] = undefined;

/**
 * Device description
 * @member {String} description
 */
Device.prototype['description'] = undefined;

/**
 * Device serial number
 * @member {String} serialNo
 */
Device.prototype['serialNo'] = undefined;

/**
 * ID of DataLogger that Device belongs to
 * @member {Number} dataLoggerId
 */
Device.prototype['dataLoggerId'] = undefined;

/**
 * @member {Number} deviceTypeId
 */
Device.prototype['deviceTypeId'] = undefined;






export default Device;

