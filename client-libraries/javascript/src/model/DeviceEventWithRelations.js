/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelWithRelations from './ChannelWithRelations';
import DeviceWithRelations from './DeviceWithRelations';
import EventRuleWithRelations from './EventRuleWithRelations';

/**
 * The DeviceEventWithRelations model module.
 * @module model/DeviceEventWithRelations
 * @version 3.0.1
 */
class DeviceEventWithRelations {
    /**
     * Constructs a new <code>DeviceEventWithRelations</code>.
     * (Schema options: { includeRelations: true })
     * @alias module:model/DeviceEventWithRelations
     * @param deviceId {Number} ID of Device associated with Event
     * @param channelId {Number} ID of Device associated with Event
     * @param eventRuleId {Number} ID of EventRule triggered
     * @param severity {String} Event severity - Can be  LOW / MEDIUM / HIGH
     * @param resolved {Boolean} Set to true if Event has been resolved
     * @param viewedBy {String} Set to true if Event has been resolved
     * @param timestamp {Date} Event creation timestamp
     */
    constructor(deviceId, channelId, eventRuleId, severity, resolved, viewedBy, timestamp) { 
        
        DeviceEventWithRelations.initialize(this, deviceId, channelId, eventRuleId, severity, resolved, viewedBy, timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceId, channelId, eventRuleId, severity, resolved, viewedBy, timestamp) { 
        obj['deviceId'] = deviceId;
        obj['channelId'] = channelId;
        obj['eventRuleId'] = eventRuleId;
        obj['severity'] = severity;
        obj['resolved'] = resolved;
        obj['viewedBy'] = viewedBy;
        obj['timestamp'] = timestamp;
    }

    /**
     * Constructs a <code>DeviceEventWithRelations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceEventWithRelations} obj Optional instance to populate.
     * @return {module:model/DeviceEventWithRelations} The populated <code>DeviceEventWithRelations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceEventWithRelations();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('deviceId')) {
                obj['deviceId'] = ApiClient.convertToType(data['deviceId'], 'Number');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'Number');
            }
            if (data.hasOwnProperty('eventRuleId')) {
                obj['eventRuleId'] = ApiClient.convertToType(data['eventRuleId'], 'Number');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('resolved')) {
                obj['resolved'] = ApiClient.convertToType(data['resolved'], 'Boolean');
            }
            if (data.hasOwnProperty('viewedBy')) {
                obj['viewedBy'] = ApiClient.convertToType(data['viewedBy'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('resolutionTimestamp')) {
                obj['resolutionTimestamp'] = ApiClient.convertToType(data['resolutionTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = DeviceWithRelations.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ChannelWithRelations.constructFromObject(data['channel']);
            }
            if (data.hasOwnProperty('eventRule')) {
                obj['eventRule'] = EventRuleWithRelations.constructFromObject(data['eventRule']);
            }
        }
        return obj;
    }


}

/**
 * Automatically generated ID
 * @member {Number} id
 */
DeviceEventWithRelations.prototype['id'] = undefined;

/**
 * ID of Device associated with Event
 * @member {Number} deviceId
 */
DeviceEventWithRelations.prototype['deviceId'] = undefined;

/**
 * ID of Device associated with Event
 * @member {Number} channelId
 */
DeviceEventWithRelations.prototype['channelId'] = undefined;

/**
 * ID of EventRule triggered
 * @member {Number} eventRuleId
 */
DeviceEventWithRelations.prototype['eventRuleId'] = undefined;

/**
 * Event severity - Can be  LOW / MEDIUM / HIGH
 * @member {String} severity
 */
DeviceEventWithRelations.prototype['severity'] = undefined;

/**
 * Event description
 * @member {String} description
 */
DeviceEventWithRelations.prototype['description'] = undefined;

/**
 * Set to true if Event has been resolved
 * @member {Boolean} resolved
 */
DeviceEventWithRelations.prototype['resolved'] = undefined;

/**
 * Set to true if Event has been resolved
 * @member {String} viewedBy
 */
DeviceEventWithRelations.prototype['viewedBy'] = undefined;

/**
 * Event creation timestamp
 * @member {Date} timestamp
 */
DeviceEventWithRelations.prototype['timestamp'] = undefined;

/**
 * Event resolution timestamp
 * @member {Date} resolutionTimestamp
 */
DeviceEventWithRelations.prototype['resolutionTimestamp'] = undefined;

/**
 * @member {module:model/DeviceWithRelations} device
 */
DeviceEventWithRelations.prototype['device'] = undefined;

/**
 * @member {module:model/ChannelWithRelations} channel
 */
DeviceEventWithRelations.prototype['channel'] = undefined;

/**
 * @member {module:model/EventRuleWithRelations} eventRule
 */
DeviceEventWithRelations.prototype['eventRule'] = undefined;






export default DeviceEventWithRelations;

