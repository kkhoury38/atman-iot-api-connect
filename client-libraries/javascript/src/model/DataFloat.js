/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataFloat model module.
 * @module model/DataFloat
 * @version 3.0.1
 */
class DataFloat {
    /**
     * Constructs a new <code>DataFloat</code>.
     * @alias module:model/DataFloat
     * @param period {Number} Recording period - seconds
     * @param measurement {Number} Recorded measurement
     * @param timestamp {Date} Timestamp
     * @param channelId {Number} ID of Channel that DataFloat belongs to
     */
    constructor(period, measurement, timestamp, channelId) { 
        
        DataFloat.initialize(this, period, measurement, timestamp, channelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, period, measurement, timestamp, channelId) { 
        obj['period'] = period;
        obj['measurement'] = measurement;
        obj['timestamp'] = timestamp;
        obj['channelId'] = channelId;
    }

    /**
     * Constructs a <code>DataFloat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataFloat} obj Optional instance to populate.
     * @return {module:model/DataFloat} The populated <code>DataFloat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataFloat();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('measurement')) {
                obj['measurement'] = ApiClient.convertToType(data['measurement'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Automatically generated ID
 * @member {Number} id
 */
DataFloat.prototype['id'] = undefined;

/**
 * Recording period - seconds
 * @member {Number} period
 */
DataFloat.prototype['period'] = undefined;

/**
 * Recorded measurement
 * @member {Number} measurement
 */
DataFloat.prototype['measurement'] = undefined;

/**
 * Timestamp
 * @member {Date} timestamp
 */
DataFloat.prototype['timestamp'] = undefined;

/**
 * ID of Channel that DataFloat belongs to
 * @member {Number} channelId
 */
DataFloat.prototype['channelId'] = undefined;






export default DataFloat;

