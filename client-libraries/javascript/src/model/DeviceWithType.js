/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Device from './Device';
import DeviceType from './DeviceType';

/**
 * The DeviceWithType model module.
 * @module model/DeviceWithType
 * @version 3.0.1
 */
class DeviceWithType {
    /**
     * Constructs a new <code>DeviceWithType</code>.
     * @alias module:model/DeviceWithType
     * @param deviceType {module:model/DeviceType} 
     * @param device {module:model/Device} 
     */
    constructor(deviceType, device) { 
        
        DeviceWithType.initialize(this, deviceType, device);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceType, device) { 
        obj['deviceType'] = deviceType;
        obj['device'] = device;
    }

    /**
     * Constructs a <code>DeviceWithType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceWithType} obj Optional instance to populate.
     * @return {module:model/DeviceWithType} The populated <code>DeviceWithType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceWithType();

            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = DeviceType.constructFromObject(data['deviceType']);
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = Device.constructFromObject(data['device']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/DeviceType} deviceType
 */
DeviceWithType.prototype['deviceType'] = undefined;

/**
 * @member {module:model/Device} device
 */
DeviceWithType.prototype['device'] = undefined;






export default DeviceWithType;

