/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Timestamp from './Timestamp';

/**
 * The MeasurementSample model module.
 * @module model/MeasurementSample
 * @version 3.0.1
 */
class MeasurementSample {
    /**
     * Constructs a new <code>MeasurementSample</code>.
     * @alias module:model/MeasurementSample
     * @param value {Object} measurement: string / number
     * @param period {Number} 
     * @param timestamp {module:model/Timestamp} 
     * @param scope {String} Scope
     */
    constructor(value, period, timestamp, scope) { 
        
        MeasurementSample.initialize(this, value, period, timestamp, scope);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value, period, timestamp, scope) { 
        obj['value'] = value;
        obj['period'] = period;
        obj['timestamp'] = timestamp;
        obj['scope'] = scope;
    }

    /**
     * Constructs a <code>MeasurementSample</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeasurementSample} obj Optional instance to populate.
     * @return {module:model/MeasurementSample} The populated <code>MeasurementSample</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeasurementSample();

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = Timestamp.constructFromObject(data['timestamp']);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }


}

/**
 * measurement: string / number
 * @member {Object} value
 */
MeasurementSample.prototype['value'] = undefined;

/**
 * @member {Number} period
 */
MeasurementSample.prototype['period'] = undefined;

/**
 * @member {module:model/Timestamp} timestamp
 */
MeasurementSample.prototype['timestamp'] = undefined;

/**
 * Scope
 * @member {String} scope
 */
MeasurementSample.prototype['scope'] = undefined;






export default MeasurementSample;

