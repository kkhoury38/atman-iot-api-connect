/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataLoggerExcludingIdAuthTokenConfigUserId model module.
 * @module model/DataLoggerExcludingIdAuthTokenConfigUserId
 * @version 3.0.1
 */
class DataLoggerExcludingIdAuthTokenConfigUserId {
    /**
     * Constructs a new <code>DataLoggerExcludingIdAuthTokenConfigUserId</code>.
     * (Schema options: { exclude: [ &#39;id&#39;, &#39;authToken&#39;, &#39;config&#39;, &#39;userId&#39; ] })
     * @alias module:model/DataLoggerExcludingIdAuthTokenConfigUserId
     * @param connectionType {String} Method used by DataLogger to send data to the system. At present only FTP implemented
     * @param fileFormat {String} Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats
     * @param autoInit {Boolean} Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration
     * @param dataCompressed {Boolean} Flag for selecting if DataLogger sends compressed files
     */
    constructor(connectionType, fileFormat, autoInit, dataCompressed) { 
        
        DataLoggerExcludingIdAuthTokenConfigUserId.initialize(this, connectionType, fileFormat, autoInit, dataCompressed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionType, fileFormat, autoInit, dataCompressed) { 
        obj['connectionType'] = connectionType;
        obj['fileFormat'] = fileFormat;
        obj['autoInit'] = autoInit;
        obj['dataCompressed'] = dataCompressed;
    }

    /**
     * Constructs a <code>DataLoggerExcludingIdAuthTokenConfigUserId</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataLoggerExcludingIdAuthTokenConfigUserId} obj Optional instance to populate.
     * @return {module:model/DataLoggerExcludingIdAuthTokenConfigUserId} The populated <code>DataLoggerExcludingIdAuthTokenConfigUserId</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataLoggerExcludingIdAuthTokenConfigUserId();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = ApiClient.convertToType(data['connectionType'], 'String');
            }
            if (data.hasOwnProperty('fileFormat')) {
                obj['fileFormat'] = ApiClient.convertToType(data['fileFormat'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('passwd')) {
                obj['passwd'] = ApiClient.convertToType(data['passwd'], 'String');
            }
            if (data.hasOwnProperty('autoInit')) {
                obj['autoInit'] = ApiClient.convertToType(data['autoInit'], 'Boolean');
            }
            if (data.hasOwnProperty('dataCompressed')) {
                obj['dataCompressed'] = ApiClient.convertToType(data['dataCompressed'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * Datalogger description
 * @member {String} description
 */
DataLoggerExcludingIdAuthTokenConfigUserId.prototype['description'] = undefined;

/**
 * Method used by DataLogger to send data to the system. At present only FTP implemented
 * @member {String} connectionType
 */
DataLoggerExcludingIdAuthTokenConfigUserId.prototype['connectionType'] = undefined;

/**
 * Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats
 * @member {String} fileFormat
 */
DataLoggerExcludingIdAuthTokenConfigUserId.prototype['fileFormat'] = undefined;

/**
 * Username of system FTP account, where the DataLogger sends the data (if applicable)
 * @member {String} username
 */
DataLoggerExcludingIdAuthTokenConfigUserId.prototype['username'] = undefined;

/**
 * Password of system FTP account, where the DataLogger sends the data (if applicable)
 * @member {String} passwd
 */
DataLoggerExcludingIdAuthTokenConfigUserId.prototype['passwd'] = undefined;

/**
 * Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration
 * @member {Boolean} autoInit
 */
DataLoggerExcludingIdAuthTokenConfigUserId.prototype['autoInit'] = undefined;

/**
 * Flag for selecting if DataLogger sends compressed files
 * @member {Boolean} dataCompressed
 */
DataLoggerExcludingIdAuthTokenConfigUserId.prototype['dataCompressed'] = undefined;






export default DataLoggerExcludingIdAuthTokenConfigUserId;

