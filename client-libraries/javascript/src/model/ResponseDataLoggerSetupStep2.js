/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Device from './Device';
import DeviceTypeExtended from './DeviceTypeExtended';
import MeasurementSample from './MeasurementSample';

/**
 * The ResponseDataLoggerSetupStep2 model module.
 * @module model/ResponseDataLoggerSetupStep2
 * @version 3.0.1
 */
class ResponseDataLoggerSetupStep2 {
    /**
     * Constructs a new <code>ResponseDataLoggerSetupStep2</code>.
     * @alias module:model/ResponseDataLoggerSetupStep2
     * @param deviceTypes {Array.<module:model/DeviceTypeExtended>} 
     * @param devices {Array.<module:model/Device>} 
     * @param errorCount {Number} Sample Value
     */
    constructor(deviceTypes, devices, errorCount) { 
        
        ResponseDataLoggerSetupStep2.initialize(this, deviceTypes, devices, errorCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceTypes, devices, errorCount) { 
        obj['deviceTypes'] = deviceTypes;
        obj['devices'] = devices;
        obj['errorCount'] = errorCount;
    }

    /**
     * Constructs a <code>ResponseDataLoggerSetupStep2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseDataLoggerSetupStep2} obj Optional instance to populate.
     * @return {module:model/ResponseDataLoggerSetupStep2} The populated <code>ResponseDataLoggerSetupStep2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseDataLoggerSetupStep2();

            if (data.hasOwnProperty('deviceTypes')) {
                obj['deviceTypes'] = ApiClient.convertToType(data['deviceTypes'], [DeviceTypeExtended]);
            }
            if (data.hasOwnProperty('devices')) {
                obj['devices'] = ApiClient.convertToType(data['devices'], [Device]);
            }
            if (data.hasOwnProperty('sample')) {
                obj['sample'] = MeasurementSample.constructFromObject(data['sample']);
            }
            if (data.hasOwnProperty('errorCount')) {
                obj['errorCount'] = ApiClient.convertToType(data['errorCount'], 'Number');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * @member {Array.<module:model/DeviceTypeExtended>} deviceTypes
 */
ResponseDataLoggerSetupStep2.prototype['deviceTypes'] = undefined;

/**
 * @member {Array.<module:model/Device>} devices
 */
ResponseDataLoggerSetupStep2.prototype['devices'] = undefined;

/**
 * @member {module:model/MeasurementSample} sample
 */
ResponseDataLoggerSetupStep2.prototype['sample'] = undefined;

/**
 * Sample Value
 * @member {Number} errorCount
 */
ResponseDataLoggerSetupStep2.prototype['errorCount'] = undefined;

/**
 * @member {Array.<String>} errors
 */
ResponseDataLoggerSetupStep2.prototype['errors'] = undefined;






export default ResponseDataLoggerSetupStep2;

