# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DashboardElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'asset_id': 'float',
        'user_id': 'float',
        'device_category': 'str',
        'channel_category': 'str',
        'element_type': 'str',
        'position': 'float',
        'location': 'str',
        'time_window': 'float',
        'operation': 'str',
        'group_by': 'str',
        'title': 'str',
        'x_label': 'str',
        'y_label': 'str'
    }

    attribute_map = {
        'id': 'id',
        'asset_id': 'assetId',
        'user_id': 'userId',
        'device_category': 'deviceCategory',
        'channel_category': 'channelCategory',
        'element_type': 'elementType',
        'position': 'position',
        'location': 'location',
        'time_window': 'timeWindow',
        'operation': 'operation',
        'group_by': 'groupBy',
        'title': 'title',
        'x_label': 'xLabel',
        'y_label': 'yLabel'
    }

    def __init__(self, id=None, asset_id=None, user_id=None, device_category=None, channel_category=None, element_type=None, position=None, location=None, time_window=None, operation=None, group_by=None, title=None, x_label=None, y_label=None, local_vars_configuration=None):  # noqa: E501
        """DashboardElement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._asset_id = None
        self._user_id = None
        self._device_category = None
        self._channel_category = None
        self._element_type = None
        self._position = None
        self._location = None
        self._time_window = None
        self._operation = None
        self._group_by = None
        self._title = None
        self._x_label = None
        self._y_label = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.asset_id = asset_id
        self.user_id = user_id
        self.device_category = device_category
        self.channel_category = channel_category
        self.element_type = element_type
        self.position = position
        self.location = location
        self.time_window = time_window
        self.operation = operation
        self.group_by = group_by
        if title is not None:
            self.title = title
        if x_label is not None:
            self.x_label = x_label
        if y_label is not None:
            self.y_label = y_label

    @property
    def id(self):
        """Gets the id of this DashboardElement.  # noqa: E501

        Automatically generated ID  # noqa: E501

        :return: The id of this DashboardElement.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DashboardElement.

        Automatically generated ID  # noqa: E501

        :param id: The id of this DashboardElement.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def asset_id(self):
        """Gets the asset_id of this DashboardElement.  # noqa: E501

        ID of Asset that Dashboard Element belongs to  # noqa: E501

        :return: The asset_id of this DashboardElement.  # noqa: E501
        :rtype: float
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DashboardElement.

        ID of Asset that Dashboard Element belongs to  # noqa: E501

        :param asset_id: The asset_id of this DashboardElement.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and asset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def user_id(self):
        """Gets the user_id of this DashboardElement.  # noqa: E501

        ID of User that Dashboard Element belongs to  # noqa: E501

        :return: The user_id of this DashboardElement.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DashboardElement.

        ID of User that Dashboard Element belongs to  # noqa: E501

        :param user_id: The user_id of this DashboardElement.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def device_category(self):
        """Gets the device_category of this DashboardElement.  # noqa: E501

        Device Category  # noqa: E501

        :return: The device_category of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._device_category

    @device_category.setter
    def device_category(self, device_category):
        """Sets the device_category of this DashboardElement.

        Device Category  # noqa: E501

        :param device_category: The device_category of this DashboardElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and device_category is None:  # noqa: E501
            raise ValueError("Invalid value for `device_category`, must not be `None`")  # noqa: E501

        self._device_category = device_category

    @property
    def channel_category(self):
        """Gets the channel_category of this DashboardElement.  # noqa: E501

        Channel Category  # noqa: E501

        :return: The channel_category of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._channel_category

    @channel_category.setter
    def channel_category(self, channel_category):
        """Sets the channel_category of this DashboardElement.

        Channel Category  # noqa: E501

        :param channel_category: The channel_category of this DashboardElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and channel_category is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_category`, must not be `None`")  # noqa: E501

        self._channel_category = channel_category

    @property
    def element_type(self):
        """Gets the element_type of this DashboardElement.  # noqa: E501

        Element Type  # noqa: E501

        :return: The element_type of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this DashboardElement.

        Element Type  # noqa: E501

        :param element_type: The element_type of this DashboardElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and element_type is None:  # noqa: E501
            raise ValueError("Invalid value for `element_type`, must not be `None`")  # noqa: E501

        self._element_type = element_type

    @property
    def position(self):
        """Gets the position of this DashboardElement.  # noqa: E501

        Element Position  # noqa: E501

        :return: The position of this DashboardElement.  # noqa: E501
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this DashboardElement.

        Element Position  # noqa: E501

        :param position: The position of this DashboardElement.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and position is None:  # noqa: E501
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def location(self):
        """Gets the location of this DashboardElement.  # noqa: E501

        Element Location: mainDashboard / assetDashboard  # noqa: E501

        :return: The location of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DashboardElement.

        Element Location: mainDashboard / assetDashboard  # noqa: E501

        :param location: The location of this DashboardElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def time_window(self):
        """Gets the time_window of this DashboardElement.  # noqa: E501

        Time Window  # noqa: E501

        :return: The time_window of this DashboardElement.  # noqa: E501
        :rtype: float
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this DashboardElement.

        Time Window  # noqa: E501

        :param time_window: The time_window of this DashboardElement.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and time_window is None:  # noqa: E501
            raise ValueError("Invalid value for `time_window`, must not be `None`")  # noqa: E501

        self._time_window = time_window

    @property
    def operation(self):
        """Gets the operation of this DashboardElement.  # noqa: E501

        Data Operation  # noqa: E501

        :return: The operation of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this DashboardElement.

        Data Operation  # noqa: E501

        :param operation: The operation of this DashboardElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def group_by(self):
        """Gets the group_by of this DashboardElement.  # noqa: E501

        Data group by  # noqa: E501

        :return: The group_by of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this DashboardElement.

        Data group by  # noqa: E501

        :param group_by: The group_by of this DashboardElement.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and group_by is None:  # noqa: E501
            raise ValueError("Invalid value for `group_by`, must not be `None`")  # noqa: E501

        self._group_by = group_by

    @property
    def title(self):
        """Gets the title of this DashboardElement.  # noqa: E501

        Element Title  # noqa: E501

        :return: The title of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DashboardElement.

        Element Title  # noqa: E501

        :param title: The title of this DashboardElement.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def x_label(self):
        """Gets the x_label of this DashboardElement.  # noqa: E501

        Element X Label  # noqa: E501

        :return: The x_label of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._x_label

    @x_label.setter
    def x_label(self, x_label):
        """Sets the x_label of this DashboardElement.

        Element X Label  # noqa: E501

        :param x_label: The x_label of this DashboardElement.  # noqa: E501
        :type: str
        """

        self._x_label = x_label

    @property
    def y_label(self):
        """Gets the y_label of this DashboardElement.  # noqa: E501

        Element Y Label  # noqa: E501

        :return: The y_label of this DashboardElement.  # noqa: E501
        :rtype: str
        """
        return self._y_label

    @y_label.setter
    def y_label(self, y_label):
        """Sets the y_label of this DashboardElement.

        Element Y Label  # noqa: E501

        :param y_label: The y_label of this DashboardElement.  # noqa: E501
        :type: str
        """

        self._y_label = y_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DashboardElement):
            return True

        return self.to_dict() != other.to_dict()
