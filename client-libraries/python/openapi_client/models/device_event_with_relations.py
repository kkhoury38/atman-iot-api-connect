# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DeviceEventWithRelations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'device_id': 'float',
        'channel_id': 'float',
        'event_rule_id': 'float',
        'severity': 'str',
        'description': 'str',
        'resolved': 'bool',
        'viewed_by': 'str',
        'timestamp': 'datetime',
        'resolution_timestamp': 'datetime',
        'device': 'DeviceWithRelations',
        'channel': 'ChannelWithRelations',
        'event_rule': 'EventRuleWithRelations'
    }

    attribute_map = {
        'id': 'id',
        'device_id': 'deviceId',
        'channel_id': 'channelId',
        'event_rule_id': 'eventRuleId',
        'severity': 'severity',
        'description': 'description',
        'resolved': 'resolved',
        'viewed_by': 'viewedBy',
        'timestamp': 'timestamp',
        'resolution_timestamp': 'resolutionTimestamp',
        'device': 'device',
        'channel': 'channel',
        'event_rule': 'eventRule'
    }

    def __init__(self, id=None, device_id=None, channel_id=None, event_rule_id=None, severity=None, description=None, resolved=None, viewed_by=None, timestamp=None, resolution_timestamp=None, device=None, channel=None, event_rule=None, local_vars_configuration=None):  # noqa: E501
        """DeviceEventWithRelations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._device_id = None
        self._channel_id = None
        self._event_rule_id = None
        self._severity = None
        self._description = None
        self._resolved = None
        self._viewed_by = None
        self._timestamp = None
        self._resolution_timestamp = None
        self._device = None
        self._channel = None
        self._event_rule = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.device_id = device_id
        self.channel_id = channel_id
        self.event_rule_id = event_rule_id
        self.severity = severity
        if description is not None:
            self.description = description
        self.resolved = resolved
        self.viewed_by = viewed_by
        self.timestamp = timestamp
        if resolution_timestamp is not None:
            self.resolution_timestamp = resolution_timestamp
        if device is not None:
            self.device = device
        if channel is not None:
            self.channel = channel
        if event_rule is not None:
            self.event_rule = event_rule

    @property
    def id(self):
        """Gets the id of this DeviceEventWithRelations.  # noqa: E501

        Automatically generated ID  # noqa: E501

        :return: The id of this DeviceEventWithRelations.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceEventWithRelations.

        Automatically generated ID  # noqa: E501

        :param id: The id of this DeviceEventWithRelations.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this DeviceEventWithRelations.  # noqa: E501

        ID of Device associated with Event  # noqa: E501

        :return: The device_id of this DeviceEventWithRelations.  # noqa: E501
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceEventWithRelations.

        ID of Device associated with Event  # noqa: E501

        :param device_id: The device_id of this DeviceEventWithRelations.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and device_id is None:  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def channel_id(self):
        """Gets the channel_id of this DeviceEventWithRelations.  # noqa: E501

        ID of Device associated with Event  # noqa: E501

        :return: The channel_id of this DeviceEventWithRelations.  # noqa: E501
        :rtype: float
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this DeviceEventWithRelations.

        ID of Device associated with Event  # noqa: E501

        :param channel_id: The channel_id of this DeviceEventWithRelations.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and channel_id is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_id`, must not be `None`")  # noqa: E501

        self._channel_id = channel_id

    @property
    def event_rule_id(self):
        """Gets the event_rule_id of this DeviceEventWithRelations.  # noqa: E501

        ID of EventRule triggered  # noqa: E501

        :return: The event_rule_id of this DeviceEventWithRelations.  # noqa: E501
        :rtype: float
        """
        return self._event_rule_id

    @event_rule_id.setter
    def event_rule_id(self, event_rule_id):
        """Sets the event_rule_id of this DeviceEventWithRelations.

        ID of EventRule triggered  # noqa: E501

        :param event_rule_id: The event_rule_id of this DeviceEventWithRelations.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and event_rule_id is None:  # noqa: E501
            raise ValueError("Invalid value for `event_rule_id`, must not be `None`")  # noqa: E501

        self._event_rule_id = event_rule_id

    @property
    def severity(self):
        """Gets the severity of this DeviceEventWithRelations.  # noqa: E501

        Event severity - Can be  LOW / MEDIUM / HIGH  # noqa: E501

        :return: The severity of this DeviceEventWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this DeviceEventWithRelations.

        Event severity - Can be  LOW / MEDIUM / HIGH  # noqa: E501

        :param severity: The severity of this DeviceEventWithRelations.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and severity is None:  # noqa: E501
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this DeviceEventWithRelations.  # noqa: E501

        Event description  # noqa: E501

        :return: The description of this DeviceEventWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceEventWithRelations.

        Event description  # noqa: E501

        :param description: The description of this DeviceEventWithRelations.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def resolved(self):
        """Gets the resolved of this DeviceEventWithRelations.  # noqa: E501

        Set to true if Event has been resolved  # noqa: E501

        :return: The resolved of this DeviceEventWithRelations.  # noqa: E501
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this DeviceEventWithRelations.

        Set to true if Event has been resolved  # noqa: E501

        :param resolved: The resolved of this DeviceEventWithRelations.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and resolved is None:  # noqa: E501
            raise ValueError("Invalid value for `resolved`, must not be `None`")  # noqa: E501

        self._resolved = resolved

    @property
    def viewed_by(self):
        """Gets the viewed_by of this DeviceEventWithRelations.  # noqa: E501

        Set to true if Event has been resolved  # noqa: E501

        :return: The viewed_by of this DeviceEventWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._viewed_by

    @viewed_by.setter
    def viewed_by(self, viewed_by):
        """Sets the viewed_by of this DeviceEventWithRelations.

        Set to true if Event has been resolved  # noqa: E501

        :param viewed_by: The viewed_by of this DeviceEventWithRelations.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and viewed_by is None:  # noqa: E501
            raise ValueError("Invalid value for `viewed_by`, must not be `None`")  # noqa: E501

        self._viewed_by = viewed_by

    @property
    def timestamp(self):
        """Gets the timestamp of this DeviceEventWithRelations.  # noqa: E501

        Event creation timestamp  # noqa: E501

        :return: The timestamp of this DeviceEventWithRelations.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DeviceEventWithRelations.

        Event creation timestamp  # noqa: E501

        :param timestamp: The timestamp of this DeviceEventWithRelations.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def resolution_timestamp(self):
        """Gets the resolution_timestamp of this DeviceEventWithRelations.  # noqa: E501

        Event resolution timestamp  # noqa: E501

        :return: The resolution_timestamp of this DeviceEventWithRelations.  # noqa: E501
        :rtype: datetime
        """
        return self._resolution_timestamp

    @resolution_timestamp.setter
    def resolution_timestamp(self, resolution_timestamp):
        """Sets the resolution_timestamp of this DeviceEventWithRelations.

        Event resolution timestamp  # noqa: E501

        :param resolution_timestamp: The resolution_timestamp of this DeviceEventWithRelations.  # noqa: E501
        :type: datetime
        """

        self._resolution_timestamp = resolution_timestamp

    @property
    def device(self):
        """Gets the device of this DeviceEventWithRelations.  # noqa: E501


        :return: The device of this DeviceEventWithRelations.  # noqa: E501
        :rtype: DeviceWithRelations
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DeviceEventWithRelations.


        :param device: The device of this DeviceEventWithRelations.  # noqa: E501
        :type: DeviceWithRelations
        """

        self._device = device

    @property
    def channel(self):
        """Gets the channel of this DeviceEventWithRelations.  # noqa: E501


        :return: The channel of this DeviceEventWithRelations.  # noqa: E501
        :rtype: ChannelWithRelations
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this DeviceEventWithRelations.


        :param channel: The channel of this DeviceEventWithRelations.  # noqa: E501
        :type: ChannelWithRelations
        """

        self._channel = channel

    @property
    def event_rule(self):
        """Gets the event_rule of this DeviceEventWithRelations.  # noqa: E501


        :return: The event_rule of this DeviceEventWithRelations.  # noqa: E501
        :rtype: EventRuleWithRelations
        """
        return self._event_rule

    @event_rule.setter
    def event_rule(self, event_rule):
        """Sets the event_rule of this DeviceEventWithRelations.


        :param event_rule: The event_rule of this DeviceEventWithRelations.  # noqa: E501
        :type: EventRuleWithRelations
        """

        self._event_rule = event_rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceEventWithRelations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeviceEventWithRelations):
            return True

        return self.to_dict() != other.to_dict()
