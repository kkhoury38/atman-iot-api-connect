# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UserSubscription(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'reference_code': 'str',
        'email': 'str',
        'discount': 'float',
        'creation_timestamp': 'datetime',
        'activation_timestamp': 'datetime',
        'end_timestamp': 'datetime',
        'has_registered': 'bool',
        'subscription_id': 'float'
    }

    attribute_map = {
        'id': 'id',
        'reference_code': 'referenceCode',
        'email': 'email',
        'discount': 'discount',
        'creation_timestamp': 'creationTimestamp',
        'activation_timestamp': 'activationTimestamp',
        'end_timestamp': 'endTimestamp',
        'has_registered': 'hasRegistered',
        'subscription_id': 'subscriptionId'
    }

    def __init__(self, id=None, reference_code=None, email=None, discount=None, creation_timestamp=None, activation_timestamp=None, end_timestamp=None, has_registered=None, subscription_id=None, local_vars_configuration=None):  # noqa: E501
        """UserSubscription - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._reference_code = None
        self._email = None
        self._discount = None
        self._creation_timestamp = None
        self._activation_timestamp = None
        self._end_timestamp = None
        self._has_registered = None
        self._subscription_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.reference_code = reference_code
        if email is not None:
            self.email = email
        self.discount = discount
        self.creation_timestamp = creation_timestamp
        if activation_timestamp is not None:
            self.activation_timestamp = activation_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        self.has_registered = has_registered
        self.subscription_id = subscription_id

    @property
    def id(self):
        """Gets the id of this UserSubscription.  # noqa: E501


        :return: The id of this UserSubscription.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserSubscription.


        :param id: The id of this UserSubscription.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def reference_code(self):
        """Gets the reference_code of this UserSubscription.  # noqa: E501


        :return: The reference_code of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._reference_code

    @reference_code.setter
    def reference_code(self, reference_code):
        """Sets the reference_code of this UserSubscription.


        :param reference_code: The reference_code of this UserSubscription.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reference_code is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_code`, must not be `None`")  # noqa: E501

        self._reference_code = reference_code

    @property
    def email(self):
        """Gets the email of this UserSubscription.  # noqa: E501


        :return: The email of this UserSubscription.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserSubscription.


        :param email: The email of this UserSubscription.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def discount(self):
        """Gets the discount of this UserSubscription.  # noqa: E501


        :return: The discount of this UserSubscription.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this UserSubscription.


        :param discount: The discount of this UserSubscription.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and discount is None:  # noqa: E501
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this UserSubscription.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The creation_timestamp of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this UserSubscription.

        Timestamp  # noqa: E501

        :param creation_timestamp: The creation_timestamp of this UserSubscription.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_timestamp`, must not be `None`")  # noqa: E501

        self._creation_timestamp = creation_timestamp

    @property
    def activation_timestamp(self):
        """Gets the activation_timestamp of this UserSubscription.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The activation_timestamp of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._activation_timestamp

    @activation_timestamp.setter
    def activation_timestamp(self, activation_timestamp):
        """Sets the activation_timestamp of this UserSubscription.

        Timestamp  # noqa: E501

        :param activation_timestamp: The activation_timestamp of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._activation_timestamp = activation_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this UserSubscription.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The end_timestamp of this UserSubscription.  # noqa: E501
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this UserSubscription.

        Timestamp  # noqa: E501

        :param end_timestamp: The end_timestamp of this UserSubscription.  # noqa: E501
        :type: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def has_registered(self):
        """Gets the has_registered of this UserSubscription.  # noqa: E501


        :return: The has_registered of this UserSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._has_registered

    @has_registered.setter
    def has_registered(self, has_registered):
        """Sets the has_registered of this UserSubscription.


        :param has_registered: The has_registered of this UserSubscription.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and has_registered is None:  # noqa: E501
            raise ValueError("Invalid value for `has_registered`, must not be `None`")  # noqa: E501

        self._has_registered = has_registered

    @property
    def subscription_id(self):
        """Gets the subscription_id of this UserSubscription.  # noqa: E501

        ID of Subscription  # noqa: E501

        :return: The subscription_id of this UserSubscription.  # noqa: E501
        :rtype: float
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UserSubscription.

        ID of Subscription  # noqa: E501

        :param subscription_id: The subscription_id of this UserSubscription.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and subscription_id is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSubscription):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSubscription):
            return True

        return self.to_dict() != other.to_dict()
