# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EventRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'description': 'str',
        'scope': 'str',
        'algorithm': 'str',
        'action': 'str',
        'action_parameters': 'str',
        'rule': 'str',
        'execution_period': 'float',
        'last_exec_timestamp': 'datetime',
        'activated': 'bool',
        'in_progress': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'scope': 'scope',
        'algorithm': 'algorithm',
        'action': 'action',
        'action_parameters': 'actionParameters',
        'rule': 'rule',
        'execution_period': 'executionPeriod',
        'last_exec_timestamp': 'lastExecTimestamp',
        'activated': 'activated',
        'in_progress': 'inProgress'
    }

    def __init__(self, id=None, description=None, scope=None, algorithm=None, action=None, action_parameters=None, rule=None, execution_period=None, last_exec_timestamp=None, activated=None, in_progress=None, local_vars_configuration=None):  # noqa: E501
        """EventRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._description = None
        self._scope = None
        self._algorithm = None
        self._action = None
        self._action_parameters = None
        self._rule = None
        self._execution_period = None
        self._last_exec_timestamp = None
        self._activated = None
        self._in_progress = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        self.scope = scope
        if algorithm is not None:
            self.algorithm = algorithm
        self.action = action
        if action_parameters is not None:
            self.action_parameters = action_parameters
        if rule is not None:
            self.rule = rule
        if execution_period is not None:
            self.execution_period = execution_period
        if last_exec_timestamp is not None:
            self.last_exec_timestamp = last_exec_timestamp
        if activated is not None:
            self.activated = activated
        if in_progress is not None:
            self.in_progress = in_progress

    @property
    def id(self):
        """Gets the id of this EventRule.  # noqa: E501

        Automatically generated ID  # noqa: E501

        :return: The id of this EventRule.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventRule.

        Automatically generated ID  # noqa: E501

        :param id: The id of this EventRule.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this EventRule.  # noqa: E501

        Rule description  # noqa: E501

        :return: The description of this EventRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventRule.

        Rule description  # noqa: E501

        :param description: The description of this EventRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def scope(self):
        """Gets the scope of this EventRule.  # noqa: E501

        Rule scope  # noqa: E501

        :return: The scope of this EventRule.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this EventRule.

        Rule scope  # noqa: E501

        :param scope: The scope of this EventRule.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and scope is None:  # noqa: E501
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def algorithm(self):
        """Gets the algorithm of this EventRule.  # noqa: E501

        Event Detection Algorithm  # noqa: E501

        :return: The algorithm of this EventRule.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this EventRule.

        Event Detection Algorithm  # noqa: E501

        :param algorithm: The algorithm of this EventRule.  # noqa: E501
        :type: str
        """

        self._algorithm = algorithm

    @property
    def action(self):
        """Gets the action of this EventRule.  # noqa: E501

        Rule action  # noqa: E501

        :return: The action of this EventRule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this EventRule.

        Rule action  # noqa: E501

        :param action: The action of this EventRule.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def action_parameters(self):
        """Gets the action_parameters of this EventRule.  # noqa: E501

        Rule action parameters  # noqa: E501

        :return: The action_parameters of this EventRule.  # noqa: E501
        :rtype: str
        """
        return self._action_parameters

    @action_parameters.setter
    def action_parameters(self, action_parameters):
        """Sets the action_parameters of this EventRule.

        Rule action parameters  # noqa: E501

        :param action_parameters: The action_parameters of this EventRule.  # noqa: E501
        :type: str
        """

        self._action_parameters = action_parameters

    @property
    def rule(self):
        """Gets the rule of this EventRule.  # noqa: E501

        JSON Rule  # noqa: E501

        :return: The rule of this EventRule.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this EventRule.

        JSON Rule  # noqa: E501

        :param rule: The rule of this EventRule.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def execution_period(self):
        """Gets the execution_period of this EventRule.  # noqa: E501

        EventRule execution period - seconds  # noqa: E501

        :return: The execution_period of this EventRule.  # noqa: E501
        :rtype: float
        """
        return self._execution_period

    @execution_period.setter
    def execution_period(self, execution_period):
        """Sets the execution_period of this EventRule.

        EventRule execution period - seconds  # noqa: E501

        :param execution_period: The execution_period of this EventRule.  # noqa: E501
        :type: float
        """

        self._execution_period = execution_period

    @property
    def last_exec_timestamp(self):
        """Gets the last_exec_timestamp of this EventRule.  # noqa: E501

        Last execution timestamp  # noqa: E501

        :return: The last_exec_timestamp of this EventRule.  # noqa: E501
        :rtype: datetime
        """
        return self._last_exec_timestamp

    @last_exec_timestamp.setter
    def last_exec_timestamp(self, last_exec_timestamp):
        """Sets the last_exec_timestamp of this EventRule.

        Last execution timestamp  # noqa: E501

        :param last_exec_timestamp: The last_exec_timestamp of this EventRule.  # noqa: E501
        :type: datetime
        """

        self._last_exec_timestamp = last_exec_timestamp

    @property
    def activated(self):
        """Gets the activated of this EventRule.  # noqa: E501

        Is set to true when EventRule has been activated  # noqa: E501

        :return: The activated of this EventRule.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this EventRule.

        Is set to true when EventRule has been activated  # noqa: E501

        :param activated: The activated of this EventRule.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def in_progress(self):
        """Gets the in_progress of this EventRule.  # noqa: E501

        Is automaticaly set to true when EventRule is being processed  # noqa: E501

        :return: The in_progress of this EventRule.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this EventRule.

        Is automaticaly set to true when EventRule is being processed  # noqa: E501

        :param in_progress: The in_progress of this EventRule.  # noqa: E501
        :type: bool
        """

        self._in_progress = in_progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventRule):
            return True

        return self.to_dict() != other.to_dict()
