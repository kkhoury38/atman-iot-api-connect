# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RequestEventCreateRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'scope': 'list[RequestEventRuleScope]',
        'action': 'str',
        'action_parameters': 'object'
    }

    attribute_map = {
        'description': 'description',
        'scope': 'scope',
        'action': 'action',
        'action_parameters': 'actionParameters'
    }

    def __init__(self, description=None, scope=None, action=None, action_parameters=None, local_vars_configuration=None):  # noqa: E501
        """RequestEventCreateRule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._scope = None
        self._action = None
        self._action_parameters = None
        self.discriminator = None

        self.description = description
        self.scope = scope
        self.action = action
        self.action_parameters = action_parameters

    @property
    def description(self):
        """Gets the description of this RequestEventCreateRule.  # noqa: E501

        Rule description  # noqa: E501

        :return: The description of this RequestEventCreateRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RequestEventCreateRule.

        Rule description  # noqa: E501

        :param description: The description of this RequestEventCreateRule.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def scope(self):
        """Gets the scope of this RequestEventCreateRule.  # noqa: E501


        :return: The scope of this RequestEventCreateRule.  # noqa: E501
        :rtype: list[RequestEventRuleScope]
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this RequestEventCreateRule.


        :param scope: The scope of this RequestEventCreateRule.  # noqa: E501
        :type: list[RequestEventRuleScope]
        """
        if self.local_vars_configuration.client_side_validation and scope is None:  # noqa: E501
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def action(self):
        """Gets the action of this RequestEventCreateRule.  # noqa: E501

        Rule action  # noqa: E501

        :return: The action of this RequestEventCreateRule.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RequestEventCreateRule.

        Rule action  # noqa: E501

        :param action: The action of this RequestEventCreateRule.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def action_parameters(self):
        """Gets the action_parameters of this RequestEventCreateRule.  # noqa: E501

        Action Parameters  # noqa: E501

        :return: The action_parameters of this RequestEventCreateRule.  # noqa: E501
        :rtype: object
        """
        return self._action_parameters

    @action_parameters.setter
    def action_parameters(self, action_parameters):
        """Sets the action_parameters of this RequestEventCreateRule.

        Action Parameters  # noqa: E501

        :param action_parameters: The action_parameters of this RequestEventCreateRule.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and action_parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `action_parameters`, must not be `None`")  # noqa: E501

        self._action_parameters = action_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestEventCreateRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestEventCreateRule):
            return True

        return self.to_dict() != other.to_dict()
