# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RequestDataLoggerSetupCsv2DataHeaderLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_item_col': 'float',
        'next_item_iteration': 'float',
        'model': 'RequestDataLoggerSetupCsv2DataHeaderLocationKeysArray',
        'serial_no': 'RequestDataLoggerSetupCsv2DataHeaderLocationKeysArray',
        'channel_name': 'RequestDataLoggerSetupCsv2DataHeaderLocationKeysStrArray',
        'channel_unit': 'RequestDataLoggerSetupCsv2DataHeaderLocationKeysStrArray',
        'period': 'RequestDataLoggerSetupCsv2DataHeaderLocationKeysNumber'
    }

    attribute_map = {
        'first_item_col': 'firstItemCol',
        'next_item_iteration': 'nextItemIteration',
        'model': 'model',
        'serial_no': 'serialNo',
        'channel_name': 'channelName',
        'channel_unit': 'channelUnit',
        'period': 'period'
    }

    def __init__(self, first_item_col=None, next_item_iteration=None, model=None, serial_no=None, channel_name=None, channel_unit=None, period=None, local_vars_configuration=None):  # noqa: E501
        """RequestDataLoggerSetupCsv2DataHeaderLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_item_col = None
        self._next_item_iteration = None
        self._model = None
        self._serial_no = None
        self._channel_name = None
        self._channel_unit = None
        self._period = None
        self.discriminator = None

        self.first_item_col = first_item_col
        self.next_item_iteration = next_item_iteration
        self.model = model
        self.serial_no = serial_no
        self.channel_name = channel_name
        self.channel_unit = channel_unit
        self.period = period

    @property
    def first_item_col(self):
        """Gets the first_item_col of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501

        First column of header  # noqa: E501

        :return: The first_item_col of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :rtype: float
        """
        return self._first_item_col

    @first_item_col.setter
    def first_item_col(self, first_item_col):
        """Sets the first_item_col of this RequestDataLoggerSetupCsv2DataHeaderLocation.

        First column of header  # noqa: E501

        :param first_item_col: The first_item_col of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and first_item_col is None:  # noqa: E501
            raise ValueError("Invalid value for `first_item_col`, must not be `None`")  # noqa: E501

        self._first_item_col = first_item_col

    @property
    def next_item_iteration(self):
        """Gets the next_item_iteration of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501

        Relevant row location of next item  # noqa: E501

        :return: The next_item_iteration of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :rtype: float
        """
        return self._next_item_iteration

    @next_item_iteration.setter
    def next_item_iteration(self, next_item_iteration):
        """Sets the next_item_iteration of this RequestDataLoggerSetupCsv2DataHeaderLocation.

        Relevant row location of next item  # noqa: E501

        :param next_item_iteration: The next_item_iteration of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and next_item_iteration is None:  # noqa: E501
            raise ValueError("Invalid value for `next_item_iteration`, must not be `None`")  # noqa: E501

        self._next_item_iteration = next_item_iteration

    @property
    def model(self):
        """Gets the model of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501


        :return: The model of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2DataHeaderLocationKeysArray
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RequestDataLoggerSetupCsv2DataHeaderLocation.


        :param model: The model of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2DataHeaderLocationKeysArray
        """
        if self.local_vars_configuration.client_side_validation and model is None:  # noqa: E501
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def serial_no(self):
        """Gets the serial_no of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501


        :return: The serial_no of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2DataHeaderLocationKeysArray
        """
        return self._serial_no

    @serial_no.setter
    def serial_no(self, serial_no):
        """Sets the serial_no of this RequestDataLoggerSetupCsv2DataHeaderLocation.


        :param serial_no: The serial_no of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2DataHeaderLocationKeysArray
        """
        if self.local_vars_configuration.client_side_validation and serial_no is None:  # noqa: E501
            raise ValueError("Invalid value for `serial_no`, must not be `None`")  # noqa: E501

        self._serial_no = serial_no

    @property
    def channel_name(self):
        """Gets the channel_name of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501


        :return: The channel_name of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2DataHeaderLocationKeysStrArray
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this RequestDataLoggerSetupCsv2DataHeaderLocation.


        :param channel_name: The channel_name of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2DataHeaderLocationKeysStrArray
        """
        if self.local_vars_configuration.client_side_validation and channel_name is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_name`, must not be `None`")  # noqa: E501

        self._channel_name = channel_name

    @property
    def channel_unit(self):
        """Gets the channel_unit of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501


        :return: The channel_unit of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2DataHeaderLocationKeysStrArray
        """
        return self._channel_unit

    @channel_unit.setter
    def channel_unit(self, channel_unit):
        """Sets the channel_unit of this RequestDataLoggerSetupCsv2DataHeaderLocation.


        :param channel_unit: The channel_unit of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2DataHeaderLocationKeysStrArray
        """
        if self.local_vars_configuration.client_side_validation and channel_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_unit`, must not be `None`")  # noqa: E501

        self._channel_unit = channel_unit

    @property
    def period(self):
        """Gets the period of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501


        :return: The period of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2DataHeaderLocationKeysNumber
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this RequestDataLoggerSetupCsv2DataHeaderLocation.


        :param period: The period of this RequestDataLoggerSetupCsv2DataHeaderLocation.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2DataHeaderLocationKeysNumber
        """
        if self.local_vars_configuration.client_side_validation and period is None:  # noqa: E501
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestDataLoggerSetupCsv2DataHeaderLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestDataLoggerSetupCsv2DataHeaderLocation):
            return True

        return self.to_dict() != other.to_dict()
