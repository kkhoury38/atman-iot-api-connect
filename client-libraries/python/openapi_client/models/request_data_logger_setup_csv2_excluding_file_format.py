# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RequestDataLoggerSetupCsv2ExcludingFileFormat(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delimiter': 'str',
        'decimal_point': 'str',
        'time_data': 'RequestDataLoggerSetupCsv2TimeData',
        'data': 'RequestDataLoggerSetupCsv2Data',
        'confirm': 'bool'
    }

    attribute_map = {
        'delimiter': 'delimiter',
        'decimal_point': 'decimalPoint',
        'time_data': 'timeData',
        'data': 'data',
        'confirm': 'confirm'
    }

    def __init__(self, delimiter=None, decimal_point=None, time_data=None, data=None, confirm=None, local_vars_configuration=None):  # noqa: E501
        """RequestDataLoggerSetupCsv2ExcludingFileFormat - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delimiter = None
        self._decimal_point = None
        self._time_data = None
        self._data = None
        self._confirm = None
        self.discriminator = None

        self.delimiter = delimiter
        self.decimal_point = decimal_point
        self.time_data = time_data
        self.data = data
        self.confirm = confirm

    @property
    def delimiter(self):
        """Gets the delimiter of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501

        Delimiter used in CSV file  # noqa: E501

        :return: The delimiter of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this RequestDataLoggerSetupCsv2ExcludingFileFormat.

        Delimiter used in CSV file  # noqa: E501

        :param delimiter: The delimiter of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and delimiter is None:  # noqa: E501
            raise ValueError("Invalid value for `delimiter`, must not be `None`")  # noqa: E501

        self._delimiter = delimiter

    @property
    def decimal_point(self):
        """Gets the decimal_point of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501

        Decimal Point of values in CSV file  # noqa: E501

        :return: The decimal_point of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :rtype: str
        """
        return self._decimal_point

    @decimal_point.setter
    def decimal_point(self, decimal_point):
        """Sets the decimal_point of this RequestDataLoggerSetupCsv2ExcludingFileFormat.

        Decimal Point of values in CSV file  # noqa: E501

        :param decimal_point: The decimal_point of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and decimal_point is None:  # noqa: E501
            raise ValueError("Invalid value for `decimal_point`, must not be `None`")  # noqa: E501

        self._decimal_point = decimal_point

    @property
    def time_data(self):
        """Gets the time_data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501


        :return: The time_data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2TimeData
        """
        return self._time_data

    @time_data.setter
    def time_data(self, time_data):
        """Sets the time_data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.


        :param time_data: The time_data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2TimeData
        """
        if self.local_vars_configuration.client_side_validation and time_data is None:  # noqa: E501
            raise ValueError("Invalid value for `time_data`, must not be `None`")  # noqa: E501

        self._time_data = time_data

    @property
    def data(self):
        """Gets the data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501


        :return: The data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2Data
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.


        :param data: The data of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2Data
        """
        if self.local_vars_configuration.client_side_validation and data is None:  # noqa: E501
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def confirm(self):
        """Gets the confirm of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501

        Provided Configuration Confirmation. Set to true to save current configuration  # noqa: E501

        :return: The confirm of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :rtype: bool
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this RequestDataLoggerSetupCsv2ExcludingFileFormat.

        Provided Configuration Confirmation. Set to true to save current configuration  # noqa: E501

        :param confirm: The confirm of this RequestDataLoggerSetupCsv2ExcludingFileFormat.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and confirm is None:  # noqa: E501
            raise ValueError("Invalid value for `confirm`, must not be `None`")  # noqa: E501

        self._confirm = confirm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestDataLoggerSetupCsv2ExcludingFileFormat):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestDataLoggerSetupCsv2ExcludingFileFormat):
            return True

        return self.to_dict() != other.to_dict()
