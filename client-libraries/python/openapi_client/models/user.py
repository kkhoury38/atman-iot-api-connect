# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'username': 'str',
        'passwd': 'str',
        'email': 'str',
        'roles': 'list[str]',
        'is_virtual': 'bool',
        'subscription_reference_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'passwd': 'passwd',
        'email': 'email',
        'roles': 'roles',
        'is_virtual': 'isVirtual',
        'subscription_reference_code': 'subscriptionReferenceCode'
    }

    def __init__(self, id=None, username=None, passwd=None, email=None, roles=None, is_virtual=None, subscription_reference_code=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._username = None
        self._passwd = None
        self._email = None
        self._roles = None
        self._is_virtual = None
        self._subscription_reference_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.username = username
        if passwd is not None:
            self.passwd = passwd
        self.email = email
        if roles is not None:
            self.roles = roles
        self.is_virtual = is_virtual
        if subscription_reference_code is not None:
            self.subscription_reference_code = subscription_reference_code

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        Automatically generated ID  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        Automatically generated ID  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501

        Username  # noqa: E501

        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        Username  # noqa: E501

        :param username: The username of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def passwd(self):
        """Gets the passwd of this User.  # noqa: E501

        Password  # noqa: E501

        :return: The passwd of this User.  # noqa: E501
        :rtype: str
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd):
        """Sets the passwd of this User.

        Password  # noqa: E501

        :param passwd: The passwd of this User.  # noqa: E501
        :type: str
        """

        self._passwd = passwd

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        Email  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Email  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501


        :return: The roles of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.


        :param roles: The roles of this User.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def is_virtual(self):
        """Gets the is_virtual of this User.  # noqa: E501

        Automatically assigned flag to select if User is virtual or not  # noqa: E501

        :return: The is_virtual of this User.  # noqa: E501
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this User.

        Automatically assigned flag to select if User is virtual or not  # noqa: E501

        :param is_virtual: The is_virtual of this User.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_virtual is None:  # noqa: E501
            raise ValueError("Invalid value for `is_virtual`, must not be `None`")  # noqa: E501

        self._is_virtual = is_virtual

    @property
    def subscription_reference_code(self):
        """Gets the subscription_reference_code of this User.  # noqa: E501


        :return: The subscription_reference_code of this User.  # noqa: E501
        :rtype: str
        """
        return self._subscription_reference_code

    @subscription_reference_code.setter
    def subscription_reference_code(self, subscription_reference_code):
        """Sets the subscription_reference_code of this User.


        :param subscription_reference_code: The subscription_reference_code of this User.  # noqa: E501
        :type: str
        """

        self._subscription_reference_code = subscription_reference_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
