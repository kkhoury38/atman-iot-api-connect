# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RequestDataLoggerSetupXml2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'object_list_key': 'str',
        'model': 'RequestDataLoggerSetupXml2SearchStringStructure',
        'serial_no': 'RequestDataLoggerSetupXml2SearchStringStructure',
        'channel_name': 'RequestDataLoggerSetupXml2SearchStringStructure',
        'channel_unit': 'RequestDataLoggerSetupXml2SearchStringStructure',
        'value': 'RequestDataLoggerSetupXml2SearchStringStructure',
        'period': 'RequestDataLoggerSetupXml2SearchStringStructure',
        'timestamp': 'RequestDataLoggerSetupXml2SearchStringStructure',
        'confirm': 'bool',
        'file_format': 'str'
    }

    attribute_map = {
        'object_list_key': 'objectListKey',
        'model': 'model',
        'serial_no': 'serialNo',
        'channel_name': 'channelName',
        'channel_unit': 'channelUnit',
        'value': 'value',
        'period': 'period',
        'timestamp': 'timestamp',
        'confirm': 'confirm',
        'file_format': 'fileFormat'
    }

    def __init__(self, object_list_key=None, model=None, serial_no=None, channel_name=None, channel_unit=None, value=None, period=None, timestamp=None, confirm=None, file_format=None, local_vars_configuration=None):  # noqa: E501
        """RequestDataLoggerSetupXml2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._object_list_key = None
        self._model = None
        self._serial_no = None
        self._channel_name = None
        self._channel_unit = None
        self._value = None
        self._period = None
        self._timestamp = None
        self._confirm = None
        self._file_format = None
        self.discriminator = None

        self.object_list_key = object_list_key
        self.model = model
        self.serial_no = serial_no
        self.channel_name = channel_name
        self.channel_unit = channel_unit
        self.value = value
        self.period = period
        self.timestamp = timestamp
        self.confirm = confirm
        self.file_format = file_format

    @property
    def object_list_key(self):
        """Gets the object_list_key of this RequestDataLoggerSetupXml2.  # noqa: E501

        XML key of list containing the the measurements  # noqa: E501

        :return: The object_list_key of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: str
        """
        return self._object_list_key

    @object_list_key.setter
    def object_list_key(self, object_list_key):
        """Sets the object_list_key of this RequestDataLoggerSetupXml2.

        XML key of list containing the the measurements  # noqa: E501

        :param object_list_key: The object_list_key of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and object_list_key is None:  # noqa: E501
            raise ValueError("Invalid value for `object_list_key`, must not be `None`")  # noqa: E501

        self._object_list_key = object_list_key

    @property
    def model(self):
        """Gets the model of this RequestDataLoggerSetupXml2.  # noqa: E501


        :return: The model of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: RequestDataLoggerSetupXml2SearchStringStructure
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this RequestDataLoggerSetupXml2.


        :param model: The model of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: RequestDataLoggerSetupXml2SearchStringStructure
        """
        if self.local_vars_configuration.client_side_validation and model is None:  # noqa: E501
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def serial_no(self):
        """Gets the serial_no of this RequestDataLoggerSetupXml2.  # noqa: E501


        :return: The serial_no of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: RequestDataLoggerSetupXml2SearchStringStructure
        """
        return self._serial_no

    @serial_no.setter
    def serial_no(self, serial_no):
        """Sets the serial_no of this RequestDataLoggerSetupXml2.


        :param serial_no: The serial_no of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: RequestDataLoggerSetupXml2SearchStringStructure
        """
        if self.local_vars_configuration.client_side_validation and serial_no is None:  # noqa: E501
            raise ValueError("Invalid value for `serial_no`, must not be `None`")  # noqa: E501

        self._serial_no = serial_no

    @property
    def channel_name(self):
        """Gets the channel_name of this RequestDataLoggerSetupXml2.  # noqa: E501


        :return: The channel_name of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: RequestDataLoggerSetupXml2SearchStringStructure
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this RequestDataLoggerSetupXml2.


        :param channel_name: The channel_name of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: RequestDataLoggerSetupXml2SearchStringStructure
        """
        if self.local_vars_configuration.client_side_validation and channel_name is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_name`, must not be `None`")  # noqa: E501

        self._channel_name = channel_name

    @property
    def channel_unit(self):
        """Gets the channel_unit of this RequestDataLoggerSetupXml2.  # noqa: E501


        :return: The channel_unit of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: RequestDataLoggerSetupXml2SearchStringStructure
        """
        return self._channel_unit

    @channel_unit.setter
    def channel_unit(self, channel_unit):
        """Sets the channel_unit of this RequestDataLoggerSetupXml2.


        :param channel_unit: The channel_unit of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: RequestDataLoggerSetupXml2SearchStringStructure
        """
        if self.local_vars_configuration.client_side_validation and channel_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_unit`, must not be `None`")  # noqa: E501

        self._channel_unit = channel_unit

    @property
    def value(self):
        """Gets the value of this RequestDataLoggerSetupXml2.  # noqa: E501


        :return: The value of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: RequestDataLoggerSetupXml2SearchStringStructure
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RequestDataLoggerSetupXml2.


        :param value: The value of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: RequestDataLoggerSetupXml2SearchStringStructure
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def period(self):
        """Gets the period of this RequestDataLoggerSetupXml2.  # noqa: E501


        :return: The period of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: RequestDataLoggerSetupXml2SearchStringStructure
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this RequestDataLoggerSetupXml2.


        :param period: The period of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: RequestDataLoggerSetupXml2SearchStringStructure
        """
        if self.local_vars_configuration.client_side_validation and period is None:  # noqa: E501
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def timestamp(self):
        """Gets the timestamp of this RequestDataLoggerSetupXml2.  # noqa: E501


        :return: The timestamp of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: RequestDataLoggerSetupXml2SearchStringStructure
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RequestDataLoggerSetupXml2.


        :param timestamp: The timestamp of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: RequestDataLoggerSetupXml2SearchStringStructure
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def confirm(self):
        """Gets the confirm of this RequestDataLoggerSetupXml2.  # noqa: E501

        Provided Configuration Confirmation. Set to true to save current configuration  # noqa: E501

        :return: The confirm of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: bool
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this RequestDataLoggerSetupXml2.

        Provided Configuration Confirmation. Set to true to save current configuration  # noqa: E501

        :param confirm: The confirm of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and confirm is None:  # noqa: E501
            raise ValueError("Invalid value for `confirm`, must not be `None`")  # noqa: E501

        self._confirm = confirm

    @property
    def file_format(self):
        """Gets the file_format of this RequestDataLoggerSetupXml2.  # noqa: E501

        Data File Format  # noqa: E501

        :return: The file_format of this RequestDataLoggerSetupXml2.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this RequestDataLoggerSetupXml2.

        Data File Format  # noqa: E501

        :param file_format: The file_format of this RequestDataLoggerSetupXml2.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_format is None:  # noqa: E501
            raise ValueError("Invalid value for `file_format`, must not be `None`")  # noqa: E501

        self._file_format = file_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestDataLoggerSetupXml2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestDataLoggerSetupXml2):
            return True

        return self.to_dict() != other.to_dict()
