# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RequestDataLoggerSetupCsv2Data(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'header': 'RequestDataLoggerSetupCsv2DataHeaderLocation',
        'value': 'RequestDataLoggerSetupCsv2DataValueLocation'
    }

    attribute_map = {
        'header': 'header',
        'value': 'value'
    }

    def __init__(self, header=None, value=None, local_vars_configuration=None):  # noqa: E501
        """RequestDataLoggerSetupCsv2Data - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._header = None
        self._value = None
        self.discriminator = None

        self.header = header
        self.value = value

    @property
    def header(self):
        """Gets the header of this RequestDataLoggerSetupCsv2Data.  # noqa: E501


        :return: The header of this RequestDataLoggerSetupCsv2Data.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2DataHeaderLocation
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this RequestDataLoggerSetupCsv2Data.


        :param header: The header of this RequestDataLoggerSetupCsv2Data.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2DataHeaderLocation
        """
        if self.local_vars_configuration.client_side_validation and header is None:  # noqa: E501
            raise ValueError("Invalid value for `header`, must not be `None`")  # noqa: E501

        self._header = header

    @property
    def value(self):
        """Gets the value of this RequestDataLoggerSetupCsv2Data.  # noqa: E501


        :return: The value of this RequestDataLoggerSetupCsv2Data.  # noqa: E501
        :rtype: RequestDataLoggerSetupCsv2DataValueLocation
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RequestDataLoggerSetupCsv2Data.


        :param value: The value of this RequestDataLoggerSetupCsv2Data.  # noqa: E501
        :type: RequestDataLoggerSetupCsv2DataValueLocation
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestDataLoggerSetupCsv2Data):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestDataLoggerSetupCsv2Data):
            return True

        return self.to_dict() != other.to_dict()
