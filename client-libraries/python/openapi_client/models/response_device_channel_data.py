# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ResponseDeviceChannelData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'channel_type': 'ChannelType',
        'data_float': 'list[DataFloat]',
        'data_text': 'list[DataText]'
    }

    attribute_map = {
        'channel_type': 'channelType',
        'data_float': 'dataFloat',
        'data_text': 'dataText'
    }

    def __init__(self, channel_type=None, data_float=None, data_text=None, local_vars_configuration=None):  # noqa: E501
        """ResponseDeviceChannelData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._channel_type = None
        self._data_float = None
        self._data_text = None
        self.discriminator = None

        self.channel_type = channel_type
        if data_float is not None:
            self.data_float = data_float
        if data_text is not None:
            self.data_text = data_text

    @property
    def channel_type(self):
        """Gets the channel_type of this ResponseDeviceChannelData.  # noqa: E501


        :return: The channel_type of this ResponseDeviceChannelData.  # noqa: E501
        :rtype: ChannelType
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this ResponseDeviceChannelData.


        :param channel_type: The channel_type of this ResponseDeviceChannelData.  # noqa: E501
        :type: ChannelType
        """
        if self.local_vars_configuration.client_side_validation and channel_type is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_type`, must not be `None`")  # noqa: E501

        self._channel_type = channel_type

    @property
    def data_float(self):
        """Gets the data_float of this ResponseDeviceChannelData.  # noqa: E501


        :return: The data_float of this ResponseDeviceChannelData.  # noqa: E501
        :rtype: list[DataFloat]
        """
        return self._data_float

    @data_float.setter
    def data_float(self, data_float):
        """Sets the data_float of this ResponseDeviceChannelData.


        :param data_float: The data_float of this ResponseDeviceChannelData.  # noqa: E501
        :type: list[DataFloat]
        """

        self._data_float = data_float

    @property
    def data_text(self):
        """Gets the data_text of this ResponseDeviceChannelData.  # noqa: E501


        :return: The data_text of this ResponseDeviceChannelData.  # noqa: E501
        :rtype: list[DataText]
        """
        return self._data_text

    @data_text.setter
    def data_text(self, data_text):
        """Sets the data_text of this ResponseDeviceChannelData.


        :param data_text: The data_text of this ResponseDeviceChannelData.  # noqa: E501
        :type: list[DataText]
        """

        self._data_text = data_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseDeviceChannelData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseDeviceChannelData):
            return True

        return self.to_dict() != other.to_dict()
