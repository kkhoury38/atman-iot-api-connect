# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DataLogger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'description': 'str',
        'connection_type': 'str',
        'file_format': 'str',
        'username': 'str',
        'passwd': 'str',
        'auth_token': 'str',
        'config': 'str',
        'auto_init': 'bool',
        'data_compressed': 'bool',
        'user_id': 'float'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'connection_type': 'connectionType',
        'file_format': 'fileFormat',
        'username': 'username',
        'passwd': 'passwd',
        'auth_token': 'authToken',
        'config': 'config',
        'auto_init': 'autoInit',
        'data_compressed': 'dataCompressed',
        'user_id': 'userId'
    }

    def __init__(self, id=None, description=None, connection_type=None, file_format=None, username=None, passwd=None, auth_token=None, config=None, auto_init=None, data_compressed=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """DataLogger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._description = None
        self._connection_type = None
        self._file_format = None
        self._username = None
        self._passwd = None
        self._auth_token = None
        self._config = None
        self._auto_init = None
        self._data_compressed = None
        self._user_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        self.connection_type = connection_type
        self.file_format = file_format
        if username is not None:
            self.username = username
        if passwd is not None:
            self.passwd = passwd
        if auth_token is not None:
            self.auth_token = auth_token
        if config is not None:
            self.config = config
        self.auto_init = auto_init
        self.data_compressed = data_compressed
        self.user_id = user_id

    @property
    def id(self):
        """Gets the id of this DataLogger.  # noqa: E501

        Automatically generated ID  # noqa: E501

        :return: The id of this DataLogger.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataLogger.

        Automatically generated ID  # noqa: E501

        :param id: The id of this DataLogger.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this DataLogger.  # noqa: E501

        Datalogger description  # noqa: E501

        :return: The description of this DataLogger.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataLogger.

        Datalogger description  # noqa: E501

        :param description: The description of this DataLogger.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def connection_type(self):
        """Gets the connection_type of this DataLogger.  # noqa: E501

        Method used by DataLogger to send data to the system. At present only FTP implemented  # noqa: E501

        :return: The connection_type of this DataLogger.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this DataLogger.

        Method used by DataLogger to send data to the system. At present only FTP implemented  # noqa: E501

        :param connection_type: The connection_type of this DataLogger.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connection_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connection_type`, must not be `None`")  # noqa: E501

        self._connection_type = connection_type

    @property
    def file_format(self):
        """Gets the file_format of this DataLogger.  # noqa: E501

        Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats  # noqa: E501

        :return: The file_format of this DataLogger.  # noqa: E501
        :rtype: str
        """
        return self._file_format

    @file_format.setter
    def file_format(self, file_format):
        """Sets the file_format of this DataLogger.

        Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats  # noqa: E501

        :param file_format: The file_format of this DataLogger.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_format is None:  # noqa: E501
            raise ValueError("Invalid value for `file_format`, must not be `None`")  # noqa: E501

        self._file_format = file_format

    @property
    def username(self):
        """Gets the username of this DataLogger.  # noqa: E501

        Username of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :return: The username of this DataLogger.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DataLogger.

        Username of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :param username: The username of this DataLogger.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def passwd(self):
        """Gets the passwd of this DataLogger.  # noqa: E501

        Password of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :return: The passwd of this DataLogger.  # noqa: E501
        :rtype: str
        """
        return self._passwd

    @passwd.setter
    def passwd(self, passwd):
        """Sets the passwd of this DataLogger.

        Password of system FTP account, where the DataLogger sends the data (if applicable)  # noqa: E501

        :param passwd: The passwd of this DataLogger.  # noqa: E501
        :type: str
        """

        self._passwd = passwd

    @property
    def auth_token(self):
        """Gets the auth_token of this DataLogger.  # noqa: E501

        Authentication token of DataLogger  # noqa: E501

        :return: The auth_token of this DataLogger.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this DataLogger.

        Authentication token of DataLogger  # noqa: E501

        :param auth_token: The auth_token of this DataLogger.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    @property
    def config(self):
        """Gets the config of this DataLogger.  # noqa: E501

        JSON configuration file for DataLogger  # noqa: E501

        :return: The config of this DataLogger.  # noqa: E501
        :rtype: str
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this DataLogger.

        JSON configuration file for DataLogger  # noqa: E501

        :param config: The config of this DataLogger.  # noqa: E501
        :type: str
        """

        self._config = config

    @property
    def auto_init(self):
        """Gets the auto_init of this DataLogger.  # noqa: E501

        Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration  # noqa: E501

        :return: The auto_init of this DataLogger.  # noqa: E501
        :rtype: bool
        """
        return self._auto_init

    @auto_init.setter
    def auto_init(self, auto_init):
        """Sets the auto_init of this DataLogger.

        Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration  # noqa: E501

        :param auto_init: The auto_init of this DataLogger.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and auto_init is None:  # noqa: E501
            raise ValueError("Invalid value for `auto_init`, must not be `None`")  # noqa: E501

        self._auto_init = auto_init

    @property
    def data_compressed(self):
        """Gets the data_compressed of this DataLogger.  # noqa: E501

        Flag for selecting if DataLogger sends compressed files  # noqa: E501

        :return: The data_compressed of this DataLogger.  # noqa: E501
        :rtype: bool
        """
        return self._data_compressed

    @data_compressed.setter
    def data_compressed(self, data_compressed):
        """Sets the data_compressed of this DataLogger.

        Flag for selecting if DataLogger sends compressed files  # noqa: E501

        :param data_compressed: The data_compressed of this DataLogger.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and data_compressed is None:  # noqa: E501
            raise ValueError("Invalid value for `data_compressed`, must not be `None`")  # noqa: E501

        self._data_compressed = data_compressed

    @property
    def user_id(self):
        """Gets the user_id of this DataLogger.  # noqa: E501

        ID of User that DataLogger belongs to  # noqa: E501

        :return: The user_id of this DataLogger.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DataLogger.

        ID of User that DataLogger belongs to  # noqa: E501

        :param user_id: The user_id of this DataLogger.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataLogger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataLogger):
            return True

        return self.to_dict() != other.to_dict()
