# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EventExcludingIdResolvedTimestampResolutionTimestamp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_id': 'float',
        'event_rule_id': 'float',
        'severity': 'str',
        'description': 'str'
    }

    attribute_map = {
        'asset_id': 'assetId',
        'event_rule_id': 'eventRuleId',
        'severity': 'severity',
        'description': 'description'
    }

    def __init__(self, asset_id=None, event_rule_id=None, severity=None, description=None, local_vars_configuration=None):  # noqa: E501
        """EventExcludingIdResolvedTimestampResolutionTimestamp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._asset_id = None
        self._event_rule_id = None
        self._severity = None
        self._description = None
        self.discriminator = None

        self.asset_id = asset_id
        self.event_rule_id = event_rule_id
        self.severity = severity
        if description is not None:
            self.description = description

    @property
    def asset_id(self):
        """Gets the asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501

        ID of Asset associated with Event  # noqa: E501

        :return: The asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :rtype: float
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        ID of Asset associated with Event  # noqa: E501

        :param asset_id: The asset_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and asset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `asset_id`, must not be `None`")  # noqa: E501

        self._asset_id = asset_id

    @property
    def event_rule_id(self):
        """Gets the event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501

        ID of EventRule triggered  # noqa: E501

        :return: The event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :rtype: float
        """
        return self._event_rule_id

    @event_rule_id.setter
    def event_rule_id(self, event_rule_id):
        """Sets the event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        ID of EventRule triggered  # noqa: E501

        :param event_rule_id: The event_rule_id of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and event_rule_id is None:  # noqa: E501
            raise ValueError("Invalid value for `event_rule_id`, must not be `None`")  # noqa: E501

        self._event_rule_id = event_rule_id

    @property
    def severity(self):
        """Gets the severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501

        Event severity - Can be  LOW / MEDIUM / HIGH  # noqa: E501

        :return: The severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        Event severity - Can be  LOW / MEDIUM / HIGH  # noqa: E501

        :param severity: The severity of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and severity is None:  # noqa: E501
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def description(self):
        """Gets the description of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501

        Event description  # noqa: E501

        :return: The description of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventExcludingIdResolvedTimestampResolutionTimestamp.

        Event description  # noqa: E501

        :param description: The description of this EventExcludingIdResolvedTimestampResolutionTimestamp.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventExcludingIdResolvedTimestampResolutionTimestamp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventExcludingIdResolvedTimestampResolutionTimestamp):
            return True

        return self.to_dict() != other.to_dict()
