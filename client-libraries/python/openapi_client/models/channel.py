# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Channel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'monitor': 'bool',
        'last_timestamp': 'datetime',
        'status': 'str',
        'device_id': 'float',
        'channel_type_id': 'float'
    }

    attribute_map = {
        'id': 'id',
        'monitor': 'monitor',
        'last_timestamp': 'lastTimestamp',
        'status': 'status',
        'device_id': 'deviceId',
        'channel_type_id': 'channelTypeId'
    }

    def __init__(self, id=None, monitor=None, last_timestamp=None, status=None, device_id=None, channel_type_id=None, local_vars_configuration=None):  # noqa: E501
        """Channel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._monitor = None
        self._last_timestamp = None
        self._status = None
        self._device_id = None
        self._channel_type_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.monitor = monitor
        if last_timestamp is not None:
            self.last_timestamp = last_timestamp
        if status is not None:
            self.status = status
        self.device_id = device_id
        self.channel_type_id = channel_type_id

    @property
    def id(self):
        """Gets the id of this Channel.  # noqa: E501

        Automatically generated ID  # noqa: E501

        :return: The id of this Channel.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.

        Automatically generated ID  # noqa: E501

        :param id: The id of this Channel.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def monitor(self):
        """Gets the monitor of this Channel.  # noqa: E501

        Enable channel monitoring - data recording - by setting to true  # noqa: E501

        :return: The monitor of this Channel.  # noqa: E501
        :rtype: bool
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this Channel.

        Enable channel monitoring - data recording - by setting to true  # noqa: E501

        :param monitor: The monitor of this Channel.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and monitor is None:  # noqa: E501
            raise ValueError("Invalid value for `monitor`, must not be `None`")  # noqa: E501

        self._monitor = monitor

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this Channel.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The last_timestamp of this Channel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this Channel.

        Timestamp  # noqa: E501

        :param last_timestamp: The last_timestamp of this Channel.  # noqa: E501
        :type: datetime
        """

        self._last_timestamp = last_timestamp

    @property
    def status(self):
        """Gets the status of this Channel.  # noqa: E501

        Channel Status  # noqa: E501

        :return: The status of this Channel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Channel.

        Channel Status  # noqa: E501

        :param status: The status of this Channel.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def device_id(self):
        """Gets the device_id of this Channel.  # noqa: E501

        ID of Device that Channel belongs to  # noqa: E501

        :return: The device_id of this Channel.  # noqa: E501
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Channel.

        ID of Device that Channel belongs to  # noqa: E501

        :param device_id: The device_id of this Channel.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and device_id is None:  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def channel_type_id(self):
        """Gets the channel_type_id of this Channel.  # noqa: E501

        ID of ChannelType associated with Channel  # noqa: E501

        :return: The channel_type_id of this Channel.  # noqa: E501
        :rtype: float
        """
        return self._channel_type_id

    @channel_type_id.setter
    def channel_type_id(self, channel_type_id):
        """Sets the channel_type_id of this Channel.

        ID of ChannelType associated with Channel  # noqa: E501

        :param channel_type_id: The channel_type_id of this Channel.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and channel_type_id is None:  # noqa: E501
            raise ValueError("Invalid value for `channel_type_id`, must not be `None`")  # noqa: E501

        self._channel_type_id = channel_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Channel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Channel):
            return True

        return self.to_dict() != other.to_dict()
