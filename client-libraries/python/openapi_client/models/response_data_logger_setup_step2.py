# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ResponseDataLoggerSetupStep2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device_types': 'list[DeviceTypeExtended]',
        'devices': 'list[Device]',
        'sample': 'MeasurementSample',
        'error_count': 'float',
        'errors': 'list[str]'
    }

    attribute_map = {
        'device_types': 'deviceTypes',
        'devices': 'devices',
        'sample': 'sample',
        'error_count': 'errorCount',
        'errors': 'errors'
    }

    def __init__(self, device_types=None, devices=None, sample=None, error_count=None, errors=None, local_vars_configuration=None):  # noqa: E501
        """ResponseDataLoggerSetupStep2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._device_types = None
        self._devices = None
        self._sample = None
        self._error_count = None
        self._errors = None
        self.discriminator = None

        self.device_types = device_types
        self.devices = devices
        if sample is not None:
            self.sample = sample
        self.error_count = error_count
        if errors is not None:
            self.errors = errors

    @property
    def device_types(self):
        """Gets the device_types of this ResponseDataLoggerSetupStep2.  # noqa: E501


        :return: The device_types of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :rtype: list[DeviceTypeExtended]
        """
        return self._device_types

    @device_types.setter
    def device_types(self, device_types):
        """Sets the device_types of this ResponseDataLoggerSetupStep2.


        :param device_types: The device_types of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type: list[DeviceTypeExtended]
        """
        if self.local_vars_configuration.client_side_validation and device_types is None:  # noqa: E501
            raise ValueError("Invalid value for `device_types`, must not be `None`")  # noqa: E501

        self._device_types = device_types

    @property
    def devices(self):
        """Gets the devices of this ResponseDataLoggerSetupStep2.  # noqa: E501


        :return: The devices of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :rtype: list[Device]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this ResponseDataLoggerSetupStep2.


        :param devices: The devices of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type: list[Device]
        """
        if self.local_vars_configuration.client_side_validation and devices is None:  # noqa: E501
            raise ValueError("Invalid value for `devices`, must not be `None`")  # noqa: E501

        self._devices = devices

    @property
    def sample(self):
        """Gets the sample of this ResponseDataLoggerSetupStep2.  # noqa: E501


        :return: The sample of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :rtype: MeasurementSample
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this ResponseDataLoggerSetupStep2.


        :param sample: The sample of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type: MeasurementSample
        """

        self._sample = sample

    @property
    def error_count(self):
        """Gets the error_count of this ResponseDataLoggerSetupStep2.  # noqa: E501

        Sample Value  # noqa: E501

        :return: The error_count of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :rtype: float
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this ResponseDataLoggerSetupStep2.

        Sample Value  # noqa: E501

        :param error_count: The error_count of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and error_count is None:  # noqa: E501
            raise ValueError("Invalid value for `error_count`, must not be `None`")  # noqa: E501

        self._error_count = error_count

    @property
    def errors(self):
        """Gets the errors of this ResponseDataLoggerSetupStep2.  # noqa: E501


        :return: The errors of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ResponseDataLoggerSetupStep2.


        :param errors: The errors of this ResponseDataLoggerSetupStep2.  # noqa: E501
        :type: list[str]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseDataLoggerSetupStep2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseDataLoggerSetupStep2):
            return True

        return self.to_dict() != other.to_dict()
