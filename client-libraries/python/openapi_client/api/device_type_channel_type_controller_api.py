# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DeviceTypeChannelTypeControllerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def device_type_channel_type_controller_count(self, device_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_count(device_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: LoopbackCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.device_type_channel_type_controller_count_with_http_info(device_type_id, **kwargs)  # noqa: E501

    def device_type_channel_type_controller_count_with_http_info(self, device_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_count_with_http_info(device_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(LoopbackCount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'device_type_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type_channel_type_controller_count" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'device_type_id' is set
        if self.api_client.client_side_validation and ('device_type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['device_type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `device_type_id` when calling `device_type_channel_type_controller_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_type_id' in local_var_params:
            path_params['deviceTypeId'] = local_var_params['device_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/device-type-channel-type/{deviceTypeId}/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LoopbackCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type_channel_type_controller_create(self, device_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_create(device_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param ChannelTypeExcludingIdDeviceTypeId channel_type_excluding_id_device_type_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ChannelType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.device_type_channel_type_controller_create_with_http_info(device_type_id, **kwargs)  # noqa: E501

    def device_type_channel_type_controller_create_with_http_info(self, device_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_create_with_http_info(device_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param ChannelTypeExcludingIdDeviceTypeId channel_type_excluding_id_device_type_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ChannelType, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'device_type_id',
            'channel_type_excluding_id_device_type_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type_channel_type_controller_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'device_type_id' is set
        if self.api_client.client_side_validation and ('device_type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['device_type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `device_type_id` when calling `device_type_channel_type_controller_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_type_id' in local_var_params:
            path_params['deviceTypeId'] = local_var_params['device_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'channel_type_excluding_id_device_type_id' in local_var_params:
            body_params = local_var_params['channel_type_excluding_id_device_type_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/device-type-channel-type/{deviceTypeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ChannelType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type_channel_type_controller_device_type_channel_categories(self, device_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_device_type_channel_categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_device_type_channel_categories(device_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.device_type_channel_type_controller_device_type_channel_categories_with_http_info(device_type_id, **kwargs)  # noqa: E501

    def device_type_channel_type_controller_device_type_channel_categories_with_http_info(self, device_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_device_type_channel_categories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_device_type_channel_categories_with_http_info(device_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'device_type_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type_channel_type_controller_device_type_channel_categories" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'device_type_id' is set
        if self.api_client.client_side_validation and ('device_type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['device_type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `device_type_id` when calling `device_type_channel_type_controller_device_type_channel_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_type_id' in local_var_params:
            path_params['deviceTypeId'] = local_var_params['device_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/device-type-channel-type/{deviceTypeId}/channel-categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChannelTypeExcludingNameDescriptionUnitChannelTypeDeviceTypeId]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type_channel_type_controller_find(self, device_type_id, page, count, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_find  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_find(device_type_id, page, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param float page: (required)
        :param float count: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ChannelType]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.device_type_channel_type_controller_find_with_http_info(device_type_id, page, count, **kwargs)  # noqa: E501

    def device_type_channel_type_controller_find_with_http_info(self, device_type_id, page, count, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_find  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_find_with_http_info(device_type_id, page, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float device_type_id: (required)
        :param float page: (required)
        :param float count: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ChannelType], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'device_type_id',
            'page',
            'count'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type_channel_type_controller_find" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'device_type_id' is set
        if self.api_client.client_side_validation and ('device_type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['device_type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `device_type_id` when calling `device_type_channel_type_controller_find`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in local_var_params or  # noqa: E501
                                                        local_var_params['page'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page` when calling `device_type_channel_type_controller_find`")  # noqa: E501
        # verify the required parameter 'count' is set
        if self.api_client.client_side_validation and ('count' not in local_var_params or  # noqa: E501
                                                        local_var_params['count'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `count` when calling `device_type_channel_type_controller_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_type_id' in local_var_params:
            path_params['deviceTypeId'] = local_var_params['device_type_id']  # noqa: E501
        if 'page' in local_var_params:
            path_params['page'] = local_var_params['page']  # noqa: E501
        if 'count' in local_var_params:
            path_params['count'] = local_var_params['count']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/device-type-channel-type/{deviceTypeId}/page/{page}/count/{count}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChannelType]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def device_type_channel_type_controller_update_by_id(self, channel_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_update_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_update_by_id(channel_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float channel_type_id: (required)
        :param ChannelTypeExcludingIdNameDeviceTypeId channel_type_excluding_id_name_device_type_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.device_type_channel_type_controller_update_by_id_with_http_info(channel_type_id, **kwargs)  # noqa: E501

    def device_type_channel_type_controller_update_by_id_with_http_info(self, channel_type_id, **kwargs):  # noqa: E501
        """device_type_channel_type_controller_update_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.device_type_channel_type_controller_update_by_id_with_http_info(channel_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param float channel_type_id: (required)
        :param ChannelTypeExcludingIdNameDeviceTypeId channel_type_excluding_id_name_device_type_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'channel_type_id',
            'channel_type_excluding_id_name_device_type_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method device_type_channel_type_controller_update_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'channel_type_id' is set
        if self.api_client.client_side_validation and ('channel_type_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_type_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_type_id` when calling `device_type_channel_type_controller_update_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channel_type_id' in local_var_params:
            path_params['channelTypeId'] = local_var_params['channel_type_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'channel_type_excluding_id_name_device_type_id' in local_var_params:
            body_params = local_var_params['channel_type_excluding_id_name_device_type_id']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/device-type-channel-type/channel-type/{channelTypeId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
