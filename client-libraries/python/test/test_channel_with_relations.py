# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.channel_with_relations import ChannelWithRelations  # noqa: E501
from openapi_client.rest import ApiException

class TestChannelWithRelations(unittest.TestCase):
    """ChannelWithRelations unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ChannelWithRelations
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.channel_with_relations.ChannelWithRelations()  # noqa: E501
        if include_optional :
            return ChannelWithRelations(
                id = 1.337, 
                monitor = True, 
                last_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                status = '0', 
                device_id = 1.337, 
                channel_type_id = 1.337, 
                device = openapi_client.models.device_with_relations.DeviceWithRelations(
                    id = 1.337, 
                    description = '0', 
                    serial_no = '0', 
                    data_logger_id = 1.337, 
                    device_type_id = 1.337, 
                    data_logger = openapi_client.models.data_logger_with_relations.DataLoggerWithRelations(
                        id = 1.337, 
                        description = '0', 
                        connection_type = '0', 
                        file_format = '0', 
                        username = '0', 
                        passwd = '0', 
                        auth_token = '0', 
                        config = '0', 
                        auto_init = True, 
                        data_compressed = True, 
                        user_id = 1.337, 
                        user = openapi_client.models.user_with_relations.UserWithRelations(
                            id = 1.337, 
                            username = '0', 
                            passwd = '0', 
                            email = '0', 
                            roles = [
                                '0'
                                ], 
                            is_virtual = True, 
                            subscription_reference_code = '0', 
                            user_credentials = openapi_client.models.user_credentials_with_relations.UserCredentialsWithRelations(
                                id = 1.337, 
                                passwd = '0', 
                                user_id = 1.337, ), ), ), 
                    device_type = openapi_client.models.device_type_with_relations.DeviceTypeWithRelations(
                        id = 1.337, 
                        model = '0', 
                        description = '0', 
                        manufacturer = '0', 
                        category = '0', 
                        channel_types = [
                            openapi_client.models.channel_type_with_relations.ChannelTypeWithRelations(
                                id = 1.337, 
                                name = '0', 
                                category = '0', 
                                description = '0', 
                                unit = '0', 
                                channel_type = '0', 
                                device_type_id = 1.337, )
                            ], ), ), 
                channel_type = openapi_client.models.channel_type_with_relations.ChannelTypeWithRelations(
                    id = 1.337, 
                    name = '0', 
                    category = '0', 
                    description = '0', 
                    unit = '0', 
                    channel_type = '0', 
                    device_type_id = 1.337, 
                    device_type = openapi_client.models.device_type_with_relations.DeviceTypeWithRelations(
                        id = 1.337, 
                        model = '0', 
                        description = '0', 
                        manufacturer = '0', 
                        category = '0', 
                        channel_types = [
                            openapi_client.models.channel_type_with_relations.ChannelTypeWithRelations(
                                id = 1.337, 
                                name = '0', 
                                category = '0', 
                                description = '0', 
                                unit = '0', 
                                channel_type = '0', 
                                device_type_id = 1.337, )
                            ], ), )
            )
        else :
            return ChannelWithRelations(
                monitor = True,
                device_id = 1.337,
                channel_type_id = 1.337,
        )

    def testChannelWithRelations(self):
        """Test ChannelWithRelations"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
