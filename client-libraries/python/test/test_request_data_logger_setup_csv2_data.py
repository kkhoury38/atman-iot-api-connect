# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.request_data_logger_setup_csv2_data import RequestDataLoggerSetupCsv2Data  # noqa: E501
from openapi_client.rest import ApiException

class TestRequestDataLoggerSetupCsv2Data(unittest.TestCase):
    """RequestDataLoggerSetupCsv2Data unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test RequestDataLoggerSetupCsv2Data
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.request_data_logger_setup_csv2_data.RequestDataLoggerSetupCsv2Data()  # noqa: E501
        if include_optional :
            return RequestDataLoggerSetupCsv2Data(
                header = openapi_client.models.request_data_logger_setup_csv2_data_header_location_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationExcluding_fileFormat_(
                    first_item_col = 1.337, 
                    next_item_iteration = 1.337, 
                    model = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, 
                        manual_value = '0', ), 
                    serial_no = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, 
                        manual_value = '0', ), 
                    channel_name = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_str_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_Str_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, 
                        manual_value = [
                            '0'
                            ], ), 
                    channel_unit = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_str_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_Str_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, ), 
                    period = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_number_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_NumberExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, ), ), 
                value = openapi_client.models.request_data_logger_setup_csv2_data_value_location_excluding_file_format_.RequestDataLoggerSetupCsv2DataValueLocationExcluding_fileFormat_(
                    first_item_row = 1.337, 
                    next_item_iteration = 1.337, )
            )
        else :
            return RequestDataLoggerSetupCsv2Data(
                header = openapi_client.models.request_data_logger_setup_csv2_data_header_location_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationExcluding_fileFormat_(
                    first_item_col = 1.337, 
                    next_item_iteration = 1.337, 
                    model = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, 
                        manual_value = '0', ), 
                    serial_no = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, 
                        manual_value = '0', ), 
                    channel_name = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_str_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_Str_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, 
                        manual_value = [
                            '0'
                            ], ), 
                    channel_unit = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_str_array_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_Str_ArrayExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, ), 
                    period = openapi_client.models.request_data_logger_setup_csv2_data_header_location_keys_number_excluding_file_format_.RequestDataLoggerSetupCsv2DataHeaderLocationKeys_NumberExcluding_fileFormat_(
                        first_item_row = 1.337, 
                        set_manually = True, ), ),
                value = openapi_client.models.request_data_logger_setup_csv2_data_value_location_excluding_file_format_.RequestDataLoggerSetupCsv2DataValueLocationExcluding_fileFormat_(
                    first_item_row = 1.337, 
                    next_item_iteration = 1.337, ),
        )

    def testRequestDataLoggerSetupCsv2Data(self):
        """Test RequestDataLoggerSetupCsv2Data"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
