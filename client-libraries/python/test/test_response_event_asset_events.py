# coding: utf-8

"""
    Atman IoT

    Atman IoT Server  # noqa: E501

    The version of the OpenAPI document: 3.0.1
    Contact: k.khoury@k-ren.gr
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.response_event_asset_events import ResponseEventAssetEvents  # noqa: E501
from openapi_client.rest import ApiException

class TestResponseEventAssetEvents(unittest.TestCase):
    """ResponseEventAssetEvents unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ResponseEventAssetEvents
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.response_event_asset_events.ResponseEventAssetEvents()  # noqa: E501
        if include_optional :
            return ResponseEventAssetEvents(
                event = openapi_client.models.event.Event(
                    id = 1.337, 
                    asset_id = 1.337, 
                    event_rule_id = 1.337, 
                    severity = '0', 
                    description = '0', 
                    resolved = True, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    resolution_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                event_related_device = [
                    openapi_client.models.event_related_device.EventRelatedDevice(
                        id = 1.337, 
                        device_id = 1.337, 
                        event_id = 1.337, )
                    ]
            )
        else :
            return ResponseEventAssetEvents(
                event = openapi_client.models.event.Event(
                    id = 1.337, 
                    asset_id = 1.337, 
                    event_rule_id = 1.337, 
                    severity = '0', 
                    description = '0', 
                    resolved = True, 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    resolution_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                event_related_device = [
                    openapi_client.models.event_related_device.EventRelatedDevice(
                        id = 1.337, 
                        device_id = 1.337, 
                        event_id = 1.337, )
                    ],
        )

    def testResponseEventAssetEvents(self):
        """Test ResponseEventAssetEvents"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
