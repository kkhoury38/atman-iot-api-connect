<?php
/**
 * NewDashboardElement
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NewDashboardElement Class Doc Comment
 *
 * @category Class
 * @description (Schema options: { title: &#39;NewDashboardElement&#39;, exclude: [ &#39;id&#39;, &#39;position&#39; ] })
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewDashboardElement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewDashboardElement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asset_id' => 'float',
        'user_id' => 'float',
        'device_category' => 'string',
        'channel_category' => 'string',
        'element_type' => 'string',
        'location' => 'string',
        'time_window' => 'float',
        'operation' => 'string',
        'group_by' => 'string',
        'title' => 'string',
        'x_label' => 'string',
        'y_label' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'asset_id' => null,
        'user_id' => null,
        'device_category' => null,
        'channel_category' => null,
        'element_type' => null,
        'location' => null,
        'time_window' => null,
        'operation' => null,
        'group_by' => null,
        'title' => null,
        'x_label' => null,
        'y_label' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset_id' => 'assetId',
        'user_id' => 'userId',
        'device_category' => 'deviceCategory',
        'channel_category' => 'channelCategory',
        'element_type' => 'elementType',
        'location' => 'location',
        'time_window' => 'timeWindow',
        'operation' => 'operation',
        'group_by' => 'groupBy',
        'title' => 'title',
        'x_label' => 'xLabel',
        'y_label' => 'yLabel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset_id' => 'setAssetId',
        'user_id' => 'setUserId',
        'device_category' => 'setDeviceCategory',
        'channel_category' => 'setChannelCategory',
        'element_type' => 'setElementType',
        'location' => 'setLocation',
        'time_window' => 'setTimeWindow',
        'operation' => 'setOperation',
        'group_by' => 'setGroupBy',
        'title' => 'setTitle',
        'x_label' => 'setXLabel',
        'y_label' => 'setYLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset_id' => 'getAssetId',
        'user_id' => 'getUserId',
        'device_category' => 'getDeviceCategory',
        'channel_category' => 'getChannelCategory',
        'element_type' => 'getElementType',
        'location' => 'getLocation',
        'time_window' => 'getTimeWindow',
        'operation' => 'getOperation',
        'group_by' => 'getGroupBy',
        'title' => 'getTitle',
        'x_label' => 'getXLabel',
        'y_label' => 'getYLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset_id'] = isset($data['asset_id']) ? $data['asset_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['device_category'] = isset($data['device_category']) ? $data['device_category'] : null;
        $this->container['channel_category'] = isset($data['channel_category']) ? $data['channel_category'] : null;
        $this->container['element_type'] = isset($data['element_type']) ? $data['element_type'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['time_window'] = isset($data['time_window']) ? $data['time_window'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : null;
        $this->container['group_by'] = isset($data['group_by']) ? $data['group_by'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['x_label'] = isset($data['x_label']) ? $data['x_label'] : null;
        $this->container['y_label'] = isset($data['y_label']) ? $data['y_label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asset_id'] === null) {
            $invalidProperties[] = "'asset_id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['device_category'] === null) {
            $invalidProperties[] = "'device_category' can't be null";
        }
        if ($this->container['channel_category'] === null) {
            $invalidProperties[] = "'channel_category' can't be null";
        }
        if ($this->container['element_type'] === null) {
            $invalidProperties[] = "'element_type' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['time_window'] === null) {
            $invalidProperties[] = "'time_window' can't be null";
        }
        if ($this->container['operation'] === null) {
            $invalidProperties[] = "'operation' can't be null";
        }
        if ($this->container['group_by'] === null) {
            $invalidProperties[] = "'group_by' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset_id
     *
     * @return float
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param float $asset_id ID of Asset that Dashboard Element belongs to
     *
     * @return $this
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param float $user_id ID of User that Dashboard Element belongs to
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets device_category
     *
     * @return string
     */
    public function getDeviceCategory()
    {
        return $this->container['device_category'];
    }

    /**
     * Sets device_category
     *
     * @param string $device_category Device Category
     *
     * @return $this
     */
    public function setDeviceCategory($device_category)
    {
        $this->container['device_category'] = $device_category;

        return $this;
    }

    /**
     * Gets channel_category
     *
     * @return string
     */
    public function getChannelCategory()
    {
        return $this->container['channel_category'];
    }

    /**
     * Sets channel_category
     *
     * @param string $channel_category Channel Category
     *
     * @return $this
     */
    public function setChannelCategory($channel_category)
    {
        $this->container['channel_category'] = $channel_category;

        return $this;
    }

    /**
     * Gets element_type
     *
     * @return string
     */
    public function getElementType()
    {
        return $this->container['element_type'];
    }

    /**
     * Sets element_type
     *
     * @param string $element_type Element Type
     *
     * @return $this
     */
    public function setElementType($element_type)
    {
        $this->container['element_type'] = $element_type;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Element Location: mainDashboard / assetDashboard
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets time_window
     *
     * @return float
     */
    public function getTimeWindow()
    {
        return $this->container['time_window'];
    }

    /**
     * Sets time_window
     *
     * @param float $time_window Time Window
     *
     * @return $this
     */
    public function setTimeWindow($time_window)
    {
        $this->container['time_window'] = $time_window;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation Data Operation
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets group_by
     *
     * @return string
     */
    public function getGroupBy()
    {
        return $this->container['group_by'];
    }

    /**
     * Sets group_by
     *
     * @param string $group_by Data group by
     *
     * @return $this
     */
    public function setGroupBy($group_by)
    {
        $this->container['group_by'] = $group_by;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Element Title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets x_label
     *
     * @return string|null
     */
    public function getXLabel()
    {
        return $this->container['x_label'];
    }

    /**
     * Sets x_label
     *
     * @param string|null $x_label Element X Label
     *
     * @return $this
     */
    public function setXLabel($x_label)
    {
        $this->container['x_label'] = $x_label;

        return $this;
    }

    /**
     * Gets y_label
     *
     * @return string|null
     */
    public function getYLabel()
    {
        return $this->container['y_label'];
    }

    /**
     * Sets y_label
     *
     * @param string|null $y_label Element Y Label
     *
     * @return $this
     */
    public function setYLabel($y_label)
    {
        $this->container['y_label'] = $y_label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


