<?php
/**
 * DataLoggerExcludingIdAuthTokenConfigUserId
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataLoggerExcludingIdAuthTokenConfigUserId Class Doc Comment
 *
 * @category Class
 * @description (Schema options: { exclude: [ &#39;id&#39;, &#39;authToken&#39;, &#39;config&#39;, &#39;userId&#39; ] })
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DataLoggerExcludingIdAuthTokenConfigUserId implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataLoggerExcluding_id-authToken-config-userId_';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'connection_type' => 'string',
        'file_format' => 'string',
        'username' => 'string',
        'passwd' => 'string',
        'auto_init' => 'bool',
        'data_compressed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'description' => null,
        'connection_type' => null,
        'file_format' => null,
        'username' => null,
        'passwd' => null,
        'auto_init' => null,
        'data_compressed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'connection_type' => 'connectionType',
        'file_format' => 'fileFormat',
        'username' => 'username',
        'passwd' => 'passwd',
        'auto_init' => 'autoInit',
        'data_compressed' => 'dataCompressed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'connection_type' => 'setConnectionType',
        'file_format' => 'setFileFormat',
        'username' => 'setUsername',
        'passwd' => 'setPasswd',
        'auto_init' => 'setAutoInit',
        'data_compressed' => 'setDataCompressed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'connection_type' => 'getConnectionType',
        'file_format' => 'getFileFormat',
        'username' => 'getUsername',
        'passwd' => 'getPasswd',
        'auto_init' => 'getAutoInit',
        'data_compressed' => 'getDataCompressed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['connection_type'] = isset($data['connection_type']) ? $data['connection_type'] : null;
        $this->container['file_format'] = isset($data['file_format']) ? $data['file_format'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['passwd'] = isset($data['passwd']) ? $data['passwd'] : null;
        $this->container['auto_init'] = isset($data['auto_init']) ? $data['auto_init'] : null;
        $this->container['data_compressed'] = isset($data['data_compressed']) ? $data['data_compressed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['connection_type'] === null) {
            $invalidProperties[] = "'connection_type' can't be null";
        }
        if ($this->container['file_format'] === null) {
            $invalidProperties[] = "'file_format' can't be null";
        }
        if ($this->container['auto_init'] === null) {
            $invalidProperties[] = "'auto_init' can't be null";
        }
        if ($this->container['data_compressed'] === null) {
            $invalidProperties[] = "'data_compressed' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Datalogger description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string $connection_type Method used by DataLogger to send data to the system. At present only FTP implemented
     *
     * @return $this
     */
    public function setConnectionType($connection_type)
    {
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets file_format
     *
     * @return string
     */
    public function getFileFormat()
    {
        return $this->container['file_format'];
    }

    /**
     * Sets file_format
     *
     * @param string $file_format Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats
     *
     * @return $this
     */
    public function setFileFormat($file_format)
    {
        $this->container['file_format'] = $file_format;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username of system FTP account, where the DataLogger sends the data (if applicable)
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets passwd
     *
     * @return string|null
     */
    public function getPasswd()
    {
        return $this->container['passwd'];
    }

    /**
     * Sets passwd
     *
     * @param string|null $passwd Password of system FTP account, where the DataLogger sends the data (if applicable)
     *
     * @return $this
     */
    public function setPasswd($passwd)
    {
        $this->container['passwd'] = $passwd;

        return $this;
    }

    /**
     * Gets auto_init
     *
     * @return bool
     */
    public function getAutoInit()
    {
        return $this->container['auto_init'];
    }

    /**
     * Sets auto_init
     *
     * @param bool $auto_init Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration
     *
     * @return $this
     */
    public function setAutoInit($auto_init)
    {
        $this->container['auto_init'] = $auto_init;

        return $this;
    }

    /**
     * Gets data_compressed
     *
     * @return bool
     */
    public function getDataCompressed()
    {
        return $this->container['data_compressed'];
    }

    /**
     * Sets data_compressed
     *
     * @param bool $data_compressed Flag for selecting if DataLogger sends compressed files
     *
     * @return $this
     */
    public function setDataCompressed($data_compressed)
    {
        $this->container['data_compressed'] = $data_compressed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


