<?php
/**
 * EventRuleSubscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EventRuleSubscription Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventRuleSubscription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventRuleSubscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'execution_period' => 'float',
        'last_exec_timestamp' => 'string',
        'asset_id' => 'float',
        'event_rule_id' => 'float',
        'rule_activated' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'execution_period' => null,
        'last_exec_timestamp' => null,
        'asset_id' => null,
        'event_rule_id' => null,
        'rule_activated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'execution_period' => 'executionPeriod',
        'last_exec_timestamp' => 'lastExecTimestamp',
        'asset_id' => 'assetId',
        'event_rule_id' => 'eventRuleId',
        'rule_activated' => 'ruleActivated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'execution_period' => 'setExecutionPeriod',
        'last_exec_timestamp' => 'setLastExecTimestamp',
        'asset_id' => 'setAssetId',
        'event_rule_id' => 'setEventRuleId',
        'rule_activated' => 'setRuleActivated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'execution_period' => 'getExecutionPeriod',
        'last_exec_timestamp' => 'getLastExecTimestamp',
        'asset_id' => 'getAssetId',
        'event_rule_id' => 'getEventRuleId',
        'rule_activated' => 'getRuleActivated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['execution_period'] = isset($data['execution_period']) ? $data['execution_period'] : null;
        $this->container['last_exec_timestamp'] = isset($data['last_exec_timestamp']) ? $data['last_exec_timestamp'] : null;
        $this->container['asset_id'] = isset($data['asset_id']) ? $data['asset_id'] : null;
        $this->container['event_rule_id'] = isset($data['event_rule_id']) ? $data['event_rule_id'] : null;
        $this->container['rule_activated'] = isset($data['rule_activated']) ? $data['rule_activated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['execution_period'] === null) {
            $invalidProperties[] = "'execution_period' can't be null";
        }
        if ($this->container['asset_id'] === null) {
            $invalidProperties[] = "'asset_id' can't be null";
        }
        if ($this->container['event_rule_id'] === null) {
            $invalidProperties[] = "'event_rule_id' can't be null";
        }
        if ($this->container['rule_activated'] === null) {
            $invalidProperties[] = "'rule_activated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id Automatically generated ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets execution_period
     *
     * @return float
     */
    public function getExecutionPeriod()
    {
        return $this->container['execution_period'];
    }

    /**
     * Sets execution_period
     *
     * @param float $execution_period EventRule execution period - seconds
     *
     * @return $this
     */
    public function setExecutionPeriod($execution_period)
    {
        $this->container['execution_period'] = $execution_period;

        return $this;
    }

    /**
     * Gets last_exec_timestamp
     *
     * @return string|null
     */
    public function getLastExecTimestamp()
    {
        return $this->container['last_exec_timestamp'];
    }

    /**
     * Sets last_exec_timestamp
     *
     * @param string|null $last_exec_timestamp Last execution timestamp
     *
     * @return $this
     */
    public function setLastExecTimestamp($last_exec_timestamp)
    {
        $this->container['last_exec_timestamp'] = $last_exec_timestamp;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return float
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param float $asset_id ID of Asset subscribed to EventRule
     *
     * @return $this
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets event_rule_id
     *
     * @return float
     */
    public function getEventRuleId()
    {
        return $this->container['event_rule_id'];
    }

    /**
     * Sets event_rule_id
     *
     * @param float $event_rule_id ID of associated EventRule
     *
     * @return $this
     */
    public function setEventRuleId($event_rule_id)
    {
        $this->container['event_rule_id'] = $event_rule_id;

        return $this;
    }

    /**
     * Gets rule_activated
     *
     * @return bool
     */
    public function getRuleActivated()
    {
        return $this->container['rule_activated'];
    }

    /**
     * Sets rule_activated
     *
     * @param bool $rule_activated Is set to true when EventRule has been activated
     *
     * @return $this
     */
    public function setRuleActivated($rule_activated)
    {
        $this->container['rule_activated'] = $rule_activated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


