<?php
/**
 * EventRuleWithRelations
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EventRuleWithRelations Class Doc Comment
 *
 * @category Class
 * @description (Schema options: { includeRelations: true })
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventRuleWithRelations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EventRuleWithRelations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'description' => 'string',
        'scope' => 'string',
        'algorithm' => 'string',
        'action' => 'string',
        'action_parameters' => 'string',
        'rule' => 'string',
        'execution_period' => 'float',
        'last_exec_timestamp' => '\DateTime',
        'activated' => 'bool',
        'in_progress' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'scope' => null,
        'algorithm' => null,
        'action' => null,
        'action_parameters' => null,
        'rule' => null,
        'execution_period' => null,
        'last_exec_timestamp' => 'date-time',
        'activated' => null,
        'in_progress' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'scope' => 'scope',
        'algorithm' => 'algorithm',
        'action' => 'action',
        'action_parameters' => 'actionParameters',
        'rule' => 'rule',
        'execution_period' => 'executionPeriod',
        'last_exec_timestamp' => 'lastExecTimestamp',
        'activated' => 'activated',
        'in_progress' => 'inProgress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'scope' => 'setScope',
        'algorithm' => 'setAlgorithm',
        'action' => 'setAction',
        'action_parameters' => 'setActionParameters',
        'rule' => 'setRule',
        'execution_period' => 'setExecutionPeriod',
        'last_exec_timestamp' => 'setLastExecTimestamp',
        'activated' => 'setActivated',
        'in_progress' => 'setInProgress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'scope' => 'getScope',
        'algorithm' => 'getAlgorithm',
        'action' => 'getAction',
        'action_parameters' => 'getActionParameters',
        'rule' => 'getRule',
        'execution_period' => 'getExecutionPeriod',
        'last_exec_timestamp' => 'getLastExecTimestamp',
        'activated' => 'getActivated',
        'in_progress' => 'getInProgress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['algorithm'] = isset($data['algorithm']) ? $data['algorithm'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['action_parameters'] = isset($data['action_parameters']) ? $data['action_parameters'] : null;
        $this->container['rule'] = isset($data['rule']) ? $data['rule'] : null;
        $this->container['execution_period'] = isset($data['execution_period']) ? $data['execution_period'] : null;
        $this->container['last_exec_timestamp'] = isset($data['last_exec_timestamp']) ? $data['last_exec_timestamp'] : null;
        $this->container['activated'] = isset($data['activated']) ? $data['activated'] : null;
        $this->container['in_progress'] = isset($data['in_progress']) ? $data['in_progress'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scope'] === null) {
            $invalidProperties[] = "'scope' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id Automatically generated ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Rule description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope Rule scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets algorithm
     *
     * @return string|null
     */
    public function getAlgorithm()
    {
        return $this->container['algorithm'];
    }

    /**
     * Sets algorithm
     *
     * @param string|null $algorithm Event Detection Algorithm
     *
     * @return $this
     */
    public function setAlgorithm($algorithm)
    {
        $this->container['algorithm'] = $algorithm;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Rule action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets action_parameters
     *
     * @return string|null
     */
    public function getActionParameters()
    {
        return $this->container['action_parameters'];
    }

    /**
     * Sets action_parameters
     *
     * @param string|null $action_parameters Rule action parameters
     *
     * @return $this
     */
    public function setActionParameters($action_parameters)
    {
        $this->container['action_parameters'] = $action_parameters;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return string|null
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param string|null $rule JSON Rule
     *
     * @return $this
     */
    public function setRule($rule)
    {
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets execution_period
     *
     * @return float|null
     */
    public function getExecutionPeriod()
    {
        return $this->container['execution_period'];
    }

    /**
     * Sets execution_period
     *
     * @param float|null $execution_period EventRule execution period - seconds
     *
     * @return $this
     */
    public function setExecutionPeriod($execution_period)
    {
        $this->container['execution_period'] = $execution_period;

        return $this;
    }

    /**
     * Gets last_exec_timestamp
     *
     * @return \DateTime|null
     */
    public function getLastExecTimestamp()
    {
        return $this->container['last_exec_timestamp'];
    }

    /**
     * Sets last_exec_timestamp
     *
     * @param \DateTime|null $last_exec_timestamp Last execution timestamp
     *
     * @return $this
     */
    public function setLastExecTimestamp($last_exec_timestamp)
    {
        $this->container['last_exec_timestamp'] = $last_exec_timestamp;

        return $this;
    }

    /**
     * Gets activated
     *
     * @return bool|null
     */
    public function getActivated()
    {
        return $this->container['activated'];
    }

    /**
     * Sets activated
     *
     * @param bool|null $activated Is set to true when EventRule has been activated
     *
     * @return $this
     */
    public function setActivated($activated)
    {
        $this->container['activated'] = $activated;

        return $this;
    }

    /**
     * Gets in_progress
     *
     * @return bool|null
     */
    public function getInProgress()
    {
        return $this->container['in_progress'];
    }

    /**
     * Sets in_progress
     *
     * @param bool|null $in_progress Is automaticaly set to true when EventRule is being processed
     *
     * @return $this
     */
    public function setInProgress($in_progress)
    {
        $this->container['in_progress'] = $in_progress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


