<?php
/**
 * DeviceWithRelations
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DeviceWithRelations Class Doc Comment
 *
 * @category Class
 * @description (Schema options: { includeRelations: true })
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DeviceWithRelations implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeviceWithRelations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'description' => 'string',
        'serial_no' => 'string',
        'data_logger_id' => 'float',
        'device_type_id' => 'float',
        'data_logger' => '\OpenAPI\Client\Model\DataLoggerWithRelations',
        'device_type' => '\OpenAPI\Client\Model\DeviceTypeWithRelations'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'description' => null,
        'serial_no' => null,
        'data_logger_id' => null,
        'device_type_id' => null,
        'data_logger' => null,
        'device_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'serial_no' => 'serialNo',
        'data_logger_id' => 'dataLoggerId',
        'device_type_id' => 'deviceTypeId',
        'data_logger' => 'dataLogger',
        'device_type' => 'deviceType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'serial_no' => 'setSerialNo',
        'data_logger_id' => 'setDataLoggerId',
        'device_type_id' => 'setDeviceTypeId',
        'data_logger' => 'setDataLogger',
        'device_type' => 'setDeviceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'serial_no' => 'getSerialNo',
        'data_logger_id' => 'getDataLoggerId',
        'device_type_id' => 'getDeviceTypeId',
        'data_logger' => 'getDataLogger',
        'device_type' => 'getDeviceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['data_logger_id'] = isset($data['data_logger_id']) ? $data['data_logger_id'] : null;
        $this->container['device_type_id'] = isset($data['device_type_id']) ? $data['device_type_id'] : null;
        $this->container['data_logger'] = isset($data['data_logger']) ? $data['data_logger'] : null;
        $this->container['device_type'] = isset($data['device_type']) ? $data['device_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['serial_no'] === null) {
            $invalidProperties[] = "'serial_no' can't be null";
        }
        if ($this->container['data_logger_id'] === null) {
            $invalidProperties[] = "'data_logger_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id Automatically generated ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Device description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no Device serial number
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets data_logger_id
     *
     * @return float
     */
    public function getDataLoggerId()
    {
        return $this->container['data_logger_id'];
    }

    /**
     * Sets data_logger_id
     *
     * @param float $data_logger_id ID of DataLogger that Device belongs to
     *
     * @return $this
     */
    public function setDataLoggerId($data_logger_id)
    {
        $this->container['data_logger_id'] = $data_logger_id;

        return $this;
    }

    /**
     * Gets device_type_id
     *
     * @return float|null
     */
    public function getDeviceTypeId()
    {
        return $this->container['device_type_id'];
    }

    /**
     * Sets device_type_id
     *
     * @param float|null $device_type_id device_type_id
     *
     * @return $this
     */
    public function setDeviceTypeId($device_type_id)
    {
        $this->container['device_type_id'] = $device_type_id;

        return $this;
    }

    /**
     * Gets data_logger
     *
     * @return \OpenAPI\Client\Model\DataLoggerWithRelations|null
     */
    public function getDataLogger()
    {
        return $this->container['data_logger'];
    }

    /**
     * Sets data_logger
     *
     * @param \OpenAPI\Client\Model\DataLoggerWithRelations|null $data_logger data_logger
     *
     * @return $this
     */
    public function setDataLogger($data_logger)
    {
        $this->container['data_logger'] = $data_logger;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return \OpenAPI\Client\Model\DeviceTypeWithRelations|null
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param \OpenAPI\Client\Model\DeviceTypeWithRelations|null $device_type device_type
     *
     * @return $this
     */
    public function setDeviceType($device_type)
    {
        $this->container['device_type'] = $device_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


