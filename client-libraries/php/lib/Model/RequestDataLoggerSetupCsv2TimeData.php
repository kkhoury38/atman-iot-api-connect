<?php
/**
 * RequestDataLoggerSetupCsv2TimeData
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Atman IoT
 *
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: k.khoury@k-ren.gr
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RequestDataLoggerSetupCsv2TimeData Class Doc Comment
 *
 * @category Class
 * @description (Schema options: { exclude: [ &#39;fileFormat&#39; ] })
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RequestDataLoggerSetupCsv2TimeData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RequestDataLoggerSetupCsv2TimeData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'column' => 'float',
        'first_item_row' => 'float',
        'next_item_iteration' => 'float',
        'timezone' => '\OpenAPI\Client\Model\RequestDataLoggerSetupCsv2LocationSpec',
        'format' => '\OpenAPI\Client\Model\RequestDataLoggerSetupCsv2LocationSpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'column' => null,
        'first_item_row' => null,
        'next_item_iteration' => null,
        'timezone' => null,
        'format' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'column' => 'column',
        'first_item_row' => 'firstItemRow',
        'next_item_iteration' => 'nextItemIteration',
        'timezone' => 'timezone',
        'format' => 'format'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'column' => 'setColumn',
        'first_item_row' => 'setFirstItemRow',
        'next_item_iteration' => 'setNextItemIteration',
        'timezone' => 'setTimezone',
        'format' => 'setFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'column' => 'getColumn',
        'first_item_row' => 'getFirstItemRow',
        'next_item_iteration' => 'getNextItemIteration',
        'timezone' => 'getTimezone',
        'format' => 'getFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['column'] = isset($data['column']) ? $data['column'] : null;
        $this->container['first_item_row'] = isset($data['first_item_row']) ? $data['first_item_row'] : null;
        $this->container['next_item_iteration'] = isset($data['next_item_iteration']) ? $data['next_item_iteration'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['column'] === null) {
            $invalidProperties[] = "'column' can't be null";
        }
        if ($this->container['first_item_row'] === null) {
            $invalidProperties[] = "'first_item_row' can't be null";
        }
        if ($this->container['next_item_iteration'] === null) {
            $invalidProperties[] = "'next_item_iteration' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['format'] === null) {
            $invalidProperties[] = "'format' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets column
     *
     * @return float
     */
    public function getColumn()
    {
        return $this->container['column'];
    }

    /**
     * Sets column
     *
     * @param float $column Column containing time data
     *
     * @return $this
     */
    public function setColumn($column)
    {
        $this->container['column'] = $column;

        return $this;
    }

    /**
     * Gets first_item_row
     *
     * @return float
     */
    public function getFirstItemRow()
    {
        return $this->container['first_item_row'];
    }

    /**
     * Sets first_item_row
     *
     * @param float $first_item_row Row containing first value of time data in the CSV file
     *
     * @return $this
     */
    public function setFirstItemRow($first_item_row)
    {
        $this->container['first_item_row'] = $first_item_row;

        return $this;
    }

    /**
     * Gets next_item_iteration
     *
     * @return float
     */
    public function getNextItemIteration()
    {
        return $this->container['next_item_iteration'];
    }

    /**
     * Sets next_item_iteration
     *
     * @param float $next_item_iteration Relevant row location of next item
     *
     * @return $this
     */
    public function setNextItemIteration($next_item_iteration)
    {
        $this->container['next_item_iteration'] = $next_item_iteration;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return \OpenAPI\Client\Model\RequestDataLoggerSetupCsv2LocationSpec
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param \OpenAPI\Client\Model\RequestDataLoggerSetupCsv2LocationSpec $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets format
     *
     * @return \OpenAPI\Client\Model\RequestDataLoggerSetupCsv2LocationSpec
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param \OpenAPI\Client\Model\RequestDataLoggerSetupCsv2LocationSpec $format format
     *
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


