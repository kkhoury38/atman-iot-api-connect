=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class DeviceChannelControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param from_ts [String] 
    # @param to_ts [String] 
    # @param page [Float] 
    # @param count [Float] 
    # @param group_by [String] 
    # @param operation [String] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseDeviceChannelData]
    def device_channel_controller_find_by_period(device_id, channel_id, from_ts, to_ts, page, count, group_by, operation, opts = {})
      data, _status_code, _headers = device_channel_controller_find_by_period_with_http_info(device_id, channel_id, from_ts, to_ts, page, count, group_by, operation, opts)
      data
    end

    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param from_ts [String] 
    # @param to_ts [String] 
    # @param page [Float] 
    # @param count [Float] 
    # @param group_by [String] 
    # @param operation [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseDeviceChannelData, Integer, Hash)>] ResponseDeviceChannelData data, response status code and response headers
    def device_channel_controller_find_by_period_with_http_info(device_id, channel_id, from_ts, to_ts, page, count, group_by, operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceChannelControllerApi.device_channel_controller_find_by_period ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # verify the required parameter 'from_ts' is set
      if @api_client.config.client_side_validation && from_ts.nil?
        fail ArgumentError, "Missing the required parameter 'from_ts' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # verify the required parameter 'to_ts' is set
      if @api_client.config.client_side_validation && to_ts.nil?
        fail ArgumentError, "Missing the required parameter 'to_ts' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # verify the required parameter 'group_by' is set
      if @api_client.config.client_side_validation && group_by.nil?
        fail ArgumentError, "Missing the required parameter 'group_by' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # verify the required parameter 'operation' is set
      if @api_client.config.client_side_validation && operation.nil?
        fail ArgumentError, "Missing the required parameter 'operation' when calling DeviceChannelControllerApi.device_channel_controller_find_by_period"
      end
      # resource path
      local_var_path = '/device-channel/data-by-period/{deviceId}/{channelId}/from/{fromTS}/to/{toTs}/page/{page}/count/{count}/groupBy/{groupBy}/operation/{operation}'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s)).sub('{' + 'channelId' + '}', CGI.escape(channel_id.to_s)).sub('{' + 'fromTS' + '}', CGI.escape(from_ts.to_s)).sub('{' + 'toTs' + '}', CGI.escape(to_ts.to_s)).sub('{' + 'page' + '}', CGI.escape(page.to_s)).sub('{' + 'count' + '}', CGI.escape(count.to_s)).sub('{' + 'groupBy' + '}', CGI.escape(group_by.to_s)).sub('{' + 'operation' + '}', CGI.escape(operation.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ResponseDeviceChannelData' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceChannelControllerApi#device_channel_controller_find_by_period\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Timestamp]
    def device_channel_controller_find_device_all_last_recorded_ts(device_id, opts = {})
      data, _status_code, _headers = device_channel_controller_find_device_all_last_recorded_ts_with_http_info(device_id, opts)
      data
    end

    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Timestamp, Integer, Hash)>] Timestamp data, response status code and response headers
    def device_channel_controller_find_device_all_last_recorded_ts_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceChannelControllerApi.device_channel_controller_find_device_all_last_recorded_ts ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceChannelControllerApi.device_channel_controller_find_device_all_last_recorded_ts"
      end
      # resource path
      local_var_path = '/device-channel/last-timestamp-in-device/{deviceId}'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Timestamp' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceChannelControllerApi#device_channel_controller_find_device_all_last_recorded_ts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ResponseDeviceChannelData>]
    def device_channel_controller_find_device_all_last_ts(device_id, opts = {})
      data, _status_code, _headers = device_channel_controller_find_device_all_last_ts_with_http_info(device_id, opts)
      data
    end

    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ResponseDeviceChannelData>, Integer, Hash)>] Array<ResponseDeviceChannelData> data, response status code and response headers
    def device_channel_controller_find_device_all_last_ts_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceChannelControllerApi.device_channel_controller_find_device_all_last_ts ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceChannelControllerApi.device_channel_controller_find_device_all_last_ts"
      end
      # resource path
      local_var_path = '/device-channel/data-last-timestamp/all-channels/{deviceId}'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ResponseDeviceChannelData>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceChannelControllerApi#device_channel_controller_find_device_all_last_ts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseDeviceChannelData]
    def device_channel_controller_find_device_channel_last_ts(device_id, channel_id, opts = {})
      data, _status_code, _headers = device_channel_controller_find_device_channel_last_ts_with_http_info(device_id, channel_id, opts)
      data
    end

    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseDeviceChannelData, Integer, Hash)>] ResponseDeviceChannelData data, response status code and response headers
    def device_channel_controller_find_device_channel_last_ts_with_http_info(device_id, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceChannelControllerApi.device_channel_controller_find_device_channel_last_ts ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceChannelControllerApi.device_channel_controller_find_device_channel_last_ts"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling DeviceChannelControllerApi.device_channel_controller_find_device_channel_last_ts"
      end
      # resource path
      local_var_path = '/device-channel/data-last-timestamp/{deviceId}/{channelId}'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s)).sub('{' + 'channelId' + '}', CGI.escape(channel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ResponseDeviceChannelData' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceChannelControllerApi#device_channel_controller_find_device_channel_last_ts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param serial_no [String] 
    # @param channel_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [ResponseDeviceChannelData]
    def device_channel_controller_find_device_channel_last_ts_sn_ch_name(serial_no, channel_name, opts = {})
      data, _status_code, _headers = device_channel_controller_find_device_channel_last_ts_sn_ch_name_with_http_info(serial_no, channel_name, opts)
      data
    end

    # @param serial_no [String] 
    # @param channel_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseDeviceChannelData, Integer, Hash)>] ResponseDeviceChannelData data, response status code and response headers
    def device_channel_controller_find_device_channel_last_ts_sn_ch_name_with_http_info(serial_no, channel_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceChannelControllerApi.device_channel_controller_find_device_channel_last_ts_sn_ch_name ...'
      end
      # verify the required parameter 'serial_no' is set
      if @api_client.config.client_side_validation && serial_no.nil?
        fail ArgumentError, "Missing the required parameter 'serial_no' when calling DeviceChannelControllerApi.device_channel_controller_find_device_channel_last_ts_sn_ch_name"
      end
      # verify the required parameter 'channel_name' is set
      if @api_client.config.client_side_validation && channel_name.nil?
        fail ArgumentError, "Missing the required parameter 'channel_name' when calling DeviceChannelControllerApi.device_channel_controller_find_device_channel_last_ts_sn_ch_name"
      end
      # resource path
      local_var_path = '/device-channel/data-last-timestamp-by-name/{serialNo}/{channelName}'.sub('{' + 'serialNo' + '}', CGI.escape(serial_no.to_s)).sub('{' + 'channelName' + '}', CGI.escape(channel_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ResponseDeviceChannelData' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceChannelControllerApi#device_channel_controller_find_device_channel_last_ts_sn_ch_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
