=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class DeviceTypeControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @return [LoopbackCount]
    def device_type_controller_count(opts = {})
      data, _status_code, _headers = device_type_controller_count_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(LoopbackCount, Integer, Hash)>] LoopbackCount data, response status code and response headers
    def device_type_controller_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceTypeControllerApi.device_type_controller_count ...'
      end
      # resource path
      local_var_path = '/device-type/count'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'LoopbackCount' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypeControllerApi#device_type_controller_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeviceType] :device_type 
    # @return [DeviceType]
    def device_type_controller_create(opts = {})
      data, _status_code, _headers = device_type_controller_create_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DeviceType] :device_type 
    # @return [Array<(DeviceType, Integer, Hash)>] DeviceType data, response status code and response headers
    def device_type_controller_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceTypeControllerApi.device_type_controller_create ...'
      end
      # resource path
      local_var_path = '/device-type'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'device_type']) 

      # return_type
      return_type = opts[:return_type] || 'DeviceType' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypeControllerApi#device_type_controller_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param page [Float] 
    # @param count [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<DeviceType>]
    def device_type_controller_find(page, count, opts = {})
      data, _status_code, _headers = device_type_controller_find_with_http_info(page, count, opts)
      data
    end

    # @param page [Float] 
    # @param count [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DeviceType>, Integer, Hash)>] Array<DeviceType> data, response status code and response headers
    def device_type_controller_find_with_http_info(page, count, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceTypeControllerApi.device_type_controller_find ...'
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling DeviceTypeControllerApi.device_type_controller_find"
      end
      # verify the required parameter 'count' is set
      if @api_client.config.client_side_validation && count.nil?
        fail ArgumentError, "Missing the required parameter 'count' when calling DeviceTypeControllerApi.device_type_controller_find"
      end
      # resource path
      local_var_path = '/device-type/get-all/page/{page}/count/{count}'.sub('{' + 'page' + '}', CGI.escape(page.to_s)).sub('{' + 'count' + '}', CGI.escape(count.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<DeviceType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypeControllerApi#device_type_controller_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param asset_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<DeviceTypeExcludingModelDescriptionManufacturer>]
    def device_type_controller_get_asset_device_categories(asset_id, opts = {})
      data, _status_code, _headers = device_type_controller_get_asset_device_categories_with_http_info(asset_id, opts)
      data
    end

    # @param asset_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DeviceTypeExcludingModelDescriptionManufacturer>, Integer, Hash)>] Array<DeviceTypeExcludingModelDescriptionManufacturer> data, response status code and response headers
    def device_type_controller_get_asset_device_categories_with_http_info(asset_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceTypeControllerApi.device_type_controller_get_asset_device_categories ...'
      end
      # verify the required parameter 'asset_id' is set
      if @api_client.config.client_side_validation && asset_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_id' when calling DeviceTypeControllerApi.device_type_controller_get_asset_device_categories"
      end
      # resource path
      local_var_path = '/device-type/device-categories-in-asset/{assetId}'.sub('{' + 'assetId' + '}', CGI.escape(asset_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<DeviceTypeExcludingModelDescriptionManufacturer>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypeControllerApi#device_type_controller_get_asset_device_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceTypeExcludingIdModelManufacturer] :device_type_excluding_id_model_manufacturer 
    # @return [nil]
    def device_type_controller_update_by_id(id, opts = {})
      device_type_controller_update_by_id_with_http_info(id, opts)
      nil
    end

    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceTypeExcludingIdModelManufacturer] :device_type_excluding_id_model_manufacturer 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def device_type_controller_update_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceTypeControllerApi.device_type_controller_update_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceTypeControllerApi.device_type_controller_update_by_id"
      end
      # resource path
      local_var_path = '/device-type/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'device_type_excluding_id_model_manufacturer']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceTypeControllerApi#device_type_controller_update_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
