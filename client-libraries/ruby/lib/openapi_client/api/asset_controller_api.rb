=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class AssetControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Used for creating a new <b>Asset</b>, by an authorized <b>User</b>, identified by the provided <i>token</i>. An <b>Asset</b> is a way of logical grouping of <b>Devices</b>. One <b>Asset</b> can contain many <b>Devices</b> and can belong to one <b>AssetGroup</b>. <br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-assetgroupcontroller\" target=\"_blank\">AssetGroupController</a>, <a href=\"/documentation.html#atman-iot-devicecontroller\" target=\"_blank\">DeviceController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsasset\" target=\"_blank\">AssetModel</a></i>
    # @param [Hash] opts the optional parameters
    # @option opts [AssetExcludingId] :asset_excluding_id 
    # @return [Asset]
    def asset_controller_create(opts = {})
      data, _status_code, _headers = asset_controller_create_with_http_info(opts)
      data
    end

    # Used for creating a new &lt;b&gt;Asset&lt;/b&gt;, by an authorized &lt;b&gt;User&lt;/b&gt;, identified by the provided &lt;i&gt;token&lt;/i&gt;. An &lt;b&gt;Asset&lt;/b&gt; is a way of logical grouping of &lt;b&gt;Devices&lt;/b&gt;. One &lt;b&gt;Asset&lt;/b&gt; can contain many &lt;b&gt;Devices&lt;/b&gt; and can belong to one &lt;b&gt;AssetGroup&lt;/b&gt;. &lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-assetgroupcontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetGroupController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-devicecontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsasset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetModel&lt;/a&gt;&lt;/i&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [AssetExcludingId] :asset_excluding_id 
    # @return [Array<(Asset, Integer, Hash)>] Asset data, response status code and response headers
    def asset_controller_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetControllerApi.asset_controller_create ...'
      end
      # resource path
      local_var_path = '/asset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'asset_excluding_id']) 

      # return_type
      return_type = opts[:return_type] || 'Asset' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetControllerApi#asset_controller_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for deleting an <b>Asset</b>, identified by <i>id</i> by an authorized <b>User</b> identified by the provided <i>token</i>. <br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsasset\" target=\"_blank\">AssetModel</a></i>
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def asset_controller_delete_by_id(id, opts = {})
      asset_controller_delete_by_id_with_http_info(id, opts)
      nil
    end

    # Used for deleting an &lt;b&gt;Asset&lt;/b&gt;, identified by &lt;i&gt;id&lt;/i&gt; by an authorized &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token&lt;/i&gt;. &lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsasset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetModel&lt;/a&gt;&lt;/i&gt;
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def asset_controller_delete_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetControllerApi.asset_controller_delete_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetControllerApi.asset_controller_delete_by_id"
      end
      # resource path
      local_var_path = '/asset/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetControllerApi#asset_controller_delete_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for getting the <b>Assets</b> belonging to an <b>AssetGroup</b>, in turn belonging to an authorized <b>User</b> or <b>Virtual User</b>.  An <b>Asset</b> is a way of logical grouping of <b>Devices</b>. One <b>Asset</b> can contain many <b>Devices</b> and can belong to the <b>AssetGroup</b> with the provided <i>assetGroupId</i>. An <b>AssetGroup</b> can have many <b>Assets</b>. <i><b>. <br><br>References:</b> <a href=\"/documentation.html#atman-iot-assetgroupcontroller\" target=\"_blank\">AssetGroupController</a>, <a href=\"/documentation.html#atman-iot-devicecontroller\" target=\"_blank\">DeviceController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsasset\" target=\"_blank\">AssetModel</a></i>
    # @param asset_group_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Asset>]
    def asset_controller_find(asset_group_id, opts = {})
      data, _status_code, _headers = asset_controller_find_with_http_info(asset_group_id, opts)
      data
    end

    # Used for getting the &lt;b&gt;Assets&lt;/b&gt; belonging to an &lt;b&gt;AssetGroup&lt;/b&gt;, in turn belonging to an authorized &lt;b&gt;User&lt;/b&gt; or &lt;b&gt;Virtual User&lt;/b&gt;.  An &lt;b&gt;Asset&lt;/b&gt; is a way of logical grouping of &lt;b&gt;Devices&lt;/b&gt;. One &lt;b&gt;Asset&lt;/b&gt; can contain many &lt;b&gt;Devices&lt;/b&gt; and can belong to the &lt;b&gt;AssetGroup&lt;/b&gt; with the provided &lt;i&gt;assetGroupId&lt;/i&gt;. An &lt;b&gt;AssetGroup&lt;/b&gt; can have many &lt;b&gt;Assets&lt;/b&gt;. &lt;i&gt;&lt;b&gt;. &lt;br&gt;&lt;br&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-assetgroupcontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetGroupController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-devicecontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsasset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetModel&lt;/a&gt;&lt;/i&gt;
    # @param asset_group_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Asset>, Integer, Hash)>] Array<Asset> data, response status code and response headers
    def asset_controller_find_with_http_info(asset_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetControllerApi.asset_controller_find ...'
      end
      # verify the required parameter 'asset_group_id' is set
      if @api_client.config.client_side_validation && asset_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'asset_group_id' when calling AssetControllerApi.asset_controller_find"
      end
      # resource path
      local_var_path = '/assets/{assetGroupId}'.sub('{' + 'assetGroupId' + '}', CGI.escape(asset_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Asset>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetControllerApi#asset_controller_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for getting the <b>Asset</b> identified by <i>assetName</i>, by an authorized <b>User</b> or <b>Virtual User</b> identified by the provided <i>token</i>. An <b>Asset</b> is a way of logical grouping of <b>Devices</b>. One <b>Asset</b> can contain many <b>Devices</b> and can belong to one <b>AssetGroup</b>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-assetgroupcontroller\" target=\"_blank\">AssetGroupController</a>, <a href=\"/documentation.html#atman-iot-devicecontroller\" target=\"_blank\">DeviceController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsasset\" target=\"_blank\">AssetModel</a></i>
    # @param asset_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Asset]
    def asset_controller_find_by_name(asset_name, opts = {})
      data, _status_code, _headers = asset_controller_find_by_name_with_http_info(asset_name, opts)
      data
    end

    # Used for getting the &lt;b&gt;Asset&lt;/b&gt; identified by &lt;i&gt;assetName&lt;/i&gt;, by an authorized &lt;b&gt;User&lt;/b&gt; or &lt;b&gt;Virtual User&lt;/b&gt; identified by the provided &lt;i&gt;token&lt;/i&gt;. An &lt;b&gt;Asset&lt;/b&gt; is a way of logical grouping of &lt;b&gt;Devices&lt;/b&gt;. One &lt;b&gt;Asset&lt;/b&gt; can contain many &lt;b&gt;Devices&lt;/b&gt; and can belong to one &lt;b&gt;AssetGroup&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-assetgroupcontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetGroupController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-devicecontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsasset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetModel&lt;/a&gt;&lt;/i&gt;
    # @param asset_name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Asset, Integer, Hash)>] Asset data, response status code and response headers
    def asset_controller_find_by_name_with_http_info(asset_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetControllerApi.asset_controller_find_by_name ...'
      end
      # verify the required parameter 'asset_name' is set
      if @api_client.config.client_side_validation && asset_name.nil?
        fail ArgumentError, "Missing the required parameter 'asset_name' when calling AssetControllerApi.asset_controller_find_by_name"
      end
      # resource path
      local_var_path = '/asset/by-name/{assetName}'.sub('{' + 'assetName' + '}', CGI.escape(asset_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Asset' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetControllerApi#asset_controller_find_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for getting the <b>Assets</b> of an authorized <b>User</b> identified by the provided <i>userId</i>, by an authorized <b>Admin</b>. An <b>Asset</b> is a way of logical grouping of <b>Devices</b>. One <b>Asset</b> can contain many <b>Devices</b> and can belong to one <b>AssetGroup</b>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-assetgroupcontroller\" target=\"_blank\">AssetGroupController</a>, <a href=\"/documentation.html#atman-iot-devicecontroller\" target=\"_blank\">DeviceController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsasset\" target=\"_blank\">AssetModel</a></i>
    # @param user_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Asset>]
    def asset_controller_find_by_user_id(user_id, opts = {})
      data, _status_code, _headers = asset_controller_find_by_user_id_with_http_info(user_id, opts)
      data
    end

    # Used for getting the &lt;b&gt;Assets&lt;/b&gt; of an authorized &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;userId&lt;/i&gt;, by an authorized &lt;b&gt;Admin&lt;/b&gt;. An &lt;b&gt;Asset&lt;/b&gt; is a way of logical grouping of &lt;b&gt;Devices&lt;/b&gt;. One &lt;b&gt;Asset&lt;/b&gt; can contain many &lt;b&gt;Devices&lt;/b&gt; and can belong to one &lt;b&gt;AssetGroup&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-assetgroupcontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetGroupController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-devicecontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsasset\&quot; target&#x3D;\&quot;_blank\&quot;&gt;AssetModel&lt;/a&gt;&lt;/i&gt;
    # @param user_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Asset>, Integer, Hash)>] Array<Asset> data, response status code and response headers
    def asset_controller_find_by_user_id_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetControllerApi.asset_controller_find_by_user_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AssetControllerApi.asset_controller_find_by_user_id"
      end
      # resource path
      local_var_path = '/assets/by-user/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Asset>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetControllerApi#asset_controller_find_by_user_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit (Patch) Asset by Id
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [AssetExcludingIdAssetGroupId] :asset_excluding_id_asset_group_id 
    # @return [nil]
    def asset_controller_update_by_id(id, opts = {})
      asset_controller_update_by_id_with_http_info(id, opts)
      nil
    end

    # Edit (Patch) Asset by Id
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [AssetExcludingIdAssetGroupId] :asset_excluding_id_asset_group_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def asset_controller_update_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetControllerApi.asset_controller_update_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetControllerApi.asset_controller_update_by_id"
      end
      # resource path
      local_var_path = '/asset/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'asset_excluding_id_asset_group_id']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetControllerApi#asset_controller_update_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
