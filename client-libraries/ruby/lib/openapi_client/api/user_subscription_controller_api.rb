=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class UserSubscriptionControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [nil]
    def user_subscription_controller_create(opts = {})
      user_subscription_controller_create_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Object] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_subscription_controller_create_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserSubscriptionControllerApi.user_subscription_controller_create ...'
      end
      # resource path
      local_var_path = '/user-subscriptions/paypal/callback'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserSubscriptionControllerApi#user_subscription_controller_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param subscription_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [UserSubscription]
    def user_subscription_controller_create_user_subscription_by_sub_id(subscription_id, opts = {})
      data, _status_code, _headers = user_subscription_controller_create_user_subscription_by_sub_id_with_http_info(subscription_id, opts)
      data
    end

    # @param subscription_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserSubscription, Integer, Hash)>] UserSubscription data, response status code and response headers
    def user_subscription_controller_create_user_subscription_by_sub_id_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserSubscriptionControllerApi.user_subscription_controller_create_user_subscription_by_sub_id ...'
      end
      # verify the required parameter 'subscription_id' is set
      if @api_client.config.client_side_validation && subscription_id.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_id' when calling UserSubscriptionControllerApi.user_subscription_controller_create_user_subscription_by_sub_id"
      end
      # resource path
      local_var_path = '/user-subscription/get-new/{subscriptionId}'.sub('{' + 'subscriptionId' + '}', CGI.escape(subscription_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'UserSubscription' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserSubscriptionControllerApi#user_subscription_controller_create_user_subscription_by_sub_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param product [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Subscription>]
    def user_subscription_controller_find_subscriptions_by_category(product, opts = {})
      data, _status_code, _headers = user_subscription_controller_find_subscriptions_by_category_with_http_info(product, opts)
      data
    end

    # @param product [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Subscription>, Integer, Hash)>] Array<Subscription> data, response status code and response headers
    def user_subscription_controller_find_subscriptions_by_category_with_http_info(product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserSubscriptionControllerApi.user_subscription_controller_find_subscriptions_by_category ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling UserSubscriptionControllerApi.user_subscription_controller_find_subscriptions_by_category"
      end
      # resource path
      local_var_path = '/user-subscription/subscriptions/{product}'.sub('{' + 'product' + '}', CGI.escape(product.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Subscription>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserSubscriptionControllerApi#user_subscription_controller_find_subscriptions_by_category\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param reference_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [UserSubscriptionWithRelations]
    def user_subscription_controller_get_by_refference_code(reference_code, opts = {})
      data, _status_code, _headers = user_subscription_controller_get_by_refference_code_with_http_info(reference_code, opts)
      data
    end

    # @param reference_code [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserSubscriptionWithRelations, Integer, Hash)>] UserSubscriptionWithRelations data, response status code and response headers
    def user_subscription_controller_get_by_refference_code_with_http_info(reference_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserSubscriptionControllerApi.user_subscription_controller_get_by_refference_code ...'
      end
      # verify the required parameter 'reference_code' is set
      if @api_client.config.client_side_validation && reference_code.nil?
        fail ArgumentError, "Missing the required parameter 'reference_code' when calling UserSubscriptionControllerApi.user_subscription_controller_get_by_refference_code"
      end
      # resource path
      local_var_path = '/user-subscription/get-by-reference-code/{referenceCode}'.sub('{' + 'referenceCode' + '}', CGI.escape(reference_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'UserSubscriptionWithRelations' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserSubscriptionControllerApi#user_subscription_controller_get_by_refference_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [CodeVerificationRequest] :code_verification_request 
    # @return [UserSubscription]
    def user_subscription_controller_verify_code(opts = {})
      data, _status_code, _headers = user_subscription_controller_verify_code_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [CodeVerificationRequest] :code_verification_request 
    # @return [Array<(UserSubscription, Integer, Hash)>] UserSubscription data, response status code and response headers
    def user_subscription_controller_verify_code_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserSubscriptionControllerApi.user_subscription_controller_verify_code ...'
      end
      # resource path
      local_var_path = '/user-subscriptions/verify-reference-code'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'code_verification_request']) 

      # return_type
      return_type = opts[:return_type] || 'UserSubscription' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserSubscriptionControllerApi#user_subscription_controller_verify_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
