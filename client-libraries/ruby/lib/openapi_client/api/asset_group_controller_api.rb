=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class AssetGroupControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroupExcludingIdUserId] :asset_group_excluding_id_user_id 
    # @return [AssetGroup]
    def asset_group_controller_create_asset_group(opts = {})
      data, _status_code, _headers = asset_group_controller_create_asset_group_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroupExcludingIdUserId] :asset_group_excluding_id_user_id 
    # @return [Array<(AssetGroup, Integer, Hash)>] AssetGroup data, response status code and response headers
    def asset_group_controller_create_asset_group_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupControllerApi.asset_group_controller_create_asset_group ...'
      end
      # resource path
      local_var_path = '/asset-group/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'asset_group_excluding_id_user_id']) 

      # return_type
      return_type = opts[:return_type] || 'AssetGroup' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupControllerApi#asset_group_controller_create_asset_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def asset_group_controller_delete_by_id(id, opts = {})
      asset_group_controller_delete_by_id_with_http_info(id, opts)
      nil
    end

    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def asset_group_controller_delete_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupControllerApi.asset_group_controller_delete_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupControllerApi.asset_group_controller_delete_by_id"
      end
      # resource path
      local_var_path = '/asset-group/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupControllerApi#asset_group_controller_delete_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<AssetGroup>]
    def asset_group_controller_find_user_asset_groups(opts = {})
      data, _status_code, _headers = asset_group_controller_find_user_asset_groups_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AssetGroup>, Integer, Hash)>] Array<AssetGroup> data, response status code and response headers
    def asset_group_controller_find_user_asset_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupControllerApi.asset_group_controller_find_user_asset_groups ...'
      end
      # resource path
      local_var_path = '/asset-groups/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<AssetGroup>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupControllerApi#asset_group_controller_find_user_asset_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit (PATCH) AssetGroup
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroupExcludingIdUserId] :asset_group_excluding_id_user_id 
    # @return [nil]
    def asset_group_controller_update_by_id(id, opts = {})
      asset_group_controller_update_by_id_with_http_info(id, opts)
      nil
    end

    # Edit (PATCH) AssetGroup
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [AssetGroupExcludingIdUserId] :asset_group_excluding_id_user_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def asset_group_controller_update_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AssetGroupControllerApi.asset_group_controller_update_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AssetGroupControllerApi.asset_group_controller_update_by_id"
      end
      # resource path
      local_var_path = '/asset-group/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'asset_group_excluding_id_user_id']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AssetGroupControllerApi#asset_group_controller_update_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
