=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SchedulerControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param attempt [Float] 
    # @param server_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduler_controller_process_events(attempt, server_key, opts = {})
      scheduler_controller_process_events_with_http_info(attempt, server_key, opts)
      nil
    end

    # @param attempt [Float] 
    # @param server_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduler_controller_process_events_with_http_info(attempt, server_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SchedulerControllerApi.scheduler_controller_process_events ...'
      end
      # verify the required parameter 'attempt' is set
      if @api_client.config.client_side_validation && attempt.nil?
        fail ArgumentError, "Missing the required parameter 'attempt' when calling SchedulerControllerApi.scheduler_controller_process_events"
      end
      # verify the required parameter 'server_key' is set
      if @api_client.config.client_side_validation && server_key.nil?
        fail ArgumentError, "Missing the required parameter 'server_key' when calling SchedulerControllerApi.scheduler_controller_process_events"
      end
      # resource path
      local_var_path = '/scheduler/process/events/{attempt}/{serverKey}'.sub('{' + 'attempt' + '}', CGI.escape(attempt.to_s)).sub('{' + 'serverKey' + '}', CGI.escape(server_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SchedulerControllerApi#scheduler_controller_process_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param server_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def scheduler_controller_process_ftp_rejected(server_key, opts = {})
      scheduler_controller_process_ftp_rejected_with_http_info(server_key, opts)
      nil
    end

    # @param server_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def scheduler_controller_process_ftp_rejected_with_http_info(server_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SchedulerControllerApi.scheduler_controller_process_ftp_rejected ...'
      end
      # verify the required parameter 'server_key' is set
      if @api_client.config.client_side_validation && server_key.nil?
        fail ArgumentError, "Missing the required parameter 'server_key' when calling SchedulerControllerApi.scheduler_controller_process_ftp_rejected"
      end
      # resource path
      local_var_path = '/scheduler/process/ftp-rejected/{serverKey}'.sub('{' + 'serverKey' + '}', CGI.escape(server_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SchedulerControllerApi#scheduler_controller_process_ftp_rejected\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
