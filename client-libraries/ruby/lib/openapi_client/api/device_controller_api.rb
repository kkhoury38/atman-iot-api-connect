=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class DeviceControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Used for creating a new <b>Device</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
    # @param data_logger_id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceExcludingIdDataLoggerId] :device_excluding_id_data_logger_id 
    # @return [Device]
    def device_controller_create(data_logger_id, opts = {})
      data, _status_code, _headers = device_controller_create_with_http_info(data_logger_id, opts)
      data
    end

    # Used for creating a new &lt;b&gt;Device&lt;/b&gt;, belonging to a &lt;b&gt;DataLogger&lt;/b&gt; with id &lt;i&gt;dataLoggerId&lt;/i&gt; by an authorized &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-dataloggercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdevice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceModel&lt;/a&gt;&lt;/i&gt;
    # @param data_logger_id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceExcludingIdDataLoggerId] :device_excluding_id_data_logger_id 
    # @return [Array<(Device, Integer, Hash)>] Device data, response status code and response headers
    def device_controller_create_with_http_info(data_logger_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_create ...'
      end
      # verify the required parameter 'data_logger_id' is set
      if @api_client.config.client_side_validation && data_logger_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_logger_id' when calling DeviceControllerApi.device_controller_create"
      end
      # resource path
      local_var_path = '/device/{dataLoggerId}'.sub('{' + 'dataLoggerId' + '}', CGI.escape(data_logger_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'device_excluding_id_data_logger_id']) 

      # return_type
      return_type = opts[:return_type] || 'Device' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for creating a new <b>Channel</b>, belonging to a <b>Device</b> with id <i>deviceId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [ChannelExcludingIdDeviceId] :channel_excluding_id_device_id 
    # @return [Channel]
    def device_controller_create_channel(device_id, opts = {})
      data, _status_code, _headers = device_controller_create_channel_with_http_info(device_id, opts)
      data
    end

    # Used for creating a new &lt;b&gt;Channel&lt;/b&gt;, belonging to a &lt;b&gt;Device&lt;/b&gt; with id &lt;i&gt;deviceId&lt;/i&gt; by an authorized &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocschannel\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ChannelModel&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdevice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceModel&lt;/a&gt;&lt;/i&gt;
    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [ChannelExcludingIdDeviceId] :channel_excluding_id_device_id 
    # @return [Array<(Channel, Integer, Hash)>] Channel data, response status code and response headers
    def device_controller_create_channel_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_create_channel ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceControllerApi.device_controller_create_channel"
      end
      # resource path
      local_var_path = '/device/{deviceId}/channel'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'channel_excluding_id_device_id']) 

      # return_type
      return_type = opts[:return_type] || 'Channel' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_create_channel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param all [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def device_controller_disable_channel_monitoring(device_id, channel_id, all, opts = {})
      device_controller_disable_channel_monitoring_with_http_info(device_id, channel_id, all, opts)
      nil
    end

    # Disable monitoring of &lt;b&gt;Channel&lt;/b&gt; identified by &lt;i&gt;channelId&lt;/i&gt;, in &lt;b&gt;Device&lt;/b&gt; identified by &lt;i&gt;deviceId&lt;/i&gt;, owned by &lt;b&gt;User&lt;/b&gt; authorized by &lt;i&gt;token&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocschannel\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ChannelModel&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdevice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceModel&lt;/a&gt;&lt;/i&gt;
    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param all [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def device_controller_disable_channel_monitoring_with_http_info(device_id, channel_id, all, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_disable_channel_monitoring ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceControllerApi.device_controller_disable_channel_monitoring"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling DeviceControllerApi.device_controller_disable_channel_monitoring"
      end
      # verify the required parameter 'all' is set
      if @api_client.config.client_side_validation && all.nil?
        fail ArgumentError, "Missing the required parameter 'all' when calling DeviceControllerApi.device_controller_disable_channel_monitoring"
      end
      # resource path
      local_var_path = '/device/{deviceId}/channel/{channelId}/disable-monitoring/all/{all}'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s)).sub('{' + 'channelId' + '}', CGI.escape(channel_id.to_s)).sub('{' + 'all' + '}', CGI.escape(all.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_disable_channel_monitoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param all [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def device_controller_enable_channel_monitoring(device_id, channel_id, all, opts = {})
      device_controller_enable_channel_monitoring_with_http_info(device_id, channel_id, all, opts)
      nil
    end

    # Enable monitoring of &lt;b&gt;Channel&lt;/b&gt; identified by &lt;i&gt;channelId&lt;/i&gt;, in &lt;b&gt;Device&lt;/b&gt; identified by &lt;i&gt;deviceId&lt;/i&gt;, owned by &lt;b&gt;User&lt;/b&gt; authorized by &lt;i&gt;token&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocschannel\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ChannelModel&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdevice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceModel&lt;/a&gt;&lt;/i&gt;
    # @param device_id [Float] 
    # @param channel_id [Float] 
    # @param all [Boolean] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def device_controller_enable_channel_monitoring_with_http_info(device_id, channel_id, all, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_enable_channel_monitoring ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceControllerApi.device_controller_enable_channel_monitoring"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling DeviceControllerApi.device_controller_enable_channel_monitoring"
      end
      # verify the required parameter 'all' is set
      if @api_client.config.client_side_validation && all.nil?
        fail ArgumentError, "Missing the required parameter 'all' when calling DeviceControllerApi.device_controller_enable_channel_monitoring"
      end
      # resource path
      local_var_path = '/device/{deviceId}/channel/{channelId}/enable-monitoring/all/{all}'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s)).sub('{' + 'channelId' + '}', CGI.escape(channel_id.to_s)).sub('{' + 'all' + '}', CGI.escape(all.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_enable_channel_monitoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for getting the <b>Devices</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
    # @param data_logger_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Device>]
    def device_controller_find(data_logger_id, opts = {})
      data, _status_code, _headers = device_controller_find_with_http_info(data_logger_id, opts)
      data
    end

    # Used for getting the &lt;b&gt;Devices&lt;/b&gt;, belonging to a &lt;b&gt;DataLogger&lt;/b&gt; with id &lt;i&gt;dataLoggerId&lt;/i&gt; by an authorized &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-dataloggercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DataLoggerController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdevice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceModel&lt;/a&gt;&lt;/i&gt;
    # @param data_logger_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Device>, Integer, Hash)>] Array<Device> data, response status code and response headers
    def device_controller_find_with_http_info(data_logger_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_find ...'
      end
      # verify the required parameter 'data_logger_id' is set
      if @api_client.config.client_side_validation && data_logger_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_logger_id' when calling DeviceControllerApi.device_controller_find"
      end
      # resource path
      local_var_path = '/devices/{dataLoggerId}'.sub('{' + 'dataLoggerId' + '}', CGI.escape(data_logger_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Device>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for getting the  <b>Channel</b><b>Types</b> of <b>Channels</b> belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocschanneltype\" target=\"_blank\">ChannelTypeModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ChannelType>]
    def device_controller_find_channel_types(device_id, opts = {})
      data, _status_code, _headers = device_controller_find_channel_types_with_http_info(device_id, opts)
      data
    end

    # Used for getting the  &lt;b&gt;Channel&lt;/b&gt;&lt;b&gt;Types&lt;/b&gt; of &lt;b&gt;Channels&lt;/b&gt; belonging to a &lt;b&gt;Device&lt;/b&gt; with id &lt;i&gt;deviceId&lt;/i&gt;, by an authorized &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocschannel\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ChannelModel&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocschanneltype\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ChannelTypeModel&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdevice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceModel&lt;/a&gt;&lt;/i&gt;
    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChannelType>, Integer, Hash)>] Array<ChannelType> data, response status code and response headers
    def device_controller_find_channel_types_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_find_channel_types ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceControllerApi.device_controller_find_channel_types"
      end
      # resource path
      local_var_path = '/device/{deviceId}/channelTypes'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ChannelType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_find_channel_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for getting <b>Channel</b><b>s</b>, belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Channel>]
    def device_controller_find_channels(device_id, opts = {})
      data, _status_code, _headers = device_controller_find_channels_with_http_info(device_id, opts)
      data
    end

    # Used for getting &lt;b&gt;Channel&lt;/b&gt;&lt;b&gt;s&lt;/b&gt;, belonging to a &lt;b&gt;Device&lt;/b&gt; with id &lt;i&gt;deviceId&lt;/i&gt;, by an authorized &lt;b&gt;User&lt;/b&gt; identified by the provided &lt;i&gt;token&lt;/i&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#atman-iot-usercontroller\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserController&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocschannel\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ChannelModel&lt;/a&gt;, &lt;a href&#x3D;\&quot;/documentation.html#tocsdevice\&quot; target&#x3D;\&quot;_blank\&quot;&gt;DeviceModel&lt;/a&gt;&lt;/i&gt;
    # @param device_id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Channel>, Integer, Hash)>] Array<Channel> data, response status code and response headers
    def device_controller_find_channels_with_http_info(device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_find_channels ...'
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DeviceControllerApi.device_controller_find_channels"
      end
      # resource path
      local_var_path = '/device/{deviceId}/channels'.sub('{' + 'deviceId' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Channel>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_find_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns array of devices with their device types
    # @param [Hash] opts the optional parameters
    # @option opts [Array<DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId>] :device_excluding_description_serial_no_data_logger_id_device_type_id 
    # @return [Array<DeviceWithType>]
    def device_controller_get_devices_with_type(opts = {})
      data, _status_code, _headers = device_controller_get_devices_with_type_with_http_info(opts)
      data
    end

    # Returns array of devices with their device types
    # @param [Hash] opts the optional parameters
    # @option opts [Array<DeviceExcludingDescriptionSerialNoDataLoggerIdDeviceTypeId>] :device_excluding_description_serial_no_data_logger_id_device_type_id 
    # @return [Array<(Array<DeviceWithType>, Integer, Hash)>] Array<DeviceWithType> data, response status code and response headers
    def device_controller_get_devices_with_type_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_get_devices_with_type ...'
      end
      # resource path
      local_var_path = '/devices/with-device-type'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'device_excluding_description_serial_no_data_logger_id_device_type_id']) 

      # return_type
      return_type = opts[:return_type] || 'Array<DeviceWithType>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_get_devices_with_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId] :device_excluding_id_serial_no_data_logger_id_device_type_id 
    # @return [nil]
    def device_controller_update_by_id(id, opts = {})
      device_controller_update_by_id_with_http_info(id, opts)
      nil
    end

    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceExcludingIdSerialNoDataLoggerIdDeviceTypeId] :device_excluding_id_serial_no_data_logger_id_device_type_id 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def device_controller_update_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceControllerApi.device_controller_update_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceControllerApi.device_controller_update_by_id"
      end
      # resource path
      local_var_path = '/device/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'device_excluding_id_serial_no_data_logger_id_device_type_id']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceControllerApi#device_controller_update_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
