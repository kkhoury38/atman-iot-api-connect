=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class UserControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Used for registering a new <b>User</b>.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
    # @param reference_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode] :user_excluding_id_username_is_virtual_roles_subscription_reference_code 
    # @return [User]
    def user_controller_create(reference_code, opts = {})
      data, _status_code, _headers = user_controller_create_with_http_info(reference_code, opts)
      data
    end

    # Used for registering a new &lt;b&gt;User&lt;/b&gt;.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsuser\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserModel&lt;/a&gt;&lt;/i&gt;
    # @param reference_code [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode] :user_excluding_id_username_is_virtual_roles_subscription_reference_code 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def user_controller_create_with_http_info(reference_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserControllerApi.user_controller_create ...'
      end
      # verify the required parameter 'reference_code' is set
      if @api_client.config.client_side_validation && reference_code.nil?
        fail ArgumentError, "Missing the required parameter 'reference_code' when calling UserControllerApi.user_controller_create"
      end
      # resource path
      local_var_path = '/user/register/{referenceCode}'.sub('{' + 'referenceCode' + '}', CGI.escape(reference_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'user_excluding_id_username_is_virtual_roles_subscription_reference_code']) 

      # return_type
      return_type = opts[:return_type] || 'User' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserControllerApi#user_controller_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for registering a new <b>Virtual User</b> by a <b>User</b>, identified by the provided <i>token.</i><br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
    # @param [Hash] opts the optional parameters
    # @option opts [UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode] :user_excluding_id_username_is_virtual_roles_subscription_reference_code 
    # @return [User]
    def user_controller_create_virtual(opts = {})
      data, _status_code, _headers = user_controller_create_virtual_with_http_info(opts)
      data
    end

    # Used for registering a new &lt;b&gt;Virtual User&lt;/b&gt; by a &lt;b&gt;User&lt;/b&gt;, identified by the provided &lt;i&gt;token.&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsuser\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserModel&lt;/a&gt;&lt;/i&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [UserExcludingIdUsernameIsVirtualRolesSubscriptionReferenceCode] :user_excluding_id_username_is_virtual_roles_subscription_reference_code 
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def user_controller_create_virtual_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserControllerApi.user_controller_create_virtual ...'
      end
      # resource path
      local_var_path = '/user/register/virtual'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'user_excluding_id_username_is_virtual_roles_subscription_reference_code']) 

      # return_type
      return_type = opts[:return_type] || 'User' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserControllerApi#user_controller_create_virtual\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes Virtual User by Id
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def user_controller_delete_virtual_user_by_id(id, opts = {})
      user_controller_delete_virtual_user_by_id_with_http_info(id, opts)
      nil
    end

    # Deletes Virtual User by Id
    # @param id [Float] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def user_controller_delete_virtual_user_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserControllerApi.user_controller_delete_virtual_user_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserControllerApi.user_controller_delete_virtual_user_by_id"
      end
      # resource path
      local_var_path = '/users/virtualUser/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserControllerApi#user_controller_delete_virtual_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns users under administrator account
    # @param [Hash] opts the optional parameters
    # @return [Array<UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode>]
    def user_controller_get_virtual_users(opts = {})
      data, _status_code, _headers = user_controller_get_virtual_users_with_http_info(opts)
      data
    end

    # Returns users under administrator account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode>, Integer, Hash)>] Array<UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode> data, response status code and response headers
    def user_controller_get_virtual_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserControllerApi.user_controller_get_virtual_users ...'
      end
      # resource path
      local_var_path = '/user/getVirtualUsers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<UserExcludingPasswdEmailRolesIsVirtualSubscriptionReferenceCode>' 

      # auth_names
      auth_names = opts[:auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserControllerApi#user_controller_get_virtual_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used for <b>User</b> and <b>Virtual User</b> login. Exchanges <i>username/password</i> with an authorization <i>token</i>. Please enter the email provided durring registration in the username field.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
    # @param [Hash] opts the optional parameters
    # @option opts [UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode] :user_excluding_id_email_is_virtual_roles_subscription_reference_code 
    # @return [Token]
    def user_controller_login(opts = {})
      data, _status_code, _headers = user_controller_login_with_http_info(opts)
      data
    end

    # Used for &lt;b&gt;User&lt;/b&gt; and &lt;b&gt;Virtual User&lt;/b&gt; login. Exchanges &lt;i&gt;username/password&lt;/i&gt; with an authorization &lt;i&gt;token&lt;/i&gt;. Please enter the email provided durring registration in the username field.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;References:&lt;/b&gt; &lt;a href&#x3D;\&quot;/documentation.html#tocsuser\&quot; target&#x3D;\&quot;_blank\&quot;&gt;UserModel&lt;/a&gt;&lt;/i&gt;
    # @param [Hash] opts the optional parameters
    # @option opts [UserExcludingIdEmailIsVirtualRolesSubscriptionReferenceCode] :user_excluding_id_email_is_virtual_roles_subscription_reference_code 
    # @return [Array<(Token, Integer, Hash)>] Token data, response status code and response headers
    def user_controller_login_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserControllerApi.user_controller_login ...'
      end
      # resource path
      local_var_path = '/user/login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'user_excluding_id_email_is_virtual_roles_subscription_reference_code']) 

      # return_type
      return_type = opts[:return_type] || 'Token' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserControllerApi#user_controller_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
