=begin
#Atman IoT

#Atman IoT Server

The version of the OpenAPI document: 3.0.1
Contact: k.khoury@k-ren.gr
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  # (tsType: UserSubscriptionWithRelations, schemaOptions: { includeRelations: true })
  class UserSubscriptionWithRelations
    attr_accessor :id

    attr_accessor :reference_code

    attr_accessor :email

    attr_accessor :discount

    # Timestamp
    attr_accessor :creation_timestamp

    # Timestamp
    attr_accessor :activation_timestamp

    # Timestamp
    attr_accessor :end_timestamp

    attr_accessor :has_registered

    # ID of Subscription
    attr_accessor :subscription_id

    attr_accessor :subscription

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'reference_code' => :'referenceCode',
        :'email' => :'email',
        :'discount' => :'discount',
        :'creation_timestamp' => :'creationTimestamp',
        :'activation_timestamp' => :'activationTimestamp',
        :'end_timestamp' => :'endTimestamp',
        :'has_registered' => :'hasRegistered',
        :'subscription_id' => :'subscriptionId',
        :'subscription' => :'subscription'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Float',
        :'reference_code' => :'String',
        :'email' => :'String',
        :'discount' => :'Float',
        :'creation_timestamp' => :'DateTime',
        :'activation_timestamp' => :'DateTime',
        :'end_timestamp' => :'DateTime',
        :'has_registered' => :'Boolean',
        :'subscription_id' => :'Float',
        :'subscription' => :'SubscriptionWithRelations'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::UserSubscriptionWithRelations` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::UserSubscriptionWithRelations`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'reference_code')
        self.reference_code = attributes[:'reference_code']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.key?(:'creation_timestamp')
        self.creation_timestamp = attributes[:'creation_timestamp']
      end

      if attributes.key?(:'activation_timestamp')
        self.activation_timestamp = attributes[:'activation_timestamp']
      end

      if attributes.key?(:'end_timestamp')
        self.end_timestamp = attributes[:'end_timestamp']
      end

      if attributes.key?(:'has_registered')
        self.has_registered = attributes[:'has_registered']
      end

      if attributes.key?(:'subscription_id')
        self.subscription_id = attributes[:'subscription_id']
      end

      if attributes.key?(:'subscription')
        self.subscription = attributes[:'subscription']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @reference_code.nil?
        invalid_properties.push('invalid value for "reference_code", reference_code cannot be nil.')
      end

      if @discount.nil?
        invalid_properties.push('invalid value for "discount", discount cannot be nil.')
      end

      if @creation_timestamp.nil?
        invalid_properties.push('invalid value for "creation_timestamp", creation_timestamp cannot be nil.')
      end

      if @has_registered.nil?
        invalid_properties.push('invalid value for "has_registered", has_registered cannot be nil.')
      end

      if @subscription_id.nil?
        invalid_properties.push('invalid value for "subscription_id", subscription_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @reference_code.nil?
      return false if @discount.nil?
      return false if @creation_timestamp.nil?
      return false if @has_registered.nil?
      return false if @subscription_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          reference_code == o.reference_code &&
          email == o.email &&
          discount == o.discount &&
          creation_timestamp == o.creation_timestamp &&
          activation_timestamp == o.activation_timestamp &&
          end_timestamp == o.end_timestamp &&
          has_registered == o.has_registered &&
          subscription_id == o.subscription_id &&
          subscription == o.subscription
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, reference_code, email, discount, creation_timestamp, activation_timestamp, end_timestamp, has_registered, subscription_id, subscription].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
