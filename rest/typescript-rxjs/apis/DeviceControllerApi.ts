// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    Channel,
    ChannelExcludingIdDeviceId,
    ChannelType,
    Device,
    DeviceExcludingIdDataLoggerId,
} from '../models';

export interface DeviceControllerCreateRequest {
    dataLoggerId: number;
    deviceExcludingIdDataLoggerId?: DeviceExcludingIdDataLoggerId;
}

export interface DeviceControllerCreateChannelRequest {
    deviceId: number;
    channelExcludingIdDeviceId?: ChannelExcludingIdDeviceId;
}

export interface DeviceControllerDisableChannelMonitoringRequest {
    deviceId: number;
    channelId: number;
}

export interface DeviceControllerEnableChannelMonitoringRequest {
    deviceId: number;
    channelId: number;
}

export interface DeviceControllerFindRequest {
    dataLoggerId: number;
}

export interface DeviceControllerFindChannelTypesRequest {
    deviceId: number;
    token?: string;
}

export interface DeviceControllerFindChannelsRequest {
    deviceId: number;
}

/**
 * no description
 */
export class DeviceControllerApi extends BaseAPI {

    /**
     * Used for creating a new <b>Device</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     */
    deviceControllerCreate = ({ dataLoggerId, deviceExcludingIdDataLoggerId }: DeviceControllerCreateRequest): Observable<Device> => {
        throwIfNullOrUndefined(dataLoggerId, 'deviceControllerCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Device>({
            path: '/device/{dataLoggerId}'.replace('{dataLoggerId}', encodeURI(dataLoggerId)),
            method: 'POST',
            headers,
            body: deviceExcludingIdDataLoggerId,
        });
    };

    /**
     * Used for creating a new <b>Channel</b>, belonging to a <b>Device</b> with id <i>deviceId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     */
    deviceControllerCreateChannel = ({ deviceId, channelExcludingIdDeviceId }: DeviceControllerCreateChannelRequest): Observable<Channel> => {
        throwIfNullOrUndefined(deviceId, 'deviceControllerCreateChannel');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Channel>({
            path: '/device/{deviceId}/channel'.replace('{deviceId}', encodeURI(deviceId)),
            method: 'POST',
            headers,
            body: channelExcludingIdDeviceId,
        });
    };

    /**
     * Disable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     */
    deviceControllerDisableChannelMonitoring = ({ deviceId, channelId }: DeviceControllerDisableChannelMonitoringRequest): Observable<void> => {
        throwIfNullOrUndefined(deviceId, 'deviceControllerDisableChannelMonitoring');
        throwIfNullOrUndefined(channelId, 'deviceControllerDisableChannelMonitoring');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/device/{deviceId}/channel/{channelId}/disable-monitoring'.replace('{deviceId}', encodeURI(deviceId)).replace('{channelId}', encodeURI(channelId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * Enable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     */
    deviceControllerEnableChannelMonitoring = ({ deviceId, channelId }: DeviceControllerEnableChannelMonitoringRequest): Observable<void> => {
        throwIfNullOrUndefined(deviceId, 'deviceControllerEnableChannelMonitoring');
        throwIfNullOrUndefined(channelId, 'deviceControllerEnableChannelMonitoring');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/device/{deviceId}/channel/{channelId}/enable-monitoring'.replace('{deviceId}', encodeURI(deviceId)).replace('{channelId}', encodeURI(channelId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * Used for getting the <b>Devices</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     */
    deviceControllerFind = ({ dataLoggerId }: DeviceControllerFindRequest): Observable<Array<Device>> => {
        throwIfNullOrUndefined(dataLoggerId, 'deviceControllerFind');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<Device>>({
            path: '/devices/{dataLoggerId}'.replace('{dataLoggerId}', encodeURI(dataLoggerId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * Used for getting theÂ  <b>Channel</b><b>Types</b> of <b>Channels</b> belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocschanneltype\" target=\"_blank\">ChannelTypeModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     */
    deviceControllerFindChannelTypes = ({ deviceId, token }: DeviceControllerFindChannelTypesRequest): Observable<Array<ChannelType>> => {
        throwIfNullOrUndefined(deviceId, 'deviceControllerFindChannelTypes');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (token != null) { query['token'] = token; }

        return this.request<Array<ChannelType>>({
            path: '/device/{deviceId}/channelTypes'.replace('{deviceId}', encodeURI(deviceId)),
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * Used for getting <b>Channel</b><b>s</b>, belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
     */
    deviceControllerFindChannels = ({ deviceId }: DeviceControllerFindChannelsRequest): Observable<Array<Channel>> => {
        throwIfNullOrUndefined(deviceId, 'deviceControllerFindChannels');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<Channel>>({
            path: '/device/{deviceId}/channels'.replace('{deviceId}', encodeURI(deviceId)),
            method: 'GET',
            headers,
        });
    };

}
