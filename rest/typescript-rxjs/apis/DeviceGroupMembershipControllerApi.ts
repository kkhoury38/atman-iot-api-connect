// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    DeviceGroupMembership,
    DeviceGroupMembershipExcludingId,
} from '../models';

export interface DeviceGroupMembershipControllerCreateRequest {
    deviceGroupMembershipExcludingId?: DeviceGroupMembershipExcludingId;
}

export interface DeviceGroupMembershipControllerDeleteByIdRequest {
    id: number;
}

export interface DeviceGroupMembershipControllerFindByAssetIdRequest {
    assetId: number;
}

export interface DeviceGroupMembershipControllerFindByDeviceIdRequest {
    deviceId: number;
}

/**
 * no description
 */
export class DeviceGroupMembershipControllerApi extends BaseAPI {

    /**
     */
    deviceGroupMembershipControllerCreate = ({ deviceGroupMembershipExcludingId }: DeviceGroupMembershipControllerCreateRequest): Observable<DeviceGroupMembership> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<DeviceGroupMembership>({
            path: '/device-group-memberships',
            method: 'POST',
            headers,
            body: deviceGroupMembershipExcludingId,
        });
    };

    /**
     */
    deviceGroupMembershipControllerDeleteById = ({ id }: DeviceGroupMembershipControllerDeleteByIdRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'deviceGroupMembershipControllerDeleteById');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/device-group-memberships/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     */
    deviceGroupMembershipControllerFindByAssetId = ({ assetId }: DeviceGroupMembershipControllerFindByAssetIdRequest): Observable<Array<DeviceGroupMembership>> => {
        throwIfNullOrUndefined(assetId, 'deviceGroupMembershipControllerFindByAssetId');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<DeviceGroupMembership>>({
            path: '/device-group-memberships/by-asset/{assetId}'.replace('{assetId}', encodeURI(assetId)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceGroupMembershipControllerFindByDeviceId = ({ deviceId }: DeviceGroupMembershipControllerFindByDeviceIdRequest): Observable<Array<DeviceGroupMembership>> => {
        throwIfNullOrUndefined(deviceId, 'deviceGroupMembershipControllerFindByDeviceId');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<DeviceGroupMembership>>({
            path: '/device-group-memberships/by-device/{deviceId}'.replace('{deviceId}', encodeURI(deviceId)),
            method: 'GET',
            headers,
        });
    };

}
