// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    ChannelType,
    ChannelTypeExcludingIdDeviceTypeId,
    LoopbackCount,
} from '../models';

export interface DeviceTypeChannelTypeControllerCountRequest {
    deviceTypeId: number;
    token?: string;
}

export interface DeviceTypeChannelTypeControllerCreateRequest {
    deviceTypeId: number;
    channelTypeExcludingIdDeviceTypeId?: ChannelTypeExcludingIdDeviceTypeId;
}

export interface DeviceTypeChannelTypeControllerFindRequest {
    deviceTypeId: number;
}

/**
 * no description
 */
export class DeviceTypeChannelTypeControllerApi extends BaseAPI {

    /**
     */
    deviceTypeChannelTypeControllerCount = ({ deviceTypeId, token }: DeviceTypeChannelTypeControllerCountRequest): Observable<LoopbackCount> => {
        throwIfNullOrUndefined(deviceTypeId, 'deviceTypeChannelTypeControllerCount');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (token != null) { query['token'] = token; }

        return this.request<LoopbackCount>({
            path: '/device-type-channel-type/{deviceTypeId}/count'.replace('{deviceTypeId}', encodeURI(deviceTypeId)),
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     */
    deviceTypeChannelTypeControllerCreate = ({ deviceTypeId, channelTypeExcludingIdDeviceTypeId }: DeviceTypeChannelTypeControllerCreateRequest): Observable<ChannelType> => {
        throwIfNullOrUndefined(deviceTypeId, 'deviceTypeChannelTypeControllerCreate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ChannelType>({
            path: '/device-type-channel-type/{deviceTypeId}'.replace('{deviceTypeId}', encodeURI(deviceTypeId)),
            method: 'POST',
            headers,
            body: channelTypeExcludingIdDeviceTypeId,
        });
    };

    /**
     */
    deviceTypeChannelTypeControllerFind = ({ deviceTypeId }: DeviceTypeChannelTypeControllerFindRequest): Observable<Array<ChannelType>> => {
        throwIfNullOrUndefined(deviceTypeId, 'deviceTypeChannelTypeControllerFind');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<ChannelType>>({
            path: '/device-type-channel-type/{deviceTypeId}'.replace('{deviceTypeId}', encodeURI(deviceTypeId)),
            method: 'GET',
            headers,
        });
    };

}
