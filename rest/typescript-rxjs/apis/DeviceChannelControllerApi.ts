// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    RequestDeviceChannelFindByPeriod,
    ResponseDeviceChannelData,
    Timestamp,
} from '../models';

export interface DeviceChannelControllerFindByPeriodRequest {
    deviceId: number;
    channelId: number;
    requestDeviceChannelFindByPeriod?: RequestDeviceChannelFindByPeriod;
}

export interface DeviceChannelControllerFindDeviceAllLastRecordedTSRequest {
    deviceId: number;
}

export interface DeviceChannelControllerFindDeviceAllLastTSRequest {
    deviceId: number;
}

export interface DeviceChannelControllerFindDeviceChannelLastTSRequest {
    deviceId: number;
    channelId: number;
}

export interface DeviceChannelControllerFindDeviceChannelLastTSSnChNameRequest {
    serialNo: string;
    channelName: string;
}

/**
 * no description
 */
export class DeviceChannelControllerApi extends BaseAPI {

    /**
     */
    deviceChannelControllerFindByPeriod = ({ deviceId, channelId, requestDeviceChannelFindByPeriod }: DeviceChannelControllerFindByPeriodRequest): Observable<ResponseDeviceChannelData> => {
        throwIfNullOrUndefined(deviceId, 'deviceChannelControllerFindByPeriod');
        throwIfNullOrUndefined(channelId, 'deviceChannelControllerFindByPeriod');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ResponseDeviceChannelData>({
            path: '/device-channel/data-by-period/{deviceId}/{channelId}'.replace('{deviceId}', encodeURI(deviceId)).replace('{channelId}', encodeURI(channelId)),
            method: 'POST',
            headers,
            body: requestDeviceChannelFindByPeriod,
        });
    };

    /**
     */
    deviceChannelControllerFindDeviceAllLastRecordedTS = ({ deviceId }: DeviceChannelControllerFindDeviceAllLastRecordedTSRequest): Observable<Timestamp> => {
        throwIfNullOrUndefined(deviceId, 'deviceChannelControllerFindDeviceAllLastRecordedTS');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Timestamp>({
            path: '/device-channel/last-timestamp-in-device/{deviceId}'.replace('{deviceId}', encodeURI(deviceId)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceChannelControllerFindDeviceAllLastTS = ({ deviceId }: DeviceChannelControllerFindDeviceAllLastTSRequest): Observable<Array<ResponseDeviceChannelData>> => {
        throwIfNullOrUndefined(deviceId, 'deviceChannelControllerFindDeviceAllLastTS');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<ResponseDeviceChannelData>>({
            path: '/device-channel/data-last-timestamp/all-channels/{deviceId}'.replace('{deviceId}', encodeURI(deviceId)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceChannelControllerFindDeviceChannelLastTS = ({ deviceId, channelId }: DeviceChannelControllerFindDeviceChannelLastTSRequest): Observable<ResponseDeviceChannelData> => {
        throwIfNullOrUndefined(deviceId, 'deviceChannelControllerFindDeviceChannelLastTS');
        throwIfNullOrUndefined(channelId, 'deviceChannelControllerFindDeviceChannelLastTS');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ResponseDeviceChannelData>({
            path: '/device-channel/data-last-timestamp/{deviceId}/{channelId}'.replace('{deviceId}', encodeURI(deviceId)).replace('{channelId}', encodeURI(channelId)),
            method: 'GET',
            headers,
        });
    };

    /**
     */
    deviceChannelControllerFindDeviceChannelLastTSSnChName = ({ serialNo, channelName }: DeviceChannelControllerFindDeviceChannelLastTSSnChNameRequest): Observable<ResponseDeviceChannelData> => {
        throwIfNullOrUndefined(serialNo, 'deviceChannelControllerFindDeviceChannelLastTSSnChName');
        throwIfNullOrUndefined(channelName, 'deviceChannelControllerFindDeviceChannelLastTSSnChName');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ResponseDeviceChannelData>({
            path: '/device-channel/data-last-timestamp-by-name/{serialNo}/{channelName}'.replace('{serialNo}', encodeURI(serialNo)).replace('{channelName}', encodeURI(channelName)),
            method: 'POST',
            headers,
        });
    };

}
