// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders } from '../runtime';
import {
    Token,
    User,
    UserExcludingIdEmailIsVirtualRoles,
    UserExcludingIdUsernameIsVirtualRoles,
} from '../models';

export interface UserControllerCreateRequest {
    userExcludingIdUsernameIsVirtualRoles?: UserExcludingIdUsernameIsVirtualRoles;
}

export interface UserControllerCreateVirtualRequest {
    userExcludingIdUsernameIsVirtualRoles?: UserExcludingIdUsernameIsVirtualRoles;
}

export interface UserControllerLoginRequest {
    userExcludingIdEmailIsVirtualRoles?: UserExcludingIdEmailIsVirtualRoles;
}

/**
 * no description
 */
export class UserControllerApi extends BaseAPI {

    /**
     * Used for registering a new <b>User</b>.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
     */
    userControllerCreate = ({ userExcludingIdUsernameIsVirtualRoles }: UserControllerCreateRequest): Observable<User> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<User>({
            path: '/user/register',
            method: 'POST',
            headers,
            body: userExcludingIdUsernameIsVirtualRoles,
        });
    };

    /**
     * Used for registering a new <b>Virtual User</b> by a <b>User</b>, identified by the provided <i>token.</i><br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
     */
    userControllerCreateVirtual = ({ userExcludingIdUsernameIsVirtualRoles }: UserControllerCreateVirtualRequest): Observable<User> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<User>({
            path: '/user/register/virtual',
            method: 'POST',
            headers,
            body: userExcludingIdUsernameIsVirtualRoles,
        });
    };

    /**
     * Used for <b>User</b> and <b>Virtual User</b> login. Exchanges <i>username/password</i> with an authorization <i>token</i>. Please enter the email provided durring registration in the username field.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
     */
    userControllerLogin = ({ userExcludingIdEmailIsVirtualRoles }: UserControllerLoginRequest): Observable<Token> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<Token>({
            path: '/user/login',
            method: 'POST',
            headers,
            body: userExcludingIdEmailIsVirtualRoles,
        });
    };

}
