// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    AssetGroup,
    AssetGroupExcludingIdUserId,
} from '../models';

export interface AssetGroupControllerCreateAssetGroupRequest {
    assetGroupExcludingIdUserId?: AssetGroupExcludingIdUserId;
}

export interface AssetGroupControllerDeleteByIdRequest {
    id: number;
}

/**
 * no description
 */
export class AssetGroupControllerApi extends BaseAPI {

    /**
     */
    assetGroupControllerCreateAssetGroup = ({ assetGroupExcludingIdUserId }: AssetGroupControllerCreateAssetGroupRequest): Observable<AssetGroup> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AssetGroup>({
            path: '/asset-group/user',
            method: 'POST',
            headers,
            body: assetGroupExcludingIdUserId,
        });
    };

    /**
     */
    assetGroupControllerDeleteById = ({ id }: AssetGroupControllerDeleteByIdRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'assetGroupControllerDeleteById');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/asset-group/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     */
    assetGroupControllerFindUserAssetGroups = (): Observable<Array<AssetGroup>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<AssetGroup>>({
            path: '/asset-groups/user',
            method: 'GET',
            headers,
        });
    };

}
