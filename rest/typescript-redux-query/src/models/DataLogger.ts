// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DataLogger
 */
export interface DataLogger  {
    /**
     * Automatically generated ID
     * @type {number}
     * @memberof DataLogger
     */
    id?: number;
    /**
     * Datalogger description
     * @type {string}
     * @memberof DataLogger
     */
    description?: string;
    /**
     * Method used by DataLogger to send data to the system. At present only FTP implemented
     * @type {string}
     * @memberof DataLogger
     */
    connectionType: string;
    /**
     * Format of the files uploaded to the system DataLogger. At present system supports CSV and XML formats
     * @type {string}
     * @memberof DataLogger
     */
    fileFormat: string;
    /**
     * Username of system FTP account, where the DataLogger sends the data (if applicable)
     * @type {string}
     * @memberof DataLogger
     */
    username?: string;
    /**
     * Password of system FTP account, where the DataLogger sends the data (if applicable)
     * @type {string}
     * @memberof DataLogger
     */
    passwd?: string;
    /**
     * Authentication token of DataLogger
     * @type {string}
     * @memberof DataLogger
     */
    authToken?: string;
    /**
     * JSON configuration file for DataLogger
     * @type {string}
     * @memberof DataLogger
     */
    config?: string;
    /**
     * Flag for selecting if DataLogger is to be initiated automatically from preexisting configuration
     * @type {boolean}
     * @memberof DataLogger
     */
    autoInit: boolean;
    /**
     * Flag for selecting if DataLogger sends compressed files
     * @type {boolean}
     * @memberof DataLogger
     */
    dataCompressed: boolean;
    /**
     * ID of User that DataLogger belongs to
     * @type {number}
     * @memberof DataLogger
     */
    userId: number;
}

export function DataLoggerFromJSON(json: any): DataLogger {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'connectionType': json['connectionType'],
        'fileFormat': json['fileFormat'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'passwd': !exists(json, 'passwd') ? undefined : json['passwd'],
        'authToken': !exists(json, 'authToken') ? undefined : json['authToken'],
        'config': !exists(json, 'config') ? undefined : json['config'],
        'autoInit': json['autoInit'],
        'dataCompressed': json['dataCompressed'],
        'userId': json['userId'],
    };
}

export function DataLoggerToJSON(value?: DataLogger): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'description': value.description,
        'connectionType': value.connectionType,
        'fileFormat': value.fileFormat,
        'username': value.username,
        'passwd': value.passwd,
        'authToken': value.authToken,
        'config': value.config,
        'autoInit': value.autoInit,
        'dataCompressed': value.dataCompressed,
        'userId': value.userId,
    };
}


