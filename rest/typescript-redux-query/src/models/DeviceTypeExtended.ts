// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChannelTypeExtended,
    ChannelTypeExtendedFromJSON,
    ChannelTypeExtendedToJSON,
} from './';

/**
 * 
 * @export
 * @interface DeviceTypeExtended
 */
export interface DeviceTypeExtended  {
    /**
     * Automatically generated ID
     * @type {number}
     * @memberof DeviceTypeExtended
     */
    id?: number;
    /**
     * DeviceType model
     * @type {string}
     * @memberof DeviceTypeExtended
     */
    model: string;
    /**
     * DeviceType description
     * @type {string}
     * @memberof DeviceTypeExtended
     */
    description?: string;
    /**
     * DeviceType manufacturer
     * @type {string}
     * @memberof DeviceTypeExtended
     */
    manufacturer: string;
    /**
     * DeviceType category
     * @type {string}
     * @memberof DeviceTypeExtended
     */
    category?: string;
    /**
     * Error status of device type
     * @type {boolean}
     * @memberof DeviceTypeExtended
     */
    error: boolean;
    /**
     * 
     * @type {Array<ChannelTypeExtended>}
     * @memberof DeviceTypeExtended
     */
    channelTypes: Array<ChannelTypeExtended>;
}

export function DeviceTypeExtendedFromJSON(json: any): DeviceTypeExtended {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'model': json['model'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'manufacturer': json['manufacturer'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'error': json['error'],
        'channelTypes': (json['channelTypes'] as Array<any>).map(ChannelTypeExtendedFromJSON),
    };
}

export function DeviceTypeExtendedToJSON(value?: DeviceTypeExtended): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'model': value.model,
        'description': value.description,
        'manufacturer': value.manufacturer,
        'category': value.category,
        'error': value.error,
        'channelTypes': (value.channelTypes as Array<any>).map(ChannelTypeExtendedToJSON),
    };
}


