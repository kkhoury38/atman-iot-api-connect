// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Device,
    DeviceFromJSON,
    DeviceToJSON,
    DeviceTypeExtended,
    DeviceTypeExtendedFromJSON,
    DeviceTypeExtendedToJSON,
    MeasurementSample,
    MeasurementSampleFromJSON,
    MeasurementSampleToJSON,
} from './';

/**
 * 
 * @export
 * @interface ResponseDataLoggerSetupStep2
 */
export interface ResponseDataLoggerSetupStep2  {
    /**
     * 
     * @type {Array<DeviceTypeExtended>}
     * @memberof ResponseDataLoggerSetupStep2
     */
    deviceTypes: Array<DeviceTypeExtended>;
    /**
     * 
     * @type {Array<Device>}
     * @memberof ResponseDataLoggerSetupStep2
     */
    devices: Array<Device>;
    /**
     * 
     * @type {MeasurementSample}
     * @memberof ResponseDataLoggerSetupStep2
     */
    sample?: MeasurementSample;
    /**
     * Sample Value
     * @type {number}
     * @memberof ResponseDataLoggerSetupStep2
     */
    errorCount: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseDataLoggerSetupStep2
     */
    errors?: Array<string>;
}

export function ResponseDataLoggerSetupStep2FromJSON(json: any): ResponseDataLoggerSetupStep2 {
    return {
        'deviceTypes': (json['deviceTypes'] as Array<any>).map(DeviceTypeExtendedFromJSON),
        'devices': (json['devices'] as Array<any>).map(DeviceFromJSON),
        'sample': !exists(json, 'sample') ? undefined : MeasurementSampleFromJSON(json['sample']),
        'errorCount': json['errorCount'],
        'errors': !exists(json, 'errors') ? undefined : json['errors'],
    };
}

export function ResponseDataLoggerSetupStep2ToJSON(value?: ResponseDataLoggerSetupStep2): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'deviceTypes': (value.deviceTypes as Array<any>).map(DeviceTypeExtendedToJSON),
        'devices': (value.devices as Array<any>).map(DeviceToJSON),
        'sample': MeasurementSampleToJSON(value.sample),
        'errorCount': value.errorCount,
        'errors': value.errors,
    };
}


