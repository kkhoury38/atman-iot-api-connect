// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ChannelTypeWithRelations,
    ChannelTypeWithRelationsFromJSON,
    ChannelTypeWithRelationsToJSON,
} from './';

/**
 * (Schema options: { includeRelations: true })
 * @export
 * @interface DeviceTypeWithRelations
 */
export interface DeviceTypeWithRelations  {
    /**
     * Automatically generated ID
     * @type {number}
     * @memberof DeviceTypeWithRelations
     */
    id?: number;
    /**
     * DeviceType model
     * @type {string}
     * @memberof DeviceTypeWithRelations
     */
    model: string;
    /**
     * DeviceType description
     * @type {string}
     * @memberof DeviceTypeWithRelations
     */
    description?: string;
    /**
     * DeviceType manufacturer
     * @type {string}
     * @memberof DeviceTypeWithRelations
     */
    manufacturer: string;
    /**
     * DeviceType category
     * @type {string}
     * @memberof DeviceTypeWithRelations
     */
    category?: string;
    /**
     * 
     * @type {Array<ChannelTypeWithRelations>}
     * @memberof DeviceTypeWithRelations
     */
    channelTypes?: Array<ChannelTypeWithRelations>;
}

export function DeviceTypeWithRelationsFromJSON(json: any): DeviceTypeWithRelations {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'model': json['model'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'manufacturer': json['manufacturer'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'channelTypes': !exists(json, 'channelTypes') ? undefined : (json['channelTypes'] as Array<any>).map(ChannelTypeWithRelationsFromJSON),
    };
}

export function DeviceTypeWithRelationsToJSON(value?: DeviceTypeWithRelations): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'model': value.model,
        'description': value.description,
        'manufacturer': value.manufacturer,
        'category': value.category,
        'channelTypes': value.channelTypes === undefined ? undefined : (value.channelTypes as Array<any>).map(ChannelTypeWithRelationsToJSON),
    };
}


