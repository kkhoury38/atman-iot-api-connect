// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DeviceTypeWithRelations,
    DeviceTypeWithRelationsFromJSON,
    DeviceTypeWithRelationsToJSON,
} from './';

/**
 * (Schema options: { includeRelations: true })
 * @export
 * @interface ChannelTypeWithRelations
 */
export interface ChannelTypeWithRelations  {
    /**
     * Automatically generated ID
     * @type {number}
     * @memberof ChannelTypeWithRelations
     */
    id?: number;
    /**
     * ChannelType name
     * @type {string}
     * @memberof ChannelTypeWithRelations
     */
    name: string;
    /**
     * ChannelType category
     * @type {string}
     * @memberof ChannelTypeWithRelations
     */
    category?: string;
    /**
     * ChannelType description
     * @type {string}
     * @memberof ChannelTypeWithRelations
     */
    description?: string;
    /**
     * Unit of measurement
     * @type {string}
     * @memberof ChannelTypeWithRelations
     */
    unit?: string;
    /**
     * Type of data: UNDEFINED / SPOT_VALUE / COUNTER / TEXT
     * @type {string}
     * @memberof ChannelTypeWithRelations
     */
    channelType: string;
    /**
     * ID of DeviceType that ChannelType belongs to
     * @type {number}
     * @memberof ChannelTypeWithRelations
     */
    deviceTypeId: number;
    /**
     * 
     * @type {DeviceTypeWithRelations}
     * @memberof ChannelTypeWithRelations
     */
    deviceType?: DeviceTypeWithRelations;
}

export function ChannelTypeWithRelationsFromJSON(json: any): ChannelTypeWithRelations {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'unit': !exists(json, 'unit') ? undefined : json['unit'],
        'channelType': json['channelType'],
        'deviceTypeId': json['deviceTypeId'],
        'deviceType': !exists(json, 'deviceType') ? undefined : DeviceTypeWithRelationsFromJSON(json['deviceType']),
    };
}

export function ChannelTypeWithRelationsToJSON(value?: ChannelTypeWithRelations): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'name': value.name,
        'category': value.category,
        'description': value.description,
        'unit': value.unit,
        'channelType': value.channelType,
        'deviceTypeId': value.deviceTypeId,
        'deviceType': DeviceTypeWithRelationsToJSON(value.deviceType),
    };
}


