// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Event
 */
export interface Event  {
    /**
     * Automatically generated ID
     * @type {number}
     * @memberof Event
     */
    id?: number;
    /**
     * ID of Asset associated with Event
     * @type {number}
     * @memberof Event
     */
    assetId: number;
    /**
     * ID of EventRule triggered
     * @type {number}
     * @memberof Event
     */
    eventRuleId: number;
    /**
     * Event severity - Can be  LOW / MEDIUM / HIGH
     * @type {string}
     * @memberof Event
     */
    severity: string;
    /**
     * Event description
     * @type {string}
     * @memberof Event
     */
    description?: string;
    /**
     * Set to true if Event has been resolved
     * @type {boolean}
     * @memberof Event
     */
    resolved: boolean;
    /**
     * Event creation timestamp
     * @type {Date}
     * @memberof Event
     */
    timestamp: Date;
    /**
     * Event resolution timestamp
     * @type {Date}
     * @memberof Event
     */
    resolutionTimestamp?: Date;
}

export function EventFromJSON(json: any): Event {
    return {
        'id': !exists(json, 'id') ? undefined : json['id'],
        'assetId': json['assetId'],
        'eventRuleId': json['eventRuleId'],
        'severity': json['severity'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'resolved': json['resolved'],
        'timestamp': new Date(json['timestamp']),
        'resolutionTimestamp': !exists(json, 'resolutionTimestamp') ? undefined : new Date(json['resolutionTimestamp']),
    };
}

export function EventToJSON(value?: Event): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'id': value.id,
        'assetId': value.assetId,
        'eventRuleId': value.eventRuleId,
        'severity': value.severity,
        'description': value.description,
        'resolved': value.resolved,
        'timestamp': value.timestamp.toISOString(),
        'resolutionTimestamp': value.resolutionTimestamp === undefined ? undefined : value.resolutionTimestamp.toISOString(),
    };
}


