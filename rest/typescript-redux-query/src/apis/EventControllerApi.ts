// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    Event,
    EventFromJSON,
    EventToJSON,
    EventExcludingIdResolvedTimestampResolutionTimestamp,
    EventExcludingIdResolvedTimestampResolutionTimestampFromJSON,
    EventExcludingIdResolvedTimestampResolutionTimestampToJSON,
    EventRelatedDevice,
    EventRelatedDeviceFromJSON,
    EventRelatedDeviceToJSON,
    EventRelatedDeviceExcludingId,
    EventRelatedDeviceExcludingIdFromJSON,
    EventRelatedDeviceExcludingIdToJSON,
    EventRule,
    EventRuleFromJSON,
    EventRuleToJSON,
    EventRuleSubscription,
    EventRuleSubscriptionFromJSON,
    EventRuleSubscriptionToJSON,
    EventRuleSubscriptionExcludingIdLastExecTimestamp,
    EventRuleSubscriptionExcludingIdLastExecTimestampFromJSON,
    EventRuleSubscriptionExcludingIdLastExecTimestampToJSON,
    RequestEventCreateRule,
    RequestEventCreateRuleFromJSON,
    RequestEventCreateRuleToJSON,
    ResponseEventAssetEvents,
    ResponseEventAssetEventsFromJSON,
    ResponseEventAssetEventsToJSON,
} from '../models';

export interface EventControllerCreateNowRequest {
    eventExcludingIdResolvedTimestampResolutionTimestamp?: EventExcludingIdResolvedTimestampResolutionTimestamp;
}

export interface EventControllerCreateRelatedDevRequest {
    eventRelatedDeviceExcludingId?: EventRelatedDeviceExcludingId;
}

export interface EventControllerCreateRuleRequest {
    requestEventCreateRule?: RequestEventCreateRule;
}

export interface EventControllerCreateRuleSubscriptionRequest {
    eventRuleSubscriptionExcludingIdLastExecTimestamp?: EventRuleSubscriptionExcludingIdLastExecTimestamp;
}

export interface EventControllerFindRequest {
    assetId: number;
}

export interface EventControllerFindUnresolvedRequest {
    assetId: number;
}

export interface EventControllerUpdateByIdRequest {
    id: number;
}


/**
 */
function eventControllerCreateNowRaw<T>(requestParameters: EventControllerCreateNowRequest, requestConfig: runtime.TypedQueryConfig<T, Event> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/event`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || EventExcludingIdResolvedTimestampResolutionTimestampToJSON(requestParameters.eventExcludingIdResolvedTimestampResolutionTimestamp),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventFromJSON(body), text);
    }

    return config;
}

/**
*/
export function eventControllerCreateNow<T>(requestParameters: EventControllerCreateNowRequest, requestConfig?: runtime.TypedQueryConfig<T, Event>): QueryConfig<T> {
    return eventControllerCreateNowRaw(requestParameters, requestConfig);
}

/**
 */
function eventControllerCreateRelatedDevRaw<T>(requestParameters: EventControllerCreateRelatedDevRequest, requestConfig: runtime.TypedQueryConfig<T, EventRelatedDevice> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/event/related-device`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || EventRelatedDeviceExcludingIdToJSON(requestParameters.eventRelatedDeviceExcludingId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventRelatedDeviceFromJSON(body), text);
    }

    return config;
}

/**
*/
export function eventControllerCreateRelatedDev<T>(requestParameters: EventControllerCreateRelatedDevRequest, requestConfig?: runtime.TypedQueryConfig<T, EventRelatedDevice>): QueryConfig<T> {
    return eventControllerCreateRelatedDevRaw(requestParameters, requestConfig);
}

/**
 */
function eventControllerCreateRuleRaw<T>(requestParameters: EventControllerCreateRuleRequest, requestConfig: runtime.TypedQueryConfig<T, EventRule> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/event/rule`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || RequestEventCreateRuleToJSON(requestParameters.requestEventCreateRule),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventRuleFromJSON(body), text);
    }

    return config;
}

/**
*/
export function eventControllerCreateRule<T>(requestParameters: EventControllerCreateRuleRequest, requestConfig?: runtime.TypedQueryConfig<T, EventRule>): QueryConfig<T> {
    return eventControllerCreateRuleRaw(requestParameters, requestConfig);
}

/**
 */
function eventControllerCreateRuleSubscriptionRaw<T>(requestParameters: EventControllerCreateRuleSubscriptionRequest, requestConfig: runtime.TypedQueryConfig<T, EventRuleSubscription> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/event/rule/subscription`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || EventRuleSubscriptionExcludingIdLastExecTimestampToJSON(requestParameters.eventRuleSubscriptionExcludingIdLastExecTimestamp),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(EventRuleSubscriptionFromJSON(body), text);
    }

    return config;
}

/**
*/
export function eventControllerCreateRuleSubscription<T>(requestParameters: EventControllerCreateRuleSubscriptionRequest, requestConfig?: runtime.TypedQueryConfig<T, EventRuleSubscription>): QueryConfig<T> {
    return eventControllerCreateRuleSubscriptionRaw(requestParameters, requestConfig);
}

/**
 */
function eventControllerFindRaw<T>(requestParameters: EventControllerFindRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ResponseEventAssetEvents>> = {}): QueryConfig<T> {
    if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
        throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling eventControllerFind.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/events/all/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ResponseEventAssetEventsFromJSON), text);
    }

    return config;
}

/**
*/
export function eventControllerFind<T>(requestParameters: EventControllerFindRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ResponseEventAssetEvents>>): QueryConfig<T> {
    return eventControllerFindRaw(requestParameters, requestConfig);
}

/**
 */
function eventControllerFindUnresolvedRaw<T>(requestParameters: EventControllerFindUnresolvedRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ResponseEventAssetEvents>> = {}): QueryConfig<T> {
    if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
        throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling eventControllerFindUnresolved.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/events/unresolved/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ResponseEventAssetEventsFromJSON), text);
    }

    return config;
}

/**
*/
export function eventControllerFindUnresolved<T>(requestParameters: EventControllerFindUnresolvedRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ResponseEventAssetEvents>>): QueryConfig<T> {
    return eventControllerFindUnresolvedRaw(requestParameters, requestConfig);
}

/**
 */
function eventControllerProcessSubscriptionsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/event/process`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function eventControllerProcessSubscriptions<T>( requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return eventControllerProcessSubscriptionsRaw( requestConfig);
}

/**
 */
function eventControllerUpdateByIdRaw<T>(requestParameters: EventControllerUpdateByIdRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling eventControllerUpdateById.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/event/resolve/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PATCH',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function eventControllerUpdateById<T>(requestParameters: EventControllerUpdateByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return eventControllerUpdateByIdRaw(requestParameters, requestConfig);
}

