// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    RequestVirtualAccessRightExcludingAssetGroupId,
    RequestVirtualAccessRightExcludingAssetGroupIdFromJSON,
    RequestVirtualAccessRightExcludingAssetGroupIdToJSON,
    RequestVirtualAccessRightExcludingAssetId,
    RequestVirtualAccessRightExcludingAssetIdFromJSON,
    RequestVirtualAccessRightExcludingAssetIdToJSON,
    VirtualAccess,
    VirtualAccessFromJSON,
    VirtualAccessToJSON,
} from '../models';

export interface VirtualAccessControllerCreateAccessByGroupRequest {
    requestVirtualAccessRightExcludingAssetId?: RequestVirtualAccessRightExcludingAssetId;
}

export interface VirtualAccessControllerCreateAccessByRightRequest {
    requestVirtualAccessRightExcludingAssetGroupId?: RequestVirtualAccessRightExcludingAssetGroupId;
}

export interface VirtualAccessControllerDeleteByIdRequest {
    id: number;
}

export interface VirtualAccessControllerFindByUserIdRequest {
    userId: number;
}


/**
 */
function virtualAccessControllerCreateAccessByGroupRaw<T>(requestParameters: VirtualAccessControllerCreateAccessByGroupRequest, requestConfig: runtime.TypedQueryConfig<T, Array<VirtualAccess>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/virtual-access/by-asset-group`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || RequestVirtualAccessRightExcludingAssetIdToJSON(requestParameters.requestVirtualAccessRightExcludingAssetId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(VirtualAccessFromJSON), text);
    }

    return config;
}

/**
*/
export function virtualAccessControllerCreateAccessByGroup<T>(requestParameters: VirtualAccessControllerCreateAccessByGroupRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<VirtualAccess>>): QueryConfig<T> {
    return virtualAccessControllerCreateAccessByGroupRaw(requestParameters, requestConfig);
}

/**
 */
function virtualAccessControllerCreateAccessByRightRaw<T>(requestParameters: VirtualAccessControllerCreateAccessByRightRequest, requestConfig: runtime.TypedQueryConfig<T, VirtualAccess> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/virtual-access/by-asset`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || RequestVirtualAccessRightExcludingAssetGroupIdToJSON(requestParameters.requestVirtualAccessRightExcludingAssetGroupId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(VirtualAccessFromJSON(body), text);
    }

    return config;
}

/**
*/
export function virtualAccessControllerCreateAccessByRight<T>(requestParameters: VirtualAccessControllerCreateAccessByRightRequest, requestConfig?: runtime.TypedQueryConfig<T, VirtualAccess>): QueryConfig<T> {
    return virtualAccessControllerCreateAccessByRightRaw(requestParameters, requestConfig);
}

/**
 */
function virtualAccessControllerDeleteByIdRaw<T>(requestParameters: VirtualAccessControllerDeleteByIdRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling virtualAccessControllerDeleteById.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/virtual-access/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function virtualAccessControllerDeleteById<T>(requestParameters: VirtualAccessControllerDeleteByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return virtualAccessControllerDeleteByIdRaw(requestParameters, requestConfig);
}

/**
 */
function virtualAccessControllerFindByUserIdRaw<T>(requestParameters: VirtualAccessControllerFindByUserIdRequest, requestConfig: runtime.TypedQueryConfig<T, Array<VirtualAccess>> = {}): QueryConfig<T> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
        throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling virtualAccessControllerFindByUserId.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/virtual-access/by-userId/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(VirtualAccessFromJSON), text);
    }

    return config;
}

/**
*/
export function virtualAccessControllerFindByUserId<T>(requestParameters: VirtualAccessControllerFindByUserIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<VirtualAccess>>): QueryConfig<T> {
    return virtualAccessControllerFindByUserIdRaw(requestParameters, requestConfig);
}

