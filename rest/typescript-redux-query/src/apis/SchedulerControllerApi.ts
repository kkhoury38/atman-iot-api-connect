// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';


export interface SchedulerControllerProcessEventsRequest {
    attempt: number;
    serverKey: string;
}

export interface SchedulerControllerProcessFtpRejectedRequest {
    serverKey: string;
}


/**
 */
function schedulerControllerProcessEventsRaw<T>(requestParameters: SchedulerControllerProcessEventsRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.attempt === null || requestParameters.attempt === undefined) {
        throw new runtime.RequiredError('attempt','Required parameter requestParameters.attempt was null or undefined when calling schedulerControllerProcessEvents.');
    }

    if (requestParameters.serverKey === null || requestParameters.serverKey === undefined) {
        throw new runtime.RequiredError('serverKey','Required parameter requestParameters.serverKey was null or undefined when calling schedulerControllerProcessEvents.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/scheduler/process/events/{attempt}/{serverKey}`.replace(`{${"attempt"}}`, encodeURIComponent(String(requestParameters.attempt))).replace(`{${"serverKey"}}`, encodeURIComponent(String(requestParameters.serverKey))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function schedulerControllerProcessEvents<T>(requestParameters: SchedulerControllerProcessEventsRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return schedulerControllerProcessEventsRaw(requestParameters, requestConfig);
}

/**
 */
function schedulerControllerProcessFtpRejectedRaw<T>(requestParameters: SchedulerControllerProcessFtpRejectedRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.serverKey === null || requestParameters.serverKey === undefined) {
        throw new runtime.RequiredError('serverKey','Required parameter requestParameters.serverKey was null or undefined when calling schedulerControllerProcessFtpRejected.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/scheduler/process/ftp-rejected/{serverKey}`.replace(`{${"serverKey"}}`, encodeURIComponent(String(requestParameters.serverKey))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function schedulerControllerProcessFtpRejected<T>(requestParameters: SchedulerControllerProcessFtpRejectedRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return schedulerControllerProcessFtpRejectedRaw(requestParameters, requestConfig);
}

