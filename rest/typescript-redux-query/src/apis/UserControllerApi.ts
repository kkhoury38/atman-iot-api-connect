// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    Token,
    TokenFromJSON,
    TokenToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserExcludingIdEmailIsVirtualRoles,
    UserExcludingIdEmailIsVirtualRolesFromJSON,
    UserExcludingIdEmailIsVirtualRolesToJSON,
    UserExcludingIdUsernameIsVirtualRoles,
    UserExcludingIdUsernameIsVirtualRolesFromJSON,
    UserExcludingIdUsernameIsVirtualRolesToJSON,
} from '../models';

export interface UserControllerCreateRequest {
    userExcludingIdUsernameIsVirtualRoles?: UserExcludingIdUsernameIsVirtualRoles;
}

export interface UserControllerCreateVirtualRequest {
    userExcludingIdUsernameIsVirtualRoles?: UserExcludingIdUsernameIsVirtualRoles;
}

export interface UserControllerLoginRequest {
    userExcludingIdEmailIsVirtualRoles?: UserExcludingIdEmailIsVirtualRoles;
}


/**
 * Used for registering a new <b>User</b>.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
 */
function userControllerCreateRaw<T>(requestParameters: UserControllerCreateRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/user/register`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UserExcludingIdUsernameIsVirtualRolesToJSON(requestParameters.userExcludingIdUsernameIsVirtualRoles),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Used for registering a new <b>User</b>.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
*/
export function userControllerCreate<T>(requestParameters: UserControllerCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return userControllerCreateRaw(requestParameters, requestConfig);
}

/**
 * Used for registering a new <b>Virtual User</b> by a <b>User</b>, identified by the provided <i>token.</i><br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
 */
function userControllerCreateVirtualRaw<T>(requestParameters: UserControllerCreateVirtualRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/user/register/virtual`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UserExcludingIdUsernameIsVirtualRolesToJSON(requestParameters.userExcludingIdUsernameIsVirtualRoles),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Used for registering a new <b>Virtual User</b> by a <b>User</b>, identified by the provided <i>token.</i><br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
*/
export function userControllerCreateVirtual<T>(requestParameters: UserControllerCreateVirtualRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return userControllerCreateVirtualRaw(requestParameters, requestConfig);
}

/**
 * Used for <b>User</b> and <b>Virtual User</b> login. Exchanges <i>username/password</i> with an authorization <i>token</i>. Please enter the email provided durring registration in the username field.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
 */
function userControllerLoginRaw<T>(requestParameters: UserControllerLoginRequest, requestConfig: runtime.TypedQueryConfig<T, Token> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `/user/login`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UserExcludingIdEmailIsVirtualRolesToJSON(requestParameters.userExcludingIdEmailIsVirtualRoles),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TokenFromJSON(body), text);
    }

    return config;
}

/**
* Used for <b>User</b> and <b>Virtual User</b> login. Exchanges <i>username/password</i> with an authorization <i>token</i>. Please enter the email provided durring registration in the username field.<br><br><i><b>References:</b> <a href=\"/documentation.html#tocsuser\" target=\"_blank\">UserModel</a></i>
*/
export function userControllerLogin<T>(requestParameters: UserControllerLoginRequest, requestConfig?: runtime.TypedQueryConfig<T, Token>): QueryConfig<T> {
    return userControllerLoginRaw(requestParameters, requestConfig);
}

