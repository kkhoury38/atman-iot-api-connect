// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    DeviceGroupMembership,
    DeviceGroupMembershipFromJSON,
    DeviceGroupMembershipToJSON,
    DeviceGroupMembershipExcludingId,
    DeviceGroupMembershipExcludingIdFromJSON,
    DeviceGroupMembershipExcludingIdToJSON,
} from '../models';

export interface DeviceGroupMembershipControllerCreateRequest {
    deviceGroupMembershipExcludingId?: DeviceGroupMembershipExcludingId;
}

export interface DeviceGroupMembershipControllerDeleteByIdRequest {
    id: number;
}

export interface DeviceGroupMembershipControllerFindByAssetIdRequest {
    assetId: number;
}

export interface DeviceGroupMembershipControllerFindByDeviceIdRequest {
    deviceId: number;
}


/**
 */
function deviceGroupMembershipControllerCreateRaw<T>(requestParameters: DeviceGroupMembershipControllerCreateRequest, requestConfig: runtime.TypedQueryConfig<T, DeviceGroupMembership> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device-group-memberships`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeviceGroupMembershipExcludingIdToJSON(requestParameters.deviceGroupMembershipExcludingId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeviceGroupMembershipFromJSON(body), text);
    }

    return config;
}

/**
*/
export function deviceGroupMembershipControllerCreate<T>(requestParameters: DeviceGroupMembershipControllerCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, DeviceGroupMembership>): QueryConfig<T> {
    return deviceGroupMembershipControllerCreateRaw(requestParameters, requestConfig);
}

/**
 */
function deviceGroupMembershipControllerDeleteByIdRaw<T>(requestParameters: DeviceGroupMembershipControllerDeleteByIdRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deviceGroupMembershipControllerDeleteById.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device-group-memberships/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function deviceGroupMembershipControllerDeleteById<T>(requestParameters: DeviceGroupMembershipControllerDeleteByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deviceGroupMembershipControllerDeleteByIdRaw(requestParameters, requestConfig);
}

/**
 */
function deviceGroupMembershipControllerFindByAssetIdRaw<T>(requestParameters: DeviceGroupMembershipControllerFindByAssetIdRequest, requestConfig: runtime.TypedQueryConfig<T, Array<DeviceGroupMembership>> = {}): QueryConfig<T> {
    if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
        throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling deviceGroupMembershipControllerFindByAssetId.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device-group-memberships/by-asset/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(DeviceGroupMembershipFromJSON), text);
    }

    return config;
}

/**
*/
export function deviceGroupMembershipControllerFindByAssetId<T>(requestParameters: DeviceGroupMembershipControllerFindByAssetIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<DeviceGroupMembership>>): QueryConfig<T> {
    return deviceGroupMembershipControllerFindByAssetIdRaw(requestParameters, requestConfig);
}

/**
 */
function deviceGroupMembershipControllerFindByDeviceIdRaw<T>(requestParameters: DeviceGroupMembershipControllerFindByDeviceIdRequest, requestConfig: runtime.TypedQueryConfig<T, Array<DeviceGroupMembership>> = {}): QueryConfig<T> {
    if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
        throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling deviceGroupMembershipControllerFindByDeviceId.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device-group-memberships/by-device/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(DeviceGroupMembershipFromJSON), text);
    }

    return config;
}

/**
*/
export function deviceGroupMembershipControllerFindByDeviceId<T>(requestParameters: DeviceGroupMembershipControllerFindByDeviceIdRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<DeviceGroupMembership>>): QueryConfig<T> {
    return deviceGroupMembershipControllerFindByDeviceIdRaw(requestParameters, requestConfig);
}

