// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    ChannelType,
    ChannelTypeFromJSON,
    ChannelTypeToJSON,
    ChannelTypeExcludingIdDeviceTypeId,
    ChannelTypeExcludingIdDeviceTypeIdFromJSON,
    ChannelTypeExcludingIdDeviceTypeIdToJSON,
    LoopbackCount,
    LoopbackCountFromJSON,
    LoopbackCountToJSON,
} from '../models';

export interface DeviceTypeChannelTypeControllerCountRequest {
    deviceTypeId: number;
    token?: string;
}

export interface DeviceTypeChannelTypeControllerCreateRequest {
    deviceTypeId: number;
    channelTypeExcludingIdDeviceTypeId?: ChannelTypeExcludingIdDeviceTypeId;
}

export interface DeviceTypeChannelTypeControllerFindRequest {
    deviceTypeId: number;
}


/**
 */
function deviceTypeChannelTypeControllerCountRaw<T>(requestParameters: DeviceTypeChannelTypeControllerCountRequest, requestConfig: runtime.TypedQueryConfig<T, LoopbackCount> = {}): QueryConfig<T> {
    if (requestParameters.deviceTypeId === null || requestParameters.deviceTypeId === undefined) {
        throw new runtime.RequiredError('deviceTypeId','Required parameter requestParameters.deviceTypeId was null or undefined when calling deviceTypeChannelTypeControllerCount.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.token !== undefined) {
        queryParameters['token'] = requestParameters.token;
    }

    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device-type-channel-type/{deviceTypeId}/count`.replace(`{${"deviceTypeId"}}`, encodeURIComponent(String(requestParameters.deviceTypeId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LoopbackCountFromJSON(body), text);
    }

    return config;
}

/**
*/
export function deviceTypeChannelTypeControllerCount<T>(requestParameters: DeviceTypeChannelTypeControllerCountRequest, requestConfig?: runtime.TypedQueryConfig<T, LoopbackCount>): QueryConfig<T> {
    return deviceTypeChannelTypeControllerCountRaw(requestParameters, requestConfig);
}

/**
 */
function deviceTypeChannelTypeControllerCreateRaw<T>(requestParameters: DeviceTypeChannelTypeControllerCreateRequest, requestConfig: runtime.TypedQueryConfig<T, ChannelType> = {}): QueryConfig<T> {
    if (requestParameters.deviceTypeId === null || requestParameters.deviceTypeId === undefined) {
        throw new runtime.RequiredError('deviceTypeId','Required parameter requestParameters.deviceTypeId was null or undefined when calling deviceTypeChannelTypeControllerCreate.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device-type-channel-type/{deviceTypeId}`.replace(`{${"deviceTypeId"}}`, encodeURIComponent(String(requestParameters.deviceTypeId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ChannelTypeExcludingIdDeviceTypeIdToJSON(requestParameters.channelTypeExcludingIdDeviceTypeId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChannelTypeFromJSON(body), text);
    }

    return config;
}

/**
*/
export function deviceTypeChannelTypeControllerCreate<T>(requestParameters: DeviceTypeChannelTypeControllerCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, ChannelType>): QueryConfig<T> {
    return deviceTypeChannelTypeControllerCreateRaw(requestParameters, requestConfig);
}

/**
 */
function deviceTypeChannelTypeControllerFindRaw<T>(requestParameters: DeviceTypeChannelTypeControllerFindRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ChannelType>> = {}): QueryConfig<T> {
    if (requestParameters.deviceTypeId === null || requestParameters.deviceTypeId === undefined) {
        throw new runtime.RequiredError('deviceTypeId','Required parameter requestParameters.deviceTypeId was null or undefined when calling deviceTypeChannelTypeControllerFind.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device-type-channel-type/{deviceTypeId}`.replace(`{${"deviceTypeId"}}`, encodeURIComponent(String(requestParameters.deviceTypeId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ChannelTypeFromJSON), text);
    }

    return config;
}

/**
*/
export function deviceTypeChannelTypeControllerFind<T>(requestParameters: DeviceTypeChannelTypeControllerFindRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ChannelType>>): QueryConfig<T> {
    return deviceTypeChannelTypeControllerFindRaw(requestParameters, requestConfig);
}

