// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    Channel,
    ChannelFromJSON,
    ChannelToJSON,
    ChannelExcludingIdDeviceId,
    ChannelExcludingIdDeviceIdFromJSON,
    ChannelExcludingIdDeviceIdToJSON,
    ChannelType,
    ChannelTypeFromJSON,
    ChannelTypeToJSON,
    Device,
    DeviceFromJSON,
    DeviceToJSON,
    DeviceExcludingIdDataLoggerId,
    DeviceExcludingIdDataLoggerIdFromJSON,
    DeviceExcludingIdDataLoggerIdToJSON,
} from '../models';

export interface DeviceControllerCreateRequest {
    dataLoggerId: number;
    deviceExcludingIdDataLoggerId?: DeviceExcludingIdDataLoggerId;
}

export interface DeviceControllerCreateChannelRequest {
    deviceId: number;
    channelExcludingIdDeviceId?: ChannelExcludingIdDeviceId;
}

export interface DeviceControllerDisableChannelMonitoringRequest {
    deviceId: number;
    channelId: number;
}

export interface DeviceControllerEnableChannelMonitoringRequest {
    deviceId: number;
    channelId: number;
}

export interface DeviceControllerFindRequest {
    dataLoggerId: number;
}

export interface DeviceControllerFindChannelTypesRequest {
    deviceId: number;
    token?: string;
}

export interface DeviceControllerFindChannelsRequest {
    deviceId: number;
}


/**
 * Used for creating a new <b>Device</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
 */
function deviceControllerCreateRaw<T>(requestParameters: DeviceControllerCreateRequest, requestConfig: runtime.TypedQueryConfig<T, Device> = {}): QueryConfig<T> {
    if (requestParameters.dataLoggerId === null || requestParameters.dataLoggerId === undefined) {
        throw new runtime.RequiredError('dataLoggerId','Required parameter requestParameters.dataLoggerId was null or undefined when calling deviceControllerCreate.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device/{dataLoggerId}`.replace(`{${"dataLoggerId"}}`, encodeURIComponent(String(requestParameters.dataLoggerId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || DeviceExcludingIdDataLoggerIdToJSON(requestParameters.deviceExcludingIdDataLoggerId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DeviceFromJSON(body), text);
    }

    return config;
}

/**
* Used for creating a new <b>Device</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
*/
export function deviceControllerCreate<T>(requestParameters: DeviceControllerCreateRequest, requestConfig?: runtime.TypedQueryConfig<T, Device>): QueryConfig<T> {
    return deviceControllerCreateRaw(requestParameters, requestConfig);
}

/**
 * Used for creating a new <b>Channel</b>, belonging to a <b>Device</b> with id <i>deviceId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
 */
function deviceControllerCreateChannelRaw<T>(requestParameters: DeviceControllerCreateChannelRequest, requestConfig: runtime.TypedQueryConfig<T, Channel> = {}): QueryConfig<T> {
    if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
        throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling deviceControllerCreateChannel.');
    }

    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device/{deviceId}/channel`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ChannelExcludingIdDeviceIdToJSON(requestParameters.channelExcludingIdDeviceId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ChannelFromJSON(body), text);
    }

    return config;
}

/**
* Used for creating a new <b>Channel</b>, belonging to a <b>Device</b> with id <i>deviceId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
*/
export function deviceControllerCreateChannel<T>(requestParameters: DeviceControllerCreateChannelRequest, requestConfig?: runtime.TypedQueryConfig<T, Channel>): QueryConfig<T> {
    return deviceControllerCreateChannelRaw(requestParameters, requestConfig);
}

/**
 * Disable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
 */
function deviceControllerDisableChannelMonitoringRaw<T>(requestParameters: DeviceControllerDisableChannelMonitoringRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
        throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling deviceControllerDisableChannelMonitoring.');
    }

    if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
        throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deviceControllerDisableChannelMonitoring.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device/{deviceId}/channel/{channelId}/disable-monitoring`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))).replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Disable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
*/
export function deviceControllerDisableChannelMonitoring<T>(requestParameters: DeviceControllerDisableChannelMonitoringRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deviceControllerDisableChannelMonitoringRaw(requestParameters, requestConfig);
}

/**
 * Enable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
 */
function deviceControllerEnableChannelMonitoringRaw<T>(requestParameters: DeviceControllerEnableChannelMonitoringRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
        throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling deviceControllerEnableChannelMonitoring.');
    }

    if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
        throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deviceControllerEnableChannelMonitoring.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device/{deviceId}/channel/{channelId}/enable-monitoring`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))).replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Enable monitoring of <b>Channel</b> identified by <i>channelId</i>, in <b>Device</b> identified by <i>deviceId</i>, owned by <b>User</b> authorized by <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
*/
export function deviceControllerEnableChannelMonitoring<T>(requestParameters: DeviceControllerEnableChannelMonitoringRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deviceControllerEnableChannelMonitoringRaw(requestParameters, requestConfig);
}

/**
 * Used for getting the <b>Devices</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
 */
function deviceControllerFindRaw<T>(requestParameters: DeviceControllerFindRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Device>> = {}): QueryConfig<T> {
    if (requestParameters.dataLoggerId === null || requestParameters.dataLoggerId === undefined) {
        throw new runtime.RequiredError('dataLoggerId','Required parameter requestParameters.dataLoggerId was null or undefined when calling deviceControllerFind.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/devices/{dataLoggerId}`.replace(`{${"dataLoggerId"}}`, encodeURIComponent(String(requestParameters.dataLoggerId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(DeviceFromJSON), text);
    }

    return config;
}

/**
* Used for getting the <b>Devices</b>, belonging to a <b>DataLogger</b> with id <i>dataLoggerId</i> by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-dataloggercontroller\" target=\"_blank\">DataLoggerController</a>, <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
*/
export function deviceControllerFind<T>(requestParameters: DeviceControllerFindRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Device>>): QueryConfig<T> {
    return deviceControllerFindRaw(requestParameters, requestConfig);
}

/**
 * Used for getting the  <b>Channel</b><b>Types</b> of <b>Channels</b> belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocschanneltype\" target=\"_blank\">ChannelTypeModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
 */
function deviceControllerFindChannelTypesRaw<T>(requestParameters: DeviceControllerFindChannelTypesRequest, requestConfig: runtime.TypedQueryConfig<T, Array<ChannelType>> = {}): QueryConfig<T> {
    if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
        throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling deviceControllerFindChannelTypes.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.token !== undefined) {
        queryParameters['token'] = requestParameters.token;
    }

    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device/{deviceId}/channelTypes`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ChannelTypeFromJSON), text);
    }

    return config;
}

/**
* Used for getting the  <b>Channel</b><b>Types</b> of <b>Channels</b> belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocschanneltype\" target=\"_blank\">ChannelTypeModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
*/
export function deviceControllerFindChannelTypes<T>(requestParameters: DeviceControllerFindChannelTypesRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<ChannelType>>): QueryConfig<T> {
    return deviceControllerFindChannelTypesRaw(requestParameters, requestConfig);
}

/**
 * Used for getting <b>Channel</b><b>s</b>, belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
 */
function deviceControllerFindChannelsRaw<T>(requestParameters: DeviceControllerFindChannelsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Channel>> = {}): QueryConfig<T> {
    if (requestParameters.deviceId === null || requestParameters.deviceId === undefined) {
        throw new runtime.RequiredError('deviceId','Required parameter requestParameters.deviceId was null or undefined when calling deviceControllerFindChannels.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/device/{deviceId}/channels`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters.deviceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ChannelFromJSON), text);
    }

    return config;
}

/**
* Used for getting <b>Channel</b><b>s</b>, belonging to a <b>Device</b> with id <i>deviceId</i>, by an authorized <b>User</b> identified by the provided <i>token</i>.<br><br><i><b>References:</b> <a href=\"/documentation.html#atman-iot-usercontroller\" target=\"_blank\">UserController</a>, <a href=\"/documentation.html#tocschannel\" target=\"_blank\">ChannelModel</a>, <a href=\"/documentation.html#tocsdevice\" target=\"_blank\">DeviceModel</a></i>
*/
export function deviceControllerFindChannels<T>(requestParameters: DeviceControllerFindChannelsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Channel>>): QueryConfig<T> {
    return deviceControllerFindChannelsRaw(requestParameters, requestConfig);
}

