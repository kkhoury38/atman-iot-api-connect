// tslint:disable
/**
 * Atman IoT
 * Atman IoT Server
 *
 * The version of the OpenAPI document: 0.2.3
 * Contact: k.khoury@k-ren.gr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

import {
    AssetGroup,
    AssetGroupFromJSON,
    AssetGroupToJSON,
    AssetGroupExcludingIdUserId,
    AssetGroupExcludingIdUserIdFromJSON,
    AssetGroupExcludingIdUserIdToJSON,
} from '../models';

export interface AssetGroupControllerCreateAssetGroupRequest {
    assetGroupExcludingIdUserId?: AssetGroupExcludingIdUserId;
}

export interface AssetGroupControllerDeleteByIdRequest {
    id: number;
}


/**
 */
function assetGroupControllerCreateAssetGroupRaw<T>(requestParameters: AssetGroupControllerCreateAssetGroupRequest, requestConfig: runtime.TypedQueryConfig<T, AssetGroup> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/asset-group/user`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AssetGroupExcludingIdUserIdToJSON(requestParameters.assetGroupExcludingIdUserId),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AssetGroupFromJSON(body), text);
    }

    return config;
}

/**
*/
export function assetGroupControllerCreateAssetGroup<T>(requestParameters: AssetGroupControllerCreateAssetGroupRequest, requestConfig?: runtime.TypedQueryConfig<T, AssetGroup>): QueryConfig<T> {
    return assetGroupControllerCreateAssetGroupRaw(requestParameters, requestConfig);
}

/**
 */
function assetGroupControllerDeleteByIdRaw<T>(requestParameters: AssetGroupControllerDeleteByIdRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling assetGroupControllerDeleteById.');
    }

    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/asset-group/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
*/
export function assetGroupControllerDeleteById<T>(requestParameters: AssetGroupControllerDeleteByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return assetGroupControllerDeleteByIdRaw(requestParameters, requestConfig);
}

/**
 */
function assetGroupControllerFindUserAssetGroupsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<AssetGroup>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `/asset-groups/user`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(AssetGroupFromJSON), text);
    }

    return config;
}

/**
*/
export function assetGroupControllerFindUserAssetGroups<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<AssetGroup>>): QueryConfig<T> {
    return assetGroupControllerFindUserAssetGroupsRaw( requestConfig);
}

